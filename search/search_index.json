{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>Qbs is an open source, cross-platform build system that simplifies the process of building software.</p> <p>Key features:</p> <ul> <li>Simple, easy-to-write build recipes</li> <li>Fast build system with parallel builds and tests</li> <li>Portable build recipes</li> <li>First-class support for many platforms</li> </ul> <p>Starting a new project is as simple as writing a short file:</p> <p><pre><code>CppApplication {\n    files: [\n        \"*.cpp\"\n    ]\n}\n</code></pre> And running <code>qbs</code>.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/05/25/the-state-of-the-project/","title":"The State of the Project","text":"<p>It's been a while since The Qt Company discontinued development of the Qbs project and it became an open-source project, and it seems the current status is not clear for many people.</p> <p>Qbs is now maintained by a small group of enthusiasts and we had 14 releases with lots of features since The Qt Company discontinued the development. Originally, Qbs was planned to be used as a build system for Qt itself, which is clearly not the case now and Qt is now built with CMake. Therefore, we changed our focus to be the general build tool for C/C++ (which wasn't very hard as Qbs is designed to be independent of programming language). We added support for several BareMetal compilers such Keil, IAR, Digital Mars and others. If you are developing for BareMetal, we encourage you to try Qbs! As for the Qt ecosystem, Qbs keeps up with the latest Qt versions and as a Qt user, you can use any of the three build systems for your projects - Qbs, CMake and QMake. There are several open source projects that use Qbs (the most notable is Tiled) as well as some private companies. We also implemented the QBS plugin for Visual Studio Code that allows to use Qbs not only in QtCreator. The plugin supports all basic features such as syntax highlighting and debugging and is pretty convenient for development of Qbs itself.</p> <p>Qbs still uses The Qt Company's infrastructure for development which they kindly provided - such as Gerrit for code review and Jira for bug tracking. We considered migrating to GitHub entirely, but decided that it would take too much effort for little gain, as we are already using GitHub actions for our CI as well as GitHub pages for the Qbs website.</p>"},{"location":"blog/2023/05/25/the-state-of-the-project/#future-plans","title":"Future plans","text":"<p>Recently, we had a major release which replaced the QtScript backend (based on enormous JavaScriptCore) with a light-weight QuickJS Engine. As mentioned in the post, we will have a new implementation of the module loading in 2.1 release - the old code was quite obscure and had severe performance issues with huge projects. Another big feature we are working on is the management of external dependencies - searching for libraries in the system, as well as support for package managers such as Conan. We want to make this flexible so the users would have full control from where modules come - from package manager, system or built from source as a part of the project. We are also planning to add support for C++ Modules since most compilers finally support them.</p>"},{"location":"blog/2023/05/25/the-state-of-the-project/#try-it","title":"Try it","text":"<p>We always encourage you to try Qbs in your projects. If you run into a bug or have a feature request, report it in our bug tracker. Or, if you are willing to implement it yourself, please upload the fix to the upstream, see the Contributing page for details.</p>"},{"location":"blog/2021/06/03/qbs-1190-released/","title":"Qbs 1.19.0 released","text":"<p>The Qbs build tool version 1.19.0 is available.</p> <p>Qbs is a community-driven language-agnostic build automation system. It is fast and offers an easy-to-learn language based upon QML.</p>"},{"location":"blog/2021/06/03/qbs-1190-released/#whats-new","title":"What's new","text":"<p>About 151 contributions went into this release since version 1.18.0. We have selected a few items below. Have a look into the complete changelog if you are interested in more details.</p>"},{"location":"blog/2021/06/03/qbs-1190-released/#codesign-module","title":"Codesign module","text":"<p>A new codesign module that implements code signing for Apple, Android and Windows platforms has been added.</p> <p>On Apple platforms, it is now possible to sign application bundles as well as standalone executables. By default, Qbs uses Xcode specs to understand whether it should enable codesigning. For example, codesigning is now enabled for iOS (non-simulator) builds, but not enabled for macOS, matching Xcode behavior. To sign an application for the Darwin platform, one should specify the codesign.signingIdentity and codesign.provisioningProfile properties:</p> <p><pre><code>CppApplication {\n    files: \"main.m\"\n    codesign.enableCodeSigning: true\n    codesign.provisioningProfile: \"my provisioning profile name\"\n    codesign.signingIdentity: \"Apple Development: My Team Name\"\n}\n</code></pre> Unlike Xcode, Qbs does not support auto-detection of the signingIdentity based on the provisioningProfile (yet).</p> <p>For more information, see the How-To section</p> <p>On the Android platform, it is possible to sign Aab and Apk packages. A typical example can be written as follows:</p> <pre><code>QtGuiApplication {\n    files: \"main.cpp\"\n    codesign.enableCodeSigning: true\n    codesign.keystorePath: \"path to the keyStore file\"\n    codesign.keystorePassword: \"keystore password\"\n    codesign.keyPassword: \"key password\"\n    codesign.keyAlias: \"key alias\"\n}\n</code></pre> <p>On Windows, to sign a standalone executable using the signtool.exe, one can specify the codesign.certificatePath and codesign.certificatePassword properties:</p> <pre><code>CppApplication {\n    files: \"main.m\"\n    codesign.enableCodeSigning: true\n    codesign.certificatePath: \"C:\\certs\\mycert.pfx\"\n    codesign.certificatePassword: \"p@ssw0rd\"\n}\n</code></pre>"},{"location":"blog/2021/06/03/qbs-1190-released/#cc-support","title":"C/C++ Support","text":"<ul> <li> <p>Qbs now supports multiple MSVC compiler versions installed in one Visual Studio installation   as well as multiple Windows SDK versions (QBS-1498). Also, multiple compiler versions are   properly detected by qbs setup-toolchains - Qbs will create a separate profile for every   compiler version.</p> </li> <li> <p>Added support for the HCS08 architecture to SDCC and IAR toolchains (QBS-1631, QBS-1629) as   well as support for the HCS12 architecture to GCC and IAR toolchains (QBS-1630, QBS-1550).</p> </li> <li> <p>Auto-detection of the Keil toolchains has been fixed.</p> </li> </ul>"},{"location":"blog/2021/06/03/qbs-1190-released/#other","title":"Other","text":"<ul> <li>Added support for Android NDK 22.1.7171670.</li> <li>Added support for Xcode 12.5 (QBS-1644).</li> <li>Fixed support for Qt 6.1 (QBS-1636).</li> </ul>"},{"location":"blog/2021/06/03/qbs-1190-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page. Please report issues in our bug tracker. Join our Discord server for live discussions. You can use our mailing list for questions and discussions. The documentation and wiki are also good places to get started. Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org. Qbs 1.19.0 is also included in Qt Creator 4.15.0.</p>"},{"location":"blog/2021/06/03/qbs-1190-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot.</p> <p>Get started with instructions in the Qbs Wiki.</p> <p>Thanks to everybody who made the 1.19.0 release happen:</p> <ul> <li>Andrey Filipenkov</li> <li>Denis Shienkov</li> <li>Christian Kandeler</li> <li>Jan Blackquill</li> <li>Jake Petroules</li> <li>Ivan Komissarov</li> <li>Max Bespalov</li> <li>Mitch Curtis</li> <li>Orgad Shaneh</li> <li>Rapha\u00ebl Cotty</li> <li>Richard Weickelt</li> </ul>"},{"location":"blog/2022/01/11/qbs-121-released/","title":"Qbs 1.21 Released","text":"<p>The Qbs build tool version 1.21.0 is available.</p> <p>Qbs is a community-driven language-agnostic build automation system. It is fast and offers an easy-to-learn language based upon QML.</p>"},{"location":"blog/2022/01/11/qbs-121-released/#whats-new","title":"What's new","text":"<p>About 105 contributions went into this release since version 1.20.0. We have selected a few items below. Have a look into the complete changelog if you are interested in more details.</p>"},{"location":"blog/2022/01/11/qbs-121-released/#named-module-providers","title":"Named Module Providers","text":"<p>We redesigned the module providers feature. Previously, when Qbs encountered a missing module (say, Qt.core), it searched for a provider that can generate that module based on the module name - Qbs consecutively searched for providers named \"Qt.core\", \"Qt\" until it found one. This limited the ways to use providers - ultimately, it was possible to have only one provider for each framework such as Qt or Boost. Thus, we introduced the new qbsModuleProviders property to Product and Project items which allows to specify which providers are run.</p> <p>For example, to invoke the Qt provider explicitly in your product, you can do the following:</p> <pre><code>CppApplication {\n    Depends { name: \"Qt.core\" }\n    files: \"main.cpp\"\n    qbsModuleProviders: [\"Qt\"]\n}\n</code></pre> <p>It is also possible to prioritize modules generated by different module providers (did I mention the new qbspkgconfig provider?) - providers contribute to the qbsSearchPaths in the order specified by the qbsModuleProviders.</p> <p>In the following example, the \"Qt.core\" module can come both from the \"Qt\" provider and the \"qbspkgconfig\" provider, but modules generated by the \"Qt\" provider have higher priority as it comes first in the list. This can be useful when you want to use a custom Qt installation (Qt provider will try to locate qmake in PATH) but also have a fallback for a system Qt provided by pkg-config.</p> <pre><code>CppApplication {\n    Depends { name: \"Qt.core\" }\n    files: \"main.cpp\"\n    qbsModuleProviders: [\"Qt\", \"qbspkgconfig\"]\n}\n</code></pre> <p>We plan to add more providers, such as VCPKG or Conan provider in the future.</p>"},{"location":"blog/2022/01/11/qbs-121-released/#qbspkgconfig-provider","title":"qbspkgconfig provider","text":"<p>Originally, Qbs used to use the \"fallback\" provider based on the pkg-config tool when searhed module was not generated by any other provider. There are several problems with the \"fallback\" provider - it always tries to generate a module using pkg-config, even for non C++ projects such as Java projects; it does not properly support packages that have special characters in their names - such names cannot be the name of a Qbs module (e.g. \"python-3.9\" contains a \".\" which is a qualified-id separator). Also, the \"fallback\" provider invoked the pkg-config tool several times per module due to limitations of the pkg-config CLI, which could lead to bad performance when using multiple packages in a project.</p> <p>So, we added the new qbspkgconfig provider which uses the internal C++ library for reading .pc files. This allows Qbs to have the information about dependencies between pkg-config packages (that info is lost when using the pkg-config tool) and generate modules with respective dependencies. Also, this works much faster as we now avoid expensive forking for the pkg-config process.</p> <p>The new provider and the underlying library mimic the pkg-config tool behavior as much as possible but something might work a bit differently (not always intentional, so feel free to submit bug reports/suggetions).</p>"},{"location":"blog/2022/01/11/qbs-121-released/#general","title":"General","text":"<ul> <li>capnproto and protobuf modules can now use runtime provided by the new qbspkgconfig provider.</li> <li>Qbs no longer migrates the \"profiles/\" dir from earlier Qbs versions (QTCREATORBUG-26475).   Old directories might be cleaned up manually.</li> <li>We fixed a problem on FreeBSD when QBS did not track changes in files correctly due to the fact   it used low-precision file times (with milliseconds excluded). Now Qbs always uses high-precision   file times on all OSes which may not be supported by some older UNIXes - if you are user of such   OS, please report a bug.</li> <li>A new ConanfileProbe.verbose property was added which can be useful to debug problems with   Conan.</li> </ul>"},{"location":"blog/2022/01/11/qbs-121-released/#cc-support","title":"C/C++ Support","text":"<ul> <li>Added support for C++23.</li> <li>Add Elbrus E2K architecture for the GCC toolchain   QBS-1675.</li> </ul>"},{"location":"blog/2022/01/11/qbs-121-released/#android-support","title":"Android Support","text":"<ul> <li>A new Android.ndk.buildId   property was added which   allows to overwrite the default value (sha1) for the --build-id linker flag.</li> </ul>"},{"location":"blog/2022/01/11/qbs-121-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page. Please report issues in our bug tracker. Join our Discord server for live discussions. We are not using IRC anymore. You can use our mailing list for questions and discussions. The documentation and wiki are also good places to get started. Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org. Qbs 1.21.0 is also included in Qt Creator 6.0.0 which was released recently.</p>"},{"location":"blog/2022/01/11/qbs-121-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki. Thanks to everybody who made the 1.21.0 release happen:</p>"},{"location":"blog/2022/01/11/qbs-121-released/#contributors","title":"Contributors","text":"<ul> <li>Christian Kandeler</li> <li>Christian Stenger</li> <li>Davide Pesavento</li> <li>Denis Shienkov</li> <li>Ivan Komissarov</li> <li>Kai Dohmen</li> <li>Orgad Shaneh</li> <li>Rapha\u00ebl Cotty</li> <li>Richard Weickelt</li> <li>Thorbj\u00f8rn Lindeijer</li> </ul>"},{"location":"blog/2022/03/28/qbs-122-released/","title":"Qbs 1.22 Released","text":"<p>The Qbs build tool version 1.22.0 is available.</p> <p>Qbs is a community-driven language-agnostic build automation system. It is fast and offers an easy-to-learn language based upon QML.</p>"},{"location":"blog/2022/03/28/qbs-122-released/#whats-new","title":"What's new","text":"<p>About 82 contributions went into this release since version 1.21.0. We have selected a few items below. Have a look into the complete changelog if you are interested in more details.</p>"},{"location":"blog/2022/03/28/qbs-122-released/#general","title":"General","text":"<ul> <li> <p>A new Host service was introduced, providing information about the host system that used to be available from the qbs module, but did not really belong there. In addition, some more qbs module properties have moved to the FileInfo service.</p> </li> <li> <p>The product variable in Export items now points to the importing product, rather than the exporting one. This change matches the behavior of the product variable in Module items.</p> </li> <li> <p>Probe items are now also available in ModuleProvider items.</p> </li> </ul>"},{"location":"blog/2022/03/28/qbs-122-released/#cc-support","title":"C/C++ Support","text":"<ul> <li>Added support for the Open Watcom toolchain.</li> <li>Reduced unneeded re-linking on Linux by ignoring changes to weak symbols in library   dependencies by default.</li> <li>Adapted to changes in Xcode 13.3 (QBS-1693).</li> </ul>"},{"location":"blog/2022/03/28/qbs-122-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page. Please report issues in our bug tracker. Join our Discord server for live discussions. We are not using IRC anymore. You can use our mailing list for questions and discussions. The documentation and wiki are also good places to get started. Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org. Qbs 1.22.0 is also included in Qt Creator 7.0.0 which was released recently.</p>"},{"location":"blog/2022/03/28/qbs-122-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki. Thanks to everybody who made the 1.22.0 release happen:</p>"},{"location":"blog/2022/03/28/qbs-122-released/#contributors","title":"Contributors","text":"<ul> <li>Christian Kandeler</li> <li>Denis Shienkov</li> <li>Ivan Komissarov</li> <li>Jan Blackquill</li> <li>Leena Miettinen</li> <li>Marius Gripsgard</li> <li>Mitch Curtis</li> <li>Raphael Cotty</li> </ul>"},{"location":"blog/2022/06/20/qbs-123-released/","title":"Qbs 1.23 Released","text":"<p>The Qbs build tool version 1.23.0 is available.</p> <p>Qbs is a community-driven language-agnostic build automation system. It is fast and offers an easy-to-learn language based upon QML.</p>"},{"location":"blog/2022/06/20/qbs-123-released/#whats-new","title":"What's new","text":"<p>About 36 contributions went into this release since version 1.22.0. We have selected a few items below. Have a look into the complete changelog if you are interested in more details.</p>"},{"location":"blog/2022/06/20/qbs-123-released/#cc-support","title":"C/C++ Support","text":"<ul> <li>Added new module Sanitizers.address for simple cross-platform ASan configuration.</li> <li>Added support for c17 and c2x values in cpp.cLanguageVersion.</li> <li>Added support for cpp.cLanguageVersion for the MSVC toolchain.</li> <li>Fix passing linker scripts to iar and keil toolchains (QBS-1704).</li> </ul>"},{"location":"blog/2022/06/20/qbs-123-released/#qt-support","title":"Qt Support","text":"<ul> <li>Adapted to new location of several tools such as qscxmlc and qhelpgenerator in Qt 6.3.</li> </ul>"},{"location":"blog/2022/06/20/qbs-123-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page. Please report issues in our bug tracker. Join our Discord server for live discussions. We are not using IRC anymore. You can use our mailing list for questions and discussions. The documentation and wiki are also good places to get started. Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org. Qbs 1.23.0 is also included in Qt Creator 8.0.0 which was released recently.</p>"},{"location":"blog/2022/06/20/qbs-123-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki. Thanks to everybody who made the 1.23.0 release happen:</p>"},{"location":"blog/2022/06/20/qbs-123-released/#contributors","title":"Contributors","text":"<ul> <li>Christian Kandeler</li> <li>Dmitry Shachnev</li> <li>Ivan Komissarov</li> <li>Max Bespalov</li> <li>Orgad Shaneh</li> </ul>"},{"location":"blog/2023/04/25/qbs-20-released/","title":"Qbs 2.0 released","text":"<p>The Qbs build tool version 2.0.0 is available.</p>"},{"location":"blog/2023/04/25/qbs-20-released/#whats-new","title":"What's new","text":"<p>If this release looks a bit short on features, that's because a lot of work was spent on one rather daunting task, namely:</p>"},{"location":"blog/2023/04/25/qbs-20-released/#new-javascript-backend","title":"New JavaScript backend","text":"<p>When the deprecation of QtScript was announced for Qt 6, we quickly started looking for a light-weight replacement for our JavaScript backend, as the prospect of maintaining QtScript with its complex JavaScriptCore dependency ourselves did not seem particularly appealing. However, none of the candidates offered an API to intercept property accesses, which we absolutely require for performance reasons. That changed when QuickJS came along, so we could finally start porting, and just a couple of ~~days~~ ~~weeks~~ months later we had a functional new backend.</p> <p>From a user's point of view, there should not be any noticeable changes; in particular, the performance appears to be about the same. However, QtScript was rather forgiving about accepting undefined values in contexts where it didn't have to, so the new implementation might uncover some glitches in your projects.</p> <p>As a final point, the magnitude of this change gave us an excuse to bump the major version number, so we did.</p>"},{"location":"blog/2023/04/25/qbs-20-released/#removal-of-qmake-project-files","title":"Removal of qmake project files","text":"<p>With our cmake project files having been feature complete for a while now (not to mention the qbs ones), the qmake project files became mostly a maintenance burden and were removed.</p>"},{"location":"blog/2023/04/25/qbs-20-released/#whats-kinda-new","title":"What's kinda new","text":"<p>Some more relevant changes since our last blog post:</p> <ul> <li>The new Host extension offers information about   the host system. Most of its functions used to be properties of the qbs module, but did not   belong there.</li> <li>The new Sanitizers.address module   provides ASAN support for projects   in a convenient manner.</li> <li>The FileInfo extension has an executableSuffix function now.</li> <li>ModuleProvider items now support Probes.</li> <li>We added support for the OpenWatcom toolchain.</li> <li>Android multi-arch packages are supported again wth Qt &gt;= 6.3.</li> </ul>"},{"location":"blog/2023/04/25/qbs-20-released/#whats-next","title":"What's next","text":"<p>While it's still a couple of months away, we can already say that the 2.1 release will see a long-overdue rewrite of our project resolving code. If you think that's irrelevant to you as a user, you might be surprised by the performance implications. More details in the next blog post.</p>"},{"location":"blog/2023/04/25/qbs-20-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page.</p> <p>Please report issues in our bug tracker.</p> <p>Join our Discord server for live discussions.</p> <p>The documentation and wiki are also good places to get started.</p> <p>Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org.</p> <p>Qbs 2.0.0 is also included in Qt Creator 10.0.0.</p>"},{"location":"blog/2023/04/25/qbs-20-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki.</p> <p>Thanks to everybody who made the 2.0 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> <li>Orgad Shaneh</li> <li>Pino Toscano</li> </ul>"},{"location":"blog/2023/05/11/qbs-201-released/","title":"Qbs 2.0.1 released","text":"<p>The Qbs build tool version 2.0.1 is available.</p>"},{"location":"blog/2023/05/11/qbs-201-released/#whats-new","title":"What's new","text":"<p>This is a minor bugfix release that contains several important fixes such as:</p> <ul> <li>Fixed crash when importing missing JavaScript file   (QBS-1730).</li> <li>Fixed building applications with mingw toolchain and Qt6   (QBS-1724).</li> <li>Added support for Xcode 14.3.</li> <li>Fixed codesigning on macOS (QBS-1722).</li> <li>Fixed detecting Xcode via the xcode-select tool.</li> <li>Partially fixed Qt support on iOS for Qt6 (Qt versions up to 6.3 should work now correctly)   (QBS-1732).</li> <li>Qt is no longer being set up in qbspkgconfig provider when cross compiling   (QBS-1717).</li> </ul> <p>As usual, sources, binaries, change log etc can be found here.</p> <p>This release of qbs is also part of Qt Creator 10.0.1.</p> <p>Also, Qbs binaries are available via different package managers such as Chocolatey, Brew, macports and others.</p> <p>Thanks to everybody who made the 2.0.1 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> </ul>"},{"location":"blog/2023/06/25/qbs-202-released/","title":"Qbs 2.0.2 released","text":"<p>The Qbs build tool version 2.0.2 is available.</p>"},{"location":"blog/2023/06/25/qbs-202-released/#whats-new","title":"What's new","text":"<p>This is a minor bugfix release that contains some fixes such as:</p> <ul> <li>Fixed handling of non-string exceptions   (QBS-1734).</li> <li>Fixed Utilities.versionCompare() for four-segment versions numbers   (QBS-1733). This fixes compiler   feature detection for the clang-cl toolchain.</li> <li>Fixed support for static plugins and Qt &gt;= 6.5 as well as improved handling of .prf files which   provide info about Qt libraries. This fixes build for the iOS platform with the recent Qt   versions (QBS-1732).</li> </ul> <p>Sources, binaries, change log etc can be found here.</p> <p>This release of qbs is also part of Qt Creator 10.0.2.</p> <p>Also, Qbs binaries are available via different package managers such as Chocolatey, Brew, macports and others.</p> <p>Thanks to everybody who made the 2.0.2 release happen:</p>"},{"location":"blog/2023/06/25/qbs-202-released/#contributors","title":"Contributors","text":"<ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> <li>Leon Buckel</li> </ul>"},{"location":"blog/2023/07/27/qbs-210-released/","title":"Qbs 2.1.0 released","text":"<p>The Qbs build tool version 2.1.0 is available.</p>"},{"location":"blog/2023/07/27/qbs-210-released/#whats-new","title":"What's new","text":"<p>Just as the 2.0 release was mostly about the JavaScript back-end switch, this one also features a major rewrite of the implementation, though with more direct impact on users.</p>"},{"location":"blog/2023/07/27/qbs-210-released/#new-project-resolving-implementation","title":"New project resolving implementation","text":"<p>You may have heard that once a new software project turns from proof of concept to actual product, it is considered good practice to throw away the dirty, hacky prototype and implement everything from scratch, using only the most aesthetically pleasing algorithms and code so shiny it almost blinds you.</p> <p>You may also have heard about the real world, with its deadlines, resource constraints and lazy developers, so you might not be surprised to learn that this rewrite did not happen for the first official qbs release.</p> <p>And so the original code was kept, never being given the scrutiny it deserved and having to carry more and more features on its narrow shoulders.</p> <p>\"But why should I care as a user?\", you may ask. That's a fair question, and the answer lies in the somewhat underappreciated relationship between code complexity and performance: The less straightforward the code, the higher the likelihood that it not only contains outright bugs, but also that it will be egregiously inefficient, simply because you cannot spot the performance traps among all the distractions.</p> <p>In fact, it was exactly this performance issue that made us finally take the decision to rewrite the project resolving code from scratch, as it was becoming clear that there was non-linear behavior lurking deep down in some inscrutable recursive code. In case you are wondering: \"Project resolving\" is the phase that turns the textual representation of the qbs files into a build graph, after which the actual building starts.</p> <p>So, what are the results? From a developer's point of view, we now have code that human beings can understand and that won't scare away possible contributors anymore, while users should notice a considerable speed-up when resolving medium-to-large projects. For instance, Qt Creator's qbs project files load about 40% faster now, while for some projects with deep and complex dependencies between modules and/or products we have observed a speed-up of 90% and more. If you felt in the past that your projects were resolving too slowly, chances are that this release will fix that.</p>"},{"location":"blog/2023/07/27/qbs-210-released/#other-changes","title":"Other changes","text":"<p>For the full list of fixes and features in this release, please refer to the change log.</p>"},{"location":"blog/2023/07/27/qbs-210-released/#whats-next","title":"What's next","text":"<p>Another nice feature of the new implementation is that it appears to lend itself to parallelization, which was completely impossible before. We are currently investigating this; if it works out, we might see another considerable speed-up. (Again, this is about project resolving. The actual building is of course already parallelized.)</p>"},{"location":"blog/2023/07/27/qbs-210-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page.</p> <p>Please report issues in our bug tracker.</p> <p>Join our Discord server for live discussions.</p> <p>You can use our mailing list for questions and discussions.</p> <p>The documentation and wiki are also good places to get started.</p> <p>Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org.</p> <p>Qbs 2.1.0 is also included in Qt Creator 11.0.0.</p>"},{"location":"blog/2023/07/27/qbs-210-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki.</p> <p>Thanks to everybody who made the 2.1 release happen:</p> <ul> <li>Andrey Filipenkov</li> <li>Christian Kandeler</li> <li>Denis Shienkov</li> <li>Ivan Komissarov</li> <li>Marc Mutz</li> <li>Raphael Cotty</li> <li>Thiemo van Engelen</li> </ul>"},{"location":"blog/2023/08/03/qbs-211-released/","title":"Qbs 2.1.1 released","text":"<p>The Qbs build tool version 2.1.1 is available.</p>"},{"location":"blog/2023/08/03/qbs-211-released/#whats-new","title":"What's new","text":"<p>This is a minor bugfix release that contains some fixes such as:</p> <ul> <li>Fixed Probe lookup in multiplexed products.</li> <li>Fixed excessively slow module merging in some circumstances.</li> <li>Fixed building QuickJS on x86 systems.</li> </ul> <p>Sources, binaries, change log etc can be found here.</p> <p>This release of qbs is also part of Qt Creator 11.0.1.</p> <p>Also, Qbs binaries are available via different package managers such as Chocolatey, Brew, macports and others.</p>"},{"location":"blog/2023/08/03/qbs-211-released/#contributors","title":"Contributors","text":"<p>Thanks to everybody who made the 2.1.1 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> </ul>"},{"location":"blog/2023/12/16/qbs-22-released/","title":"Qbs 2.2 released","text":"<p>The Qbs build tool version 2.2 is available.</p>"},{"location":"blog/2023/12/16/qbs-22-released/#whats-new","title":"What's new","text":"<p>As already hinted at last time, the main feature in this release is the parallelization of the project resolving phase.</p>"},{"location":"blog/2023/12/16/qbs-22-released/#employing-multiple-cores-for-project-resolving","title":"Employing multiple cores for project resolving","text":"<p>Of course, any build tool compiles the sources you give to it on all the CPUs it can get its hands on, possibly even on remote machines. However, the initial process of translating the on-disk project description into a build graph usually does not lend itself to parallelization as easily. Still, as this step can take a non-trivial amount of time for larger projects, it seemed at least worth a try to parallelize it as well.</p> <p>Our approach was to set up each product (i.e. application, library etc) in a dedicated thread, and we are quite happy with the results, as for larger projects we are seeing an overall speed-up by a factor of two to three across all host platforms. Combined with the considerable speed-up already achieved in the previous version, project resolving is finally no longer a bottleneck when editing project files in IDEs like Qt Creator.</p>"},{"location":"blog/2023/12/16/qbs-22-released/#other-noteworthy-changes","title":"Other noteworthy changes","text":"<ul> <li>Probe execution on macOS has become significantly faster.</li> <li>Modules can now contain Parameters items.</li> <li>ModuleProviders can now contain PropertyOptions items.</li> <li>The on-demand creation of Qt modules now happens only for those modules that the project actually   requests.</li> </ul>"},{"location":"blog/2023/12/16/qbs-22-released/#whats-next","title":"What's next","text":"<p>Having finished our performance improvement endeavor, we are now looking into tooling: If you feel that IDEs such as  Qt Creator do not offer enough convenience functionality for Qbs project files \u2013 say, in the area of code navigation or auto-completion \u2013 then you are not alone. We have some ideas regarding this issue and are currently looking into employing the Language Server Protocol for a client-independent solution.</p>"},{"location":"blog/2023/12/16/qbs-22-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page.</p> <p>Please report issues in our bug tracker.</p> <p>Join our Discord server for live discussions.</p> <p>You can use our mailing list for questions and discussions.</p> <p>The documentation and wiki are also good places to get started.</p> <p>Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org.</p> <p>Qbs 2.2.1 is also included in Qt Creator 12.0.1.</p>"},{"location":"blog/2023/12/16/qbs-22-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki.</p> <p>Thanks to everybody who made the 2.2 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Dmitrii Meshkov</li> <li>Ivan Komissarov</li> <li>Nick Karg</li> <li>Serhii Olendarenko</li> <li>Thiemo van Engelen</li> <li>Thorbj\u00f8rn Lindeijer</li> </ul>"},{"location":"blog/2024/02/07/qbs-222-released/","title":"Qbs 2.2.2 released","text":"<p>The Qbs build tool version 2.2.2 is available.</p>"},{"location":"blog/2024/02/07/qbs-222-released/#whats-new","title":"What's new","text":"<p>This is a minor bugfix release that contains some fixes such as:</p> <ul> <li>Fixed name collision check for multi-part modules   (QBS-1772).</li> <li>Fixed potential assertion when attaching properties on non-present modules   (QBS-1776).</li> <li>Fixed handling assember flags with MSVC (QBS-1774).</li> <li>Fixed the qbspkgconfig Qt provider for the case when there is no Qt   (QBS-1777).</li> <li>Make protobuf usable without qbspkgconfig again   (QBS-1663).</li> <li>Added support for the 'definePrefix' option to qbspkgconfig.</li> </ul> <p>Sources, binaries, change log etc can be found here.</p> <p>This release of qbs is also part of Qt Creator 12.0.2.</p> <p>Also, Qbs binaries are available via different package managers such as Chocolatey, Brew, macports and others.</p>"},{"location":"blog/2024/02/07/qbs-222-released/#contributors","title":"Contributors","text":"<p>Thanks to everybody who made the 2.2.2 release happen:</p> <ul> <li>Bj\u00f6rn Sch\u00e4pers</li> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> </ul>"},{"location":"blog/2024/04/08/qbs-230-released/","title":"Qbs 2.3.0 released","text":"<p>The Qbs build tool version 2.3.0 is available.</p>"},{"location":"blog/2024/04/08/qbs-230-released/#whats-new","title":"What's new","text":"<p>As hinted at last time, the main feature in this release is the use of the new Language Protocol Server for \"go to definition\" in certain contexts and auto-completion.</p>"},{"location":"blog/2024/04/08/qbs-230-released/#language-protocol-server","title":"Language Protocol Server","text":"<p>We have added a Language Protocol Server to Qbs which provides IDE-agnostic tooling (https://microsoft.github.io/language-server-protocol). On top of it, we added the \"go to definition\" feature to QtCreator - it is now possible to open source files from *.qbs files by simply pressing F2. We have also added support for autocompletion of the module properties:</p> <p></p>"},{"location":"blog/2024/04/08/qbs-230-released/#general","title":"General","text":"<p>We have added a possibility to export products to CMake via the new Exporter.cmake module. This allows to use libraries built with Qbs directly with CMake projects without the need to use an intermediate representation in form of the Exporter.pkgconfig.</p> <p>We deprecated the \"fallback\" module provider in favor of the qbspkgconfig provider. In Qbs, module providers generate missing modules during the project configuration (\"resolve\") stage. Historically, we had only Qt and \"fallback\" module providers and there was no way to control which providers are run until we introduced \"named\" module providers in Qbs 1.21. At the same time, we've added the <code>qbspkgconfig</code> provider that reads .pc files directly, avoiding expensive invocations of the <code>pkg-config</code> tool. Since then, we had two almost identical providers that work on top of .pc files. However, the problem with the \"fallback\" provider is that it works differently from other providers as well as suffers performance issues and has the same bugs as the <code>pkg-config</code> tool. Thus, we decided to deprecate the \"fallback\" provider in Qbs 2.3.0 and remove it in Qbs 2.4.0. For details on how to use the <code>qbspkgconfig</code> provider, see the provider page in the documentation. Also, please report any bugs in the <code>qbspkgconfig</code> to the bug tracker.</p> <p>We have added a new Tutorial section in the documentaion to make it easier to grasp core concepts and make users familiar with best practices. Also, we added a new example on how to use Exporter modules.</p> <p>If a project needs to be re-resolved, we now print the reason. Also, we rewrote the wildards handling to track changes more accurately.</p>"},{"location":"blog/2024/04/08/qbs-230-released/#cc-support","title":"C/C++ Support","text":"<p>We fixed an issue with complex project structure that lead to a non-linear algorithm during traversing of the dependencies. Now, private dependencies (dependencies of static libraries) of products are not traversed more than once anymore (QBS-1714).</p>"},{"location":"blog/2024/04/08/qbs-230-released/#language","title":"Language","text":"<ul> <li>Module properties are now accessible for groups in modules   (QBS-1770).</li> <li>The qbspkgconfig.mergeDependencies property was removed. This feature only existed because of   performance limitations which were fixed in Qbs 2.1.0.</li> <li>ModuleProviders now support the   allowedValues   property of the PropertyOptions item (QBS-1748).</li> </ul>"},{"location":"blog/2024/04/08/qbs-230-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page.</p> <p>Please report issues in our bug tracker.</p> <p>Join our Discord server for live discussions.</p> <p>You can use our mailing list for questions and discussions.</p> <p>The documentation and wiki are also good places to get started.</p> <p>Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org.</p> <p>Qbs 2.3.0 is also included in Qt Creator 13.0.0.</p>"},{"location":"blog/2024/04/08/qbs-230-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki.</p> <p>Thanks to everybody who made the 2.3 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Dmitrii Meshkov</li> <li>Ivan Komissarov</li> <li>Raphael Cotty</li> <li>Richard Weickelt</li> </ul>"},{"location":"blog/2024/05/07/qbs-231-released/","title":"Qbs 2.3.1 released","text":"<p>The Qbs build tool version 2.3.1 is available.</p>"},{"location":"blog/2024/05/07/qbs-231-released/#whats-new","title":"What's new","text":"<p>This is a minor bugfix release that contains some fixes such as:</p> <ul> <li>Fixed look-up of qbs properties in module providers via probes   (QBS-1742).</li> <li>Fixed codesign module when multiplexing over build variants   (QBS-1775).</li> <li>Fixed retrieving minimum macOS/iOS versions for Qt 6.7.1 version and above.</li> </ul> <p>Sources, binaries, change log etc can be found here.</p> <p>This release of qbs is also part of Qt Creator 13.0.1.</p> <p>Also, Qbs binaries are available via different package managers such as Chocolatey, Brew, macports and others.</p>"},{"location":"blog/2024/05/07/qbs-231-released/#contributors","title":"Contributors","text":"<p>Thanks to everybody who made the 2.3.1 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> </ul>"},{"location":"blog/2024/07/30/qbs-240-released/","title":"Qbs 2.4.0 released","text":"<p>The Qbs build tool version 2.4.0 is available.</p>"},{"location":"blog/2024/07/30/qbs-240-released/#whats-new","title":"What's new","text":"<p>The main feature in this release is the support for the Conan package manager. We've added the new conan module provider which creates Qbs modules from JSON files generated by Conan.</p>"},{"location":"blog/2024/07/30/qbs-240-released/#conan-module-provider","title":"Conan Module provider","text":"<p>The Conan module provider requires the <code>QbsDeps</code> generator which is present in Conan 2.5.0. For each dependency specified in the <code>conanfile</code>, this generator creates a JSON file with the information required for the conan module provider. This information includes paths to libraries, include directories, build tools, compiler and linker flags. Conan module provider reads those files and converts them to Qbs modules.</p> <p>Condider an example of an application that uses the <code>zlib</code> compression library: <pre><code>CppApplication {\n    Depends { name: \"zlib\" }\n    qbsModuleProviders: \"conan\"\n    consoleApplication: true\n    files: \"main.c\"\n}\n</code></pre></p> <p>In order to install and build an application, we would also need a <code>conanfile.py</code>: <pre><code>from conan import ConanFile\nfrom conan.tools.qbs import Qbs\n\nclass Recipe(ConanFile):\n    name = \"conan-zlib\"\n    version = \"1.0\"\n\n    exports_sources = \"*.c\", \"*.qbs\",\n    settings = \"os\", \"compiler\", \"arch\", \"build_type\"\n    generators = [\"QbsDeps\"]\n\n    def build(self):\n        qbs = Qbs(self)\n        qbs.resolve()\n        qbs.build()\n</code></pre></p> <p>Now we can easily build the application using Conan: <pre><code>$ conan create . --build=missing\n</code></pre></p> <p>Note that the new provider only works with Conan version 2.5.0 and above; for Conan version 1.x please use the ConanfileProbe.</p> <p>For more details on the provider as well as how to use Conan only for installing dependencies, see the provider page in the documentation.</p>"},{"location":"blog/2024/07/30/qbs-240-released/#other-changes","title":"Other changes","text":"<ul> <li>We've added new FlatBuffers modules, for C   and C++ languages. These modules require   runtime dependencies that can be installed using Conan module provider   (QBS-1666).</li> <li>Rules trying to create artifacts outside the build directory is now a hard error   (QBS-1268).</li> <li>More details are now printed when a command times out   (QBS-1750).</li> <li>Updated the bundled quickjs library.</li> <li>The pkg-config based fallback provider was removed. That provider was not flexible enough and   didn't give users control over providers priorities. Also, that provider created files   even for non-present modules which also happens in case of misconfiguration. This was   inconvenient since those files had to be cleaned up manually.</li> <li>It is no longer allowed to attach a QML <code>id</code> to a module item. This feature violated various   preconditions and triggered asserts in debug builds of Qbs. Please update you modules and remove   usages of <code>id</code> property. You can replace it with the raw <code>propertyName</code> in module context, with   <code>parent.propertyName</code> in module sub items, e.g. <code>Probes</code> or with   <code>product.yourModule.propertyName</code> in <code>Rules</code>.</li> </ul>"},{"location":"blog/2024/07/30/qbs-240-released/#whats-next","title":"What's next","text":"<p>Currently, we are working on even better Conan integration - the one thing that is still missing, is the generator that sets up Qbs settings and profiles based on Conan toolhain. Another big feature we are working on, is the support for C++20 modules. All basic cases are already working, but such a huge feature requires some additional changes in Qbs internals. Stay tuned!</p>"},{"location":"blog/2024/07/30/qbs-240-released/#try-it","title":"Try it","text":"<p>Qbs is available for download on the download page.</p> <p>Please report issues in our bug tracker.</p> <p>Join our Discord server for live discussions.</p> <p>You can use our mailing list for questions and discussions.</p> <p>The documentation and wiki are also good places to get started.</p> <p>Qbs is also available from a number of package repositories (Chocolatey, MacPorts, Homebrew) and is updated on each release by the Qbs development team. It can also be installed through the native package management system on a number of Linux distributions. Please find a complete overview on repology.org.</p> <p>Qbs 2.4.0 is also included in Qt Creator 14.0.0.</p>"},{"location":"blog/2024/07/30/qbs-240-released/#contribute","title":"Contribute","text":"<p>If You are a happy user of Qbs, please tell others about it. But maybe you would like to contribute something. Everything that makes Qbs better is highly appreciated. Contributions may consist of reporting bugs or fixing them right away. But also new features are very welcome. Your patches will be automatically sanity-checked, built and verified on Linux, macOS and Windows by our CI bot. Get started with instructions in the Qbs Wiki.</p> <p>Thanks to everybody who made the 2.4 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> <li>Kai Dohmen</li> <li>Raphael Cotty</li> </ul>"},{"location":"blog/2024/08/08/qbs-241-released/","title":"Qbs 2.4.1 released","text":"<p>The Qbs build tool version 2.4.1 is available.</p>"},{"location":"blog/2024/08/08/qbs-241-released/#whats-new","title":"What's new","text":"<p>This is a minor bugfix release that contains some fixes such as:</p> <ul> <li>Fix LibraryProbe to take into account libraries both with and without the \"lib\" prefix. This   fixes the Conan provider for MinGW.</li> <li>Conan module provider no longer sets platform to \"none\" for baremetal toolchains   (QBS-1795).</li> </ul> <p>Sources, binaries, etc can be found here.</p> <p>This release of qbs is also part of Qt Creator 14.0.1.</p> <p>Also, Qbs binaries are available via different package managers such as Chocolatey, Brew, macports and others.</p>"},{"location":"blog/2024/08/08/qbs-241-released/#contributors","title":"Contributors","text":"<p>Thanks to everybody who made the 2.4.1 release happen:</p> <ul> <li>Christian Kandeler</li> <li>Ivan Komissarov</li> </ul>"},{"location":"community/","title":"Community","text":""},{"location":"community/#the-state-of-the-project","title":"The State of the Project","text":"<p>Since The Qt Company stopped working on Qbs, it has been developed by the open-source community. We greatly improved the project since then, added a lot of new features and reworked core parts to boost performance. We hit a major milestone in April 2023, when we released Qbs 2.0. For more details on the State of the Project, see the related blog post.</p>"},{"location":"community/#getting-help-and-submitting-bugs","title":"Getting Help and Submitting Bugs","text":"<p>Please report issues in our bug tracker.</p> <p>Join our  Discord server for live discussions.</p> <p>You can use our mailing list for questions and discussions.</p>"},{"location":"community/#source-repository","title":"Source Repository","text":"<p>The main source code repository is hosted at codereview.qt-project.org.</p> <p>The Qbs source code is also mirrored on code.qt.io and on  GitHub.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>There are several ways to contribute to Qbs.</p> <p>First, try it in your project! If you encounter a bug or want a new feature to be added, report it to the bug tracker, Discord server or mailing list. See docs about how to install Qbs and start using it. The tutorial is also a great place to start.</p> <p>Second, while developing a new functionality in your Project, such as when writing a new Module \u2013 consider making it public on GitHub and marking with a tag qbs-module.</p> <p>Third, you might want to add a new feature yourself. In that case, the Contributing page is a place to start. You can always ask questions about how to implement the new feature in the best way on the  Discord server.</p>"},{"location":"getting-started/","title":"Qbs Manual","text":"<p>Qbs is a tool that helps simplify the build process for developing projects across multiple platforms. Qbs can be used for any software project, regardless of programming language, toolkit, or libraries used.</p> <p>Note</p> <p>Please report bugs and suggestions to the Qt Bug Tracker.</p> <ul> <li>Introduction</li> <li>Setup<ul> <li>Installing</li> <li>Configuring Profiles and Preferences</li> <li>Managing Qt Versions</li> </ul> </li> <li>Usage<ul> <li>Language Introduction</li> <li>Building Applications</li> <li>Running Applications</li> <li>Installing Files</li> <li>Target Platforms</li> <li>Using the Shell</li> <li>Generators</li> <li>Multiplexing</li> <li>Custom Modules and Items</li> <li>Special Property Values</li> <li>Module Providers</li> </ul> </li> <li>How-tos</li> <li>Appendix A: Building Qbs</li> <li>Appendix B: Migrating from Other Build Systems</li> <li>Appendix C: The JSON API</li> <li>Appendix D: Licenses and Code Attributions</li> </ul>"},{"location":"getting-started/How-tos/","title":"How-tos","text":"<p>This page provides concrete instructions for common scenarios.</p> <ul> <li>How do I build a Qt-based project?</li> <li>How do I make my app build against my library?</li> <li>How do I build release with debug information?</li> <li>How do I separate and install debugging symbols?</li> <li>How do I use precompiled headers?</li> <li>How do I make use of rpaths?</li> <li>How do I make sure my generated sources are getting compiled?</li> <li>How do I run my autotests?</li> <li>How do I use ccache?</li> <li>How do I create a module for a third-party library?</li> <li>How do I build against libraries that provide pkg-config files?</li> <li>How do I create application bundles and frameworks on iOS, macOS, tvOS, and watchOS?</li> <li>How do I apply C/C++ preprocessor macros to only a subset of the files in my product?</li> <li>How do I disable a compiler warning?</li> <li>How do I make the state of my Git repository available to my source files?</li> <li>How do I limit the number of concurrent jobs for the linker only?</li> <li>How do I add QML files to a project?</li> <li>How do I define a reusable Group of files that can be included in other Qbs files?</li> <li>How do I access properties of a base type?</li> <li>How do I print the value of a property?</li> <li>How do I debug Qbs scripts?</li> <li>How do I sign an application for an Apple platform?</li> </ul>"},{"location":"getting-started/How-tos/#how-do-i-build-a-qt-based-project","title":"How do I build a Qt-based project?","text":"<p>First of all, your project files need to declare dependencies on Qt modules.</p> <p>To build the project, you need a matching profile. The following commands set up and use a Qt-specific profile:</p> <pre><code>$ qbs setup-qt /usr/bin/qmake qt\n$ cd my_project\n$ qbs profile:qt\n</code></pre> <p>If you plan to use this profile a lot, consider making it the default one:</p> <pre><code>$ qbs config defaultProfile qt\n$ cd my_project\n$ qbs\n</code></pre> <p>See Managing Qt Versions for more details.</p> <p>Note</p> <p>These instructions are only relevant for building from the command line. If you use Qt Creator, profiles are set up automatically from the information in the Kit.</p>"},{"location":"getting-started/How-tos/#how-do-i-make-my-app-build-against-my-library","title":"How do I make my app build against my library?","text":"<p>This is achieved by introducing a dependency between the two products using the Depends item. Here is a simple, but complete example:</p> <pre><code>Project {\n    CppApplication {\n        name : \"the-app\"\n        files : [ \"main.cpp\" ]\n        Depends { name: \"the-lib\" }\n    }\n    DynamicLibrary {\n        name: \"the-lib\"\n        Depends { name: \"cpp\" }\n        files: [\n            \"lib.cpp\",\n            \"lib.h\",\n        ]\n        Export {\n            Depends { name: \"cpp\" }\n            cpp.includePaths: [exportingProduct.sourceDirectory]\n       }\n    }\n}\n</code></pre> <p>The product <code>the-lib</code> is a dynamic library. It expects other products to build against it, and for that purpose, it exports an include path (via an Export item), so that the source files in these products can include the library's header file.</p> <p>The product <code>the-app</code> is an application that expresses its intent to link against <code>the-lib</code> by declaring a dependency on it. Now <code>main.cpp</code> can include <code>lib.h</code> (because of the exported include path) and the application binary will link against the library (because the linker rule in the cpp module considers library dependencies as inputs).</p> <p>Note</p> <p>In a non-trivial project, the two products would not be defined in the same file.   Instead, you would put them into files of their own and use the   Project.references property to pull them into the project.   The product definitions would stay exactly the same. In particular, their location   in the project tree is irrelevant to the relationship between them.</p>"},{"location":"getting-started/How-tos/#choosing-between-dynamic-and-statically-built-qt-projects","title":"Choosing Between Dynamic and Statically-built Qt Projects","text":"<p>To build <code>\"the-lib\"</code> as either a dynamic or static library, depending on how Qt was built, you can use the following code:</p> <pre><code>Product {\n    name: \"the-lib\"\n    type: Qt.core.staticBuild ? \"staticlibrary\" : \"dynamiclibrary\"\n\n    Depends { name: \"Qt.core\" }\n    // ...\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-build-release-with-debug-information","title":"How do I build release with debug information?","text":"<p>You can simply use the <code>\"profiling\"</code> qbs.buildVariant: <pre><code>qbs build qbs.buildVariant:profiling\n</code></pre></p>"},{"location":"getting-started/How-tos/#how-do-i-separate-and-install-debugging-symbols","title":"How do I separate and install debugging symbols?","text":"<p>First, you need to set the cpp.debugInformation and cpp.separateDebugInformation properties to <code>true</code> or use some conditional expression in your product: <pre><code>CppApplication {\n    // ...\n    cpp.debugInformation: qbs.buildVariant !== \"release\"\n    cpp.separateDebugInformation: true\n}\n</code></pre></p> <p>Now, you can install your application, dynamic library or loadable module among with its debugging symbols as follows:</p> <pre><code>CppApplication {\n    // ...\n    install: true\n    installDir: \"bin\"\n    installDebugInformation: true\n    debugInformationInstallDir: \"bin\"\n}\n</code></pre> <p>If you are not using convenience items, you can install debug symbols manually using the Group item. If the cpp.separateDebugInformation property is set to <code>true</code>, Qbs will create debugging symbols with the corresponding file tags <code>\"debuginfo_app\"</code> (for an application), <code>\"debuginfo_dll\"</code> (for a dynamic library), or <code>\"debuginfo_loadablemodule\"</code> (for a macOS plugin).</p> <pre><code>Product {\n    type: \"application\"\n    Depends { name: \"cpp\" }\n    cpp.debugInformation: qbs.buildVariant !== \"release\"\n    cpp.separateDebugInformation: true\n    Group {\n        fileTagsFilter: cpp.separateDebugInformation ? [\"debuginfo_app\"] : []\n        qbs.install: true\n        qbs.installDir: \"bin\"\n        qbs.installSourceBase: buildDirectory\n    }\n}\n</code></pre> <p>If you're building a shared library, you need to use the <code>\"debuginfo_dll\"</code> tag instead:</p> <pre><code>Product {\n    type: \"dynamic_library\"\n    // ...\n    Group {\n        fileTagsFilter: cpp.separateDebugInformation ? [\"debuginfo_dll\"] : []\n        qbs.install: true\n        qbs.installDir: \"lib\"\n        qbs.installSourceBase: buildDirectory\n    }\n}\n</code></pre> <p>If you're building a macOS plugin, you need to use the <code>\"debuginfo_loadablemodule\"</code> tag instead:</p> <pre><code>Product {\n    type: \"loadablemodule\"\n    // ...\n    Group {\n        fileTagsFilter: cpp.separateDebugInformation ? [\"debuginfo_loadablemodule\"] : []\n        qbs.install: true\n        qbs.installDir: \"PlugIns\"\n        qbs.installSourceBase: buildDirectory\n    }\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-use-precompiled-headers","title":"How do I use precompiled headers?","text":"<p>If you use a Group item to add a precompiled header file to a product and mark it with the relevant file tag (<code>c_pch_src</code>, <code>cpp_pch_src</code>, <code>objc_pch_src</code>, or <code>objcpp_pch_src</code>), it is used automatically.</p> <p>Only one precompiled header is allowed per product and language.</p> <p>For example:</p> <pre><code>CppApplication {\n    name: \"the-app\"\n    files: [\"main.cpp\"]\n\n    Group {\n        files: [\"precompiled-header.pch\"]\n        fileTags: [\"cpp_pch_src\"]\n    }\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-make-use-of-rpaths","title":"How do I make use of rpaths?","text":"<p>rpath designates the run-time search path used by the dynamic linker when loading libraries on UNIX platforms. This concept does not apply to Windows.</p> <p>Suppose you have a project with two dynamic library products <code>LibraryA</code> and <code>LibraryB</code> and one dependent application product. Also, <code>LibraryB</code> depends on <code>LibraryA</code>. The application is installed to the <code>bin</code> folder and the libraries are installed to the <code>lib</code> folder next to the <code>bin</code> folder. You want the application to be able to find the dependent libraries relative to its own location. This can be achieved by usage of the cpp.rpaths property.</p> <p>First, you need to set cpp.rpaths in your libraries so they can find dependent libraries in the same folder where they are located. This can be done as follows:</p> <pre><code>DynamicLibrary {\n    Depends { name: \"cpp\" }\n    Depends { name: \"bundle\" }\n    name: \"LibraryA\"\n    bundle.isBundle: false\n    cpp.sonamePrefix: qbs.targetOS.contains(\"macos\") ? \"@rpath\" : undefined\n    cpp.rpaths: cpp.rpathOrigin\n    cpp.cxxLanguageVersion: \"c++11\"\n    cpp.minimumMacosVersion: \"10.8\"\n    files: [\n        \"objecta.cpp\",\n        \"objecta.h\",\n    ]\n    install: true\n    installDir: \"examples/lib\"\n}\n</code></pre> <p>We are setting cpp.rpaths to cpp.rpathOrigin which expands to <code>\"$ORIGIN\"</code> on Linux and to <code>\"@loader_path\"</code> on macOS.</p> <p>On macOS you also need to set cpp.sonamePrefix to <code>\"@rpath\"</code> to tell the dynamic linker to use RPATHs when loading this library.</p> <p><code>LibraryB</code> looks exactly the same:</p> <pre><code>DynamicLibrary {\n    Depends { name: \"cpp\" }\n    Depends { name: \"bundle\" }\n    Depends { name: \"LibraryA\" }\n    name: \"LibraryB\"\n    bundle.isBundle: false\n    cpp.cxxLanguageVersion: \"c++11\"\n    cpp.minimumMacosVersion: \"10.8\"\n    cpp.sonamePrefix: qbs.targetOS.contains(\"macos\") ? \"@rpath\" : undefined\n    cpp.rpaths: cpp.rpathOrigin\n    files: [\n        \"objectb.cpp\",\n        \"objectb.h\",\n    ]\n    install: true\n    installDir: \"examples/lib\"\n}\n</code></pre> <p>In a real project, it might be a good idea to move common properties to some base item and inherit it in library items.</p> <p>The application item is a bit different. It sets cpp.rpaths to the <code>\"lib\"</code> folder which is located one level up from the <code>bin</code> folder:</p> <pre><code>CppApplication {\n    Depends { name: \"bundle\" }\n    Depends { name: \"LibraryA\" }\n    Depends { name: \"LibraryB\" }\n    name: \"rpaths-app\"\n    files: \"main.cpp\"\n    consoleApplication: true\n    bundle.isBundle: false\n    cpp.rpaths: FileInfo.joinPaths(cpp.rpathOrigin, \"..\", \"lib\")\n    cpp.cxxLanguageVersion: \"c++11\"\n    cpp.minimumMacosVersion: \"10.8\"\n    install: true\n    installDir: \"examples/bin\"\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-make-sure-my-generated-sources-are-getting-compiled","title":"How do I make sure my generated sources are getting compiled?","text":"<p>The rules in a Qbs project do not care whether its inputs are actual source files listed on the right-hand side of a files property or artifacts that were generated by another rule. For instance, the C++ compiler rule considers all input files of type \"cpp\", no matter how they got into the product. The following example project demonstrates this. One of its source files exists in the repository, the other one is generated at build time. Both are getting compiled the same way.</p> <p>Note</p> <p>Do not try to add the generated files to a <code>files</code> property. Declaring them as rule outputs is all that is needed to make Qbs know about them.</p> <pre><code>import qbs.TextFile\n\nCppApplication {\n    files: [\"impl.cpp\", \"impl.h\"]\n    cpp.includePaths: sourceDirectory\n    Rule {\n        multiplex: true\n        Artifact { filePath: \"main.cpp\"; fileTags: \"cpp\" }\n        prepare: {\n            var cmd = new JavaScriptCommand();\n            cmd.description = \"generating \" + output.fileName;\n            cmd.sourceCode = function() {\n                var f = new TextFile(output.filePath, TextFile.WriteOnly);\n                f.writeLine(\"#include &lt;impl.h&gt;\");\n                f.writeLine(\"int main()\");\n                f.writeLine(\"{\");\n                f.writeLine(\"    return functionFromImpl();\");\n                f.writeLine(\"}\");\n                f.close();\n            };\n            return cmd;\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-run-my-autotests","title":"How do I run my autotests?","text":"<p>There are two simple things you need to do in your project. Firstly, you mark your test executables as such. This is done by adding the tag <code>\"autotest\"</code> to the product type:</p> <pre><code>CppApplication {\n    name: \"test1\"\n    type: base.concat(\"autotest\")\n    // ...\n}\n</code></pre> <p>The second step is to instantiate an AutotestRunner product in your project:</p> <pre><code>Project {\n    // ...\n    AutotestRunner { name: \"run_my_tests\" }\n}\n</code></pre> <p>Building an AutotestRunner product does not produce artifacts, but triggers execution of all applications whose products are tagged as autotests:</p> <pre><code>$ qbs -p run_my_tests\ntest1: PASS\ntest2: PASS\ntest3: FAIL\n...\n</code></pre> <p>See the AutotestRunner documentation for how to fine-tune the behavior.</p>"},{"location":"getting-started/How-tos/#how-do-i-use-ccache","title":"How do I use ccache?","text":"<p>ccache is a popular C/C++ compiler cache on Unix to speed up compiling the same content multiple times.</p> <p>Qbs excels at tracking dependencies and avoiding needless recompilations, so for linear development of one project and configuration using ccache has little benefit. But if you switch between revisions of a project, or build the same project with different configurations, a global cache like ccache can speed up compilations significantly.</p> <p>ccache can be used by setting up symbolic links to compiler executables (such as <code>g++</code>, <code>gcc</code>) in the file system. In this setup, the use of ccache is transparent to Qbs. If you prefer to call ccache explicitly, you should set cpp.compilerWrapper to <code>ccache</code>.</p> <p>Note</p> <p>Using precompiled headers might prevent ccache from actually using cached results. To work around this, you can set <code>sloppiness=pch_defines,time_macros</code> in your local ccache options. See the ccache documentation about precompiled headers for further details.</p>"},{"location":"getting-started/How-tos/#how-do-i-create-a-module-for-a-third-party-library","title":"How do I create a module for a third-party library?","text":"<p>If you have pre-built binary files in your source tree, you can create modules for them and then introduce dependencies between your project and the modules to pull in the functionality of a third-party library.</p> <p>Create the following folder structure to store the module files:</p> <pre><code>$projectroot/modules/ThirdParty\n</code></pre> <p>Then create a file in the directory that specifies the module properties for each supported toolchain. The filename must have the <code>.qbs</code> extension. The module will be pulled in if a product declares a dependency on it.</p> <p>In the following example, <code>lib1.dylib</code> is a multi-architecture library containing both 32-bit and 64-bit code.</p> ThirdParty.qbs<pre><code>Module {\n    Depends { name: \"cpp\" }\n    cpp.includePaths: [\"/somewhere/include\"]\n    Properties {\n        condition: qbs.targetOS.includes(\"android\")\n        cpp.dynamicLibraries: [\"/somewhere/android/\" + Android.ndk.abi + \"/lib1.so\"]\n    }\n    Properties {\n        condition: qbs.targetOS.includes(\"macos\")\n        cpp.dynamicLibraries: [\"/somewhere/macos/lib1.dylib\"]\n    }\n    Properties {\n        condition: qbs.targetOS.includes(\"windows\") &amp;&amp; qbs.architecture === \"x86\"\n        cpp.dynamicLibraries: [\"/somewhere/windows_x86/lib1.lib\"]\n    }\n    Properties {\n        condition: qbs.targetOS.includes(\"windows\") &amp;&amp; qbs.architecture === \"x86_64\"\n        cpp.dynamicLibraries: [\"/somewhere/windows_x86_64/lib1.lib\"]\n    }\n}\n</code></pre> <p>Finally, declare dependencies on <code>ThirdParty</code> in your project:</p> <pre><code>CppApplication {\n    name: \"the-app\"\n    files: [\"main.cpp\"]\n    Depends { name: \"ThirdParty\" }\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-create-application-bundles-and-frameworks-on-ios-macos-tvos-and-watchos","title":"How do I create application bundles and frameworks on iOS, macOS, tvOS, and watchOS?","text":"<p>Creating an application bundle or framework is achieved by introducing a dependency on the bundle module and setting the bundle.isBundle property to <code>true</code>.</p> <p>Here is a simple example for an application:</p> <pre><code>Application {\n    Depends { name: \"cpp\" }\n    Depends { name: \"bundle\" }\n    bundle.isBundle: true\n    name: \"the-app\"\n    files: [\"main.cpp\"]\n}\n</code></pre> <p>and for a framework:</p> <pre><code>DynamicLibrary {\n    Depends { name: \"cpp\" }\n    Depends { name: \"bundle\" }\n    bundle.isBundle: true\n    name: \"the-lib\"\n    files: [\"lib.cpp\", \"lib.h\"]\n}\n</code></pre> <p>Qbs also supports building static frameworks. You can create one by replacing the DynamicLibrary item with a StaticLibrary item in the example above.</p> <p>Note</p> <p>When using the Application item (or convenience items, such as CppApplication, DynamicLibrary, and StaticLibrary), your products will be built as bundles on Apple platforms by default (this behavior is subject to change in a future release).</p> <p>To explicitly control whether your product is built as a bundle, set the <code>bundle.isBundle</code> property. Setting the consoleApplication property of your product will also influence whether your product is built as a bundle.</p> <p>Building your application against your framework is the same as linking a normal dynamic or static library; see the How do I make my app build against my library? section for an example.</p>"},{"location":"getting-started/How-tos/#how-do-i-build-against-libraries-that-provide-pkg-config-files","title":"How do I build against libraries that provide pkg-config files?","text":"<p>Just add a Depends item that matches the name of the pkg-config module, set the Product::qbsModuleProviders property to <code>\"qbspkgconfig\"</code>, and Qbs will employ pkg-config to find the headers and libraries if no matching Qbs module can be found. For instance, to build against the OpenSSL library, you would write this:</p> <pre><code>qbsModuleProviders: \"qbspkgconfig\"\nDepends { name: \"openssl\" }\n</code></pre> <p>That's it. The pkg-config behavior can be fine-tuned via the qbspkgconfig provider.</p> <p>Internally, this functionality is implemented via Module Providers.</p>"},{"location":"getting-started/How-tos/#how-do-i-apply-cc-preprocessor-macros-to-only-a-subset-of-the-files-in-my-product","title":"How do I apply C/C++ preprocessor macros to only a subset of the files in my product?","text":"<p>Use a Group item to define a subset of project files. To add macros within the group, you need to use the <code>outer.concat</code> property, because you are adding macros to those specified in the outer scope.</p> <p>In the following example, <code>MACRO_EVERYWHERE</code> is defined for all files in the Product unless a Group overrides the macro, whereas <code>MACRO_GROUP</code> is only defined for <code>groupFile.cpp</code>.</p> <pre><code>Product {\n    Depends { name: \"cpp\" }\n    cpp.defines: [\"MACRO_EVERYWHERE\"]  // (1)\n    Group {\n        cpp.defines: outer.concat(\"MACRO_GROUP\")  // (2)\n        files: \"groupFile.cpp\"\n    }\n}\n</code></pre> <ol> <li>Applied for every file in the product.</li> <li>Applied only for <code>groupFile.cpp</code>.</li> </ol> <p>The <code>cpp.defines</code> statements inside a <code>Group</code> only apply to the files in that <code>Group</code>, and therefore you cannot use a <code>Group</code> to include a bunch of files and globally visible macros. The macros must be specified in a Properties item at the same level as the <code>Group</code> if they need to be visible to files outside the <code>Group</code>:</p> <pre><code>Product {\n    Depends { name: \"cpp\" }\n    Group {\n        condition: project.supportMyFeature\n        files: \"myFile.cpp\"\n    }\n\n    property stringList commonDefines: [\"ONE\", \"TWO\"]\n\n    Properties {\n        condition: project.supportMyFeature\n        cpp.defines: commonDefines.concat(\"MYFEATURE_SUPPORTED\")\n    }\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-disable-a-compiler-warning","title":"How do I disable a compiler warning?","text":"<p>You can use the cpp.commonCompilerFlags property to pass flags to the compiler. For example, to disable deprecation warnings:</p> <pre><code>CppApplication {\n    // ...\n\n    readonly property bool isMsvc: qbs.toolchain.includes(\"msvc\")\n\n    cpp.commonCompilerFlags: isMsvc ? \"/wd4996\" : \"-Wno-deprecated-declarations\"\n}\n</code></pre> <p>It is also possible to disable all warnings at once by setting the cpp.warningLevel property to <code>\"none\"</code>. Usually this approach is discouraged, but it can be useful in some cases, such as when compiling third party code:</p> <pre><code>Group {\n    cpp.warningLevel: \"none\"\n\n    files: [\n        \"3rdparty.h\",\n        \"3rdparty.cpp\"\n    ]\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-make-the-state-of-my-git-repository-available-to-my-source-files","title":"How do I make the state of my Git repository available to my source files?","text":"<p>Add a dependency to the vcs module to your product: <pre><code>CppApplication {\n    // ...\n    Depends { name: \"vcs\" }\n    // ...\n}\n</code></pre> Your source files will now have access to a macro whose value is a string representing the current Git or Subversion HEAD: <pre><code>#include &lt;vcs-repo-state.h&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    std::cout &lt;&lt; \"I was built from \" &lt;&lt; VCS_REPO_STATE &lt;&lt; std::endl;\n}\n</code></pre></p> <p>This value is also available via the vcs.repoState property.</p>"},{"location":"getting-started/How-tos/#how-do-i-limit-the-number-of-concurrent-jobs-for-the-linker-only","title":"How do I limit the number of concurrent jobs for the linker only?","text":"<p>While it is usually desirable to run as many compiler jobs as there are CPU cores, the same is not true for linker jobs. The reason is that linkers are typically I/O bound rather than CPU bound. When building large libraries, they also tend to use up enormous amounts of memory. Therefore, we'd like to make sure that only a few linkers are running at the same time without limiting other types of jobs. In Qbs, this is achieved via job pools. There are several ways to make use of them.</p> <p>Firstly, you can provide a limit via the command line:</p> <pre><code>$ qbs --job-limits linker:4\n</code></pre> <p>The above call instructs Qbs to run at most four linker instances at the same time, while leaving the general number of concurrent jobs at the default value, which is derived from the number of CPU cores. The <code>linker</code> string on the command line refers to the job pool of the same name, which the cpp module assigns to all its commands that invoke a linker.</p> <p>Secondly, you can set a limit via the settings, either generally or for a specific profile:</p> <pre><code>$ qbs config preferences.jobLimit.linker 4\n$ qbs config profiles.myprofile.preferences.jobLimit.linker 2\n</code></pre> <p>And finally, you can also set the limit per project or per product, using a JobLimit item:</p> <pre><code>Product {\n    name: \"my_huge_library\"\n    JobLimit {\n        jobPool: \"linker\"\n        jobCount: 1\n    }\n    // ...\n}\n</code></pre> <p>The above construct ensures that this specific library is never linked at the same time as any other binary in the project.</p> <p>Job limits set on the command line override those from the settings, which in turn override the ones defined within a project. Use the <code>--enforce-project-job-limits</code> option to give the job limits defined via <code>JobLimit</code> items maximum precedence.</p>"},{"location":"getting-started/How-tos/#how-do-i-add-qml-files-to-a-project","title":"How do I add QML files to a project?","text":"<p>The simplest way to add QML files to a project is to add them to a Qt resource file:</p> <pre><code>QtGuiApplication {\n    // ...\n\n    files: \"main.cpp\"\n\n    Group {\n        prefix: \"qml/\"\n        files: [\"main.qml\", \"HomePage.qml\"]\n        fileTags: [\"qt.qml.qml\", \"qt.core.resource_data\"]\n    }\n}\n</code></pre> <p>In the example above, we declare each QML file as having the \"qt.core.resource_data\" file tag. This ensures that it is added to a generated resource file.</p>"},{"location":"getting-started/How-tos/#how-do-i-define-a-reusable-group-of-files-that-can-be-included-in-other-qbs-files","title":"How do I define a reusable Group of files that can be included in other Qbs files?","text":"<p>Suppose you have an application and tests for that application, and that the project is structured in the following way:</p> <pre><code>\u251c\u2500\u2500 app\n\u2502   \u251c\u2500\u2500 app.qbs\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 qml\n\u2502       \u2514\u2500\u2500 ui\n\u2502           \u251c\u2500\u2500 AboutPopup.qml\n\u2502           \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 my-project.qbs\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 tst_app.cpp\n    \u251c\u2500\u2500 ...\n    \u2514\u2500\u2500 tests.qbs\n</code></pre> <p>Both projects need access to the QML files used by the application. To demonstrate how this can be done, we'll create a file named <code>qml-ui.qbs</code> and put it in the <code>app/qml/ui</code> directory:</p> <pre><code>Group {\n    prefix: path + \"/\"\n    fileTags: [\"qt.qml.qml\", \"qt.core.resource_data\"]\n    files: [\n        \"AboutPopup.qml\",\n        // ...\n    ]\n}\n</code></pre> <p>This Group is a variation of the one in the section above.</p> <p>If no prefix is specified, the file names listed in the <code>files</code> property are resolved relative to the importing product's (e.g. <code>app.qbs</code>) directory. For that reason, we set the prefix to inform Qbs that the file names should be resolved relative to the imported item instead: <code>qml-ui.qbs</code>. Conveniently, this also means that we don't need to specify the path prefix for each file.</p> <p>The application can then import the file like so:</p> <pre><code>import \"qml/ui/qml-ui.qbs\" as QmlUiFiles\n\nQtGuiApplication {\n    // ...\n\n    files: \"main.cpp\"\n\n    QmlUiFiles {}\n}\n</code></pre> <p>The tests can use a relative path to import the file:</p> <pre><code>import \"../app/qml/ui/qml-ui.qbs\" as QmlUiFiles\n\nQtGuiApplication {\n    // ...\n\n    files: \"tst_app.cpp\"\n\n    QmlUiFiles {}\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-access-properties-of-a-base-type","title":"How do I access properties of a base type?","text":"<p>You can use the base property. For example, to append to a list of files that come from the base type, you can use <code>base.concat()</code>:</p> <pre><code>// TestBase.qbs\n\nQtGuiApplication {\n    files: [\n        \"TestCaseBase.h\",\n        \"TestCaseBase.cpp\"\n    ]\n}\n</code></pre> <pre><code>// tst_stuff.qbs\nTestBase {\n    files: base.concat([\"tst_stuff.cpp\"])\n}\n</code></pre> <p>See Special Property Values for more details.</p>"},{"location":"getting-started/How-tos/#how-do-i-print-the-value-of-a-property","title":"How do I print the value of a property?","text":"<p>Use the console API. For example, suppose your project is not built the way you expect it to be, and you suspect that <code>qbs.targetOS</code> has the wrong value:</p> <pre><code>readonly property bool unix: qbs.targetOS.includes(\"unix\")\n</code></pre> <p>To find out the value of <code>qbs.targetOS</code>, use <code>console.info()</code>:</p> <pre><code>readonly property bool unix: {\n    console.info(\"qbs.targetOS: \" + qbs.targetOS)\n    return qbs.targetOS.includes(\"unix\")\n}\n</code></pre> <p>It is also possible to throw an exception with the text saying what is wrong - this might be useful if the property contains invalid or unsupported value:</p> <pre><code>readonly property bool unix: {\n    if (qbs.targetOS.includes(\"darwin\"))\n        throw \"Apple platforms are not supported\";\n    return qbs.targetOS.includes(\"unix\")\n}\n</code></pre>"},{"location":"getting-started/How-tos/#how-do-i-debug-qbs-scripts","title":"How do I debug Qbs scripts?","text":"<p>To debug the value of a specific property, see the How do I print the value of a property section.</p> <p>Similar debugging techniques could be used within Rules or <code>.js</code> files.</p> <p>It is also possible to increase Qbs' logging level using the <code>--more-verbose</code> (<code>-v</code>) option of the <code>qbs build</code> command:</p> <pre><code>qbs build -v config:release\n</code></pre> <p>Qbs uses the Qt Categorized Logging system which allows to configure logging categories in multiple ways. For example, to enable debug logging for the <code>moduleloader</code> category, use the following command: <pre><code>QT_LOGGING_RULES=\"qbs.moduleloader.debug=true\" qbs resolve\n</code></pre></p> <p>To list all the files in the project directory and show whether they are known to qbs in the respective configuration, use the <code>qbs status</code> command: <pre><code>qbs status config:release\n</code></pre></p>"},{"location":"getting-started/How-tos/#how-do-i-sign-an-application-for-an-apple-platform","title":"How do I sign an application for an Apple platform?","text":"<p>To sign an application for an Apple platform, you need to use the codesign module.</p> <pre><code>Depends { name: \"codesign\" }\n</code></pre> <p>Several properties should be set to do signing as shown below.</p> <p>Make sure that bundle and team indentifiers match the one used for signing:</p> <pre><code>bundle.identifierPrefix: \"com.johndoe\"\ncodesign.teamIdentifier: \"John Doe\"\n</code></pre> <p>It is also possible to use an ID of the team identifier instead of a name:</p> <pre><code>codesign.teamIdentifier: \"1234ABCDEF\"\n</code></pre> <p>Qbs will then try to find the matching signing identity and provisioning profile based on codesign.signingType.</p> <p>It is also possible to specify codesign.signingIdentity manually:</p> <pre><code>codesign.signingIdentity: \"Apple Development: johndoe@apple.com (ABCDEF1234)\"\n</code></pre> <p>It is also possible to use an ID of the signing identity instead of a name: <pre><code>codesign.signingIdentity: \"ABCDEF1234567890ABCDEF1234567890ABCDEF12\"\n</code></pre></p> <p>If Qbs cannot find the suitable provisioning profile, you can specify it manually as well: <pre><code>codesign.provisioningProfile: \"abcdef12-1234-5678-1111-abcdef123456\"\n</code></pre></p>"},{"location":"getting-started/Introduction/","title":"Introduction","text":"<p>Qbs is a build automation tool designed to conveniently manage the build process of software projects across multiple platforms.</p>"},{"location":"getting-started/Introduction/#features","title":"Features","text":"<p>Qbs provides the following benefits:</p> <ul> <li>Declarative paradigm</li> <li>Well-defined language</li> <li>Platform and programming language independence</li> <li>Correct and fast incremental builds</li> <li>Extensible architecture</li> <li>Easy integration to IDEs</li> </ul>"},{"location":"getting-started/Introduction/#declarative-paradigm","title":"Declarative Paradigm","text":"<p>When writing a project, it is important to describe the build tasks and dependencies between them, rather than the build order. It is difficult to determine the correct build order in complex projects, especially during parallel builds. The build tool should bear that burden, not the developer.</p> <p>With a declarative language, Qbs enables you to express intent rather than specifying single build steps. This provides the appropriate level of abstraction for a build system. For example, dependencies can be created between products, such that the target artifacts of the dependency can be used as input to the build rules in the context of the depending product. In addition, you can export dependencies and properties to other products.</p> <p>Qbs is modular with clean interfaces between modules. A module is a collection of properties and language items that are used for building a product if the product depends on the module. The properties that can be set for a module are used to control the behavior of the toolchain used to build the module.</p> <p>Qbs itself knows nothing about file types or extensions, and therefore all source files in a product are handled equally. However, you can assign file tags to an artifact to act as markers or to specify a file type. Qbs applies a rule to the source files of the project and chooses the ones that match the input file tags specified by the rule. It then creates artifacts in the build graph that have other filenames and file tags.</p> <p>Products and projects can contain probes that are run prior to building, for instance to locate dependent headers, libraries, and other files outside the project directory.</p>"},{"location":"getting-started/Introduction/#well-defined-language","title":"Well-Defined Language","text":"<p>Qbs projects are specified in a QML dialect. QML is a concise, easy to learn, and intuitive language that is used successfully in the Qt project. Its core is declarative, but it can be extended with JavaScript snippets for extra flexibility.</p> <p>Qbs builds applications based on the information in a project file. Each project file specifies one project that can contain several products. You specify the type of the product, such as an application, and the dependencies the product has on other products.</p> <p>The product type determines the set of rules that Qbs applies to produce artifacts from input files. The input files can be divided into groups according to their type or purpose, for example. A group can also be used to attach properties to products.</p> <p>The following is an example of a minimal project file that specifies the product type, application name, source file, and a dependency on the cpp module:</p> <pre><code>Application {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n    Depends { name: \"cpp\" }\n}\n</code></pre> <p>For more information, see Language Introduction.</p>"},{"location":"getting-started/Introduction/#platform-and-programming-language-independence","title":"Platform and Programming Language Independence","text":"<p>Qbs can be used for any software project, regardless of programming language, toolkit, or libraries used. Qbs has built-in support for building applications for Windows, Linux, macOS, Android, iOS, tvOS, watchOS, QNX, and FreeBSD, as well as for cross-compilation. It can be easily extended to support further platforms.</p> <p>Invoking qbs build from the command line automatically builds the project for the current host platform using the best available toolchain and settings, unless a default profile is set. You can configure additional profiles for each toolchain you want to use and select the profile to use at build time.</p> <p>For example, to build applications for Android devices, you would need to set up a profile for the Android toolchain and select it when you build the application. If you name the profile Android, you would then enter the following command:</p> <pre><code>qbs build profile:Android\n</code></pre> <p>For more information, see Building Applications.</p> <p>Platform and programming language support is implemented as a set of modules that your product depends on. In the language example above, the dependency on the cpp module determines that the C++ sources are compiled and linked into a binary.</p> <p>Alternatively, you could use the CppApplication convenience item that implies a dependency on the cpp module:</p> <pre><code>CppApplication {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n}\n</code></pre> <p>Additionally, if the sources use Qt, you need a dependency to the Qt.core module, and so on.</p> <p>In addition to building projects, Qbs can install the build artifacts to a location from where they can be run on the desktop or on a device. Qbs modules can be used to create installers for the end users of the applications. For example, the dmg module contains properties and rules for building Apple Disk Images, which are typically used to distribute applications and installers on macOS. The innosetup, nsis, and wix modules contain properties and rules for building installers for Windows platforms.</p>"},{"location":"getting-started/Introduction/#correct-and-fast-incremental-builds","title":"Correct and Fast Incremental Builds","text":"<p>Qbs is an all-in-one tool that generates a build graph from a high-level project description (like qmake or CMake) and additionally undertakes the task of executing the commands in the low-level build graph (like make).</p> <p>Qbs automatically takes advantage of multi-processor and multi-core systems to achieve maximum build parallelization. By default, running <code>qbs</code> without any arguments is roughly equivalent to running <code>make -j&lt;n&gt;</code> where <code>n</code> is the number of CPU cores. Similarly, Qbs allows the number of concurrent jobs to be explicitly specified using its own <code>-j</code> option.</p> <p>Qbs has knowledge about the whole project, and therefore builds remain correct even when you build sub-projects, because Qbs ensures that all dependencies are built too. This virtually eliminates the need for clean builds.</p> <p>Qbs uses dynamic build graphs with build rules that can generate a variable number of files and that are executed only when needed. When figuring out which rules to execute, Qbs starts at the product type and then looks for a way to produce artifacts with matching file tags from source files, using a chain of rules that are connected by their respective input and output tags. For an example of how rules are applied when building products, see Rules and Product Types.</p> <p>The Qbs build rules can produce a variable number of outputs. If the input changes, only the required rules are applied at build time. If a rule is applied, all the dependent rules are applied as well, but only those. This feature ensures the correctness of the build graph after source code changes without having to re-configure the whole project.</p> <p>Changing properties that do not affect the build, because they are not used by rules, will not cause the project to be rebuilt. The use of properties is tracked. Generated artifacts that cease to exist are deleted to avoid picking outdated generated artifacts and indefinitely increasing the size of the build directory.</p> <p>Fast incremental builds are crucial for a fast edit-build-run cycle. Instead of retrieving the timestamps of generated files, Qbs uses the time stamps stored in the build graph. This is especially important on Windows, where file system operations are slow.</p> <p>If the project files were not changed, the build graph is loaded from disk. It is stored in a binary format that can be loaded much faster than the real project files. The project files are parsed only if they were changed.</p>"},{"location":"getting-started/Introduction/#extensible-architecture","title":"Extensible Architecture","text":"<p>You can create your own custom modules and items and make Qbs aware of them.</p> <p>You store the custom modules and items in a subdirectory of the project directory and specify the path to the subdirectory as a value of the qbsSearchPaths property. For example, if the custom module is located at <code>my-modules/modules/modulename/modulename.qbs</code>, you would specify it in the project file as follows:</p> <pre><code>Project {\n    qbsSearchPaths: \"my-modules\"\n</code></pre> <p>For more information, see Custom Modules and Items.</p>"},{"location":"getting-started/Introduction/#ide-integration","title":"IDE Integration","text":"<p>Qbs can be used not only from the command line, but also in combination with an IDE, such as Qt Creator or Visual Studio Code. These IDEs directly support Qbs projects using the new Qbs session feature. Thus, these IDEs can retrieve all the information required to build a single file or project through a session's JSON protocol API.</p> <p>In addition, Qbs can generate projects for Visual Studio, IAR EW, and Keil uVision, but it still is an experimental option. For more information, see Generators.</p>"},{"location":"getting-started/Introduction/#qt-creator","title":"Qt Creator","text":"<p>Qt Creator provides accurate information about the build progress and displays a project tree that reflects the logical structure of the project, instead of presenting low-level information, such as the file system structure. Adding or removing source files keeps the existing project file structure intact.</p> <p>For more information about using Qbs to build projects from Qt Creator, see Setting Up Qbs.</p>"},{"location":"getting-started/Introduction/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code provides the qbs-community plugin that provides accurate information about the build progress and displays a project tree that reflects the logical structure of the project. Also, it can provide low-level information, such as the file system structure.</p> <p>For more information about using Qbs to build projects from Visual Studio Code, see How To.</p>"},{"location":"getting-started/Introduction/#build-process","title":"Build Process","text":"<p>The build process of a product starts by examining the type property of the product. It contains a list of file tags that are similar to MIME types.</p> <p>The following example product contains one file tag, application:</p> <pre><code>Product {\n    Depends { name: \"cpp\" }\n    type: [\"application\"]\n    files: [\"main.cpp\", \"class.cpp\", \"class.h\"]\n}\n</code></pre> <p>Qbs then searches through all rules available in the context, meaning rules that are defined in the project or those that are made available through the dependency on a module, such as the compiler and linker rules pulled in from the <code>cpp</code> dependency in the example.</p> <p>When Qbs finds a rule that produces one or more artifacts with the relevant file tag, it looks at the depencencies of that rule and finds out that it produces artifacts tagged <code>obj</code>. It then finds a rule that produces <code>obj</code> artifacts that takes <code>.cpp</code> artifacts as input.</p> <pre><code>Module {\n    // ...\n    Rule {\n        inputs: [\"cpp\"]\n        Artifact {\n            filePath: input.fileName + \".o\"\n            fileTags: [\"obj\"]\n        }\n        prepare: {\n            // g++ -c main.cpp -o main.o ...\n        }\n    }\n    //...\n}\n</code></pre> <p>There is no rule in the current context that produces <code>.cpp</code> files, but we have defined <code>.cpp</code> files as inputs for the product. When we added a dependency on the cpp module, that dependency also pulled in another Qbs primitive called the file tagger. The file tagger looked for files matching the pattern <code>*.cpp</code>, and then applied the <code>cpp</code> tag to those input files:</p> <pre><code>Module {\n    // ...\n    FileTagger {\n        patterns: \"*.cpp\"\n        fileTags: [\"cpp\"]\n    }\n    //...\n}\n</code></pre> <p>Since the <code>.cpp</code> files are input files, they by definition have no other dependencies, and we can go back the opposite way in the tree starting with the compiler rule described above.</p> <p>This design works well for generated files. The <code>.cpp</code> artifacts could come from another rule that produced them by processing some other input, either instead of or in addition to the raw files listed in the product.</p> <p>The compiler rule will be invoked twice, once for each <code>.cpp</code> file, producing a separate object file for each one. Then the linker rule will be invoked. Its <code>multiplex</code> property is set to <code>true</code>, which means that instead of producing one output per input and invoking the rule multiple times, all input will be collected before invoking the rule only once to produce the final application object.</p> <p>The standard versus multiplex rules map well to the compiler and linker processes. The compiler takes one input file to produce one output file, whereas the linker takes multiple input files to produce one output file.</p> <p>Finally, after the linker rule has been invoked, it produces an artifact tagged <code>application</code>. Because the product's type property did not contain other file tags, the build process is now complete.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/","title":"Appendix A: Building Qbs","text":"<p>Qbs can be installed from binary packages or built from sources, as described in this appendix. In addition, this appendix describes how to use Docker images for developing Qbs.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#supported-platforms","title":"Supported Platforms","text":"<p>Qbs can be installed and run on the following platforms:</p> <ul> <li>Windows 7, or later</li> <li>Linux (tested on Debian 8 and 9, Ubuntu 16.04, OpenSuSE 13.2, and         Arch Linux)</li> <li>macOS 10.7, or later</li> </ul>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#system-requirements","title":"System Requirements","text":"<p>To build Qbs from the source, you need:</p> <ul> <li>Qt 5.15, or later</li> <li>Windows: MinGW with GCC 4.9 or Microsoft Visual Studio 2015,         or later</li> <li>Linux: GCC 4.9, or later, or Clang 3.9.0, or later</li> <li>macOS: Xcode 6.2, or later</li> </ul> <p>An installed toolchain has to match the one that Qt was compiled with.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#documentation","title":"Documentation","text":"<p>Building the Qbs documentation requires Python 2.7 or 3.2 or above, as well as some third party Python modules. These can be installed via <code>pip</code>:</p> <pre><code>pip install beautifulsoup4 lxml\n</code></pre> <p>Regenerating the man page requires the <code>help2man</code> tool.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#building-qbs-with-make","title":"Building Qbs with \u0421Make","text":"<p>To build Qbs, enter the following commands:</p> <pre><code>mkdir build &amp;&amp; cd build\ncmake -DQt5_DIR=${QT_DIR}/lib/cmake/Qt5/ ..\nmake\n</code></pre> <p>Where <code>${QT_DIR}</code> is the directory where Qt is installed. Passing the <code>Qt5_DIR</code> option is not necessary if <code>qmake</code> is present in <code>PATH</code>.</p> <p>Depending on your platform, you might use <code>mingw32-make</code>, <code>nmake</code>, or <code>jom</code> instead of <code>make</code>.</p> <p>Alternatively, you can use the Ninja generator: <pre><code>cmake -GNinja -DQt5_DIR=${QT_DIR}/lib/cmake/Qt5/ ..\nninja\n</code></pre></p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#cmake-configure-options","title":"CMake Configure Options","text":"<p>Qbs recognizes the following CMake options (passed to CMake in the form of <code>-DOPTION=value</code>) to customize the build:</p> Option Notes Default value <code>WITH_TESTS</code> Enable autotests. <code>ON</code> <code>WITH_UNIT_TESTS</code> Enable additional autotests. <code>OFF</code> <code>INSTALL_PUBLIC_HEADERS</code> Whether to install public headers. <code>ON</code>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#using-ccache-with-cmake","title":"Using ccache with CMake","text":"<p>To enable using ccache when building Qbs, pass the following options to CMake: <pre><code>cmake -DQt5_DIR=${QT_DIR}/lib/cmake/Qt5/ -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ..\n</code></pre></p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#building-qbs-with-qmake","title":"Building Qbs with QMake","text":"<p>To build Qbs, enter the following command:</p> <pre><code>qmake -r qbs.pro &amp;&amp; make\n</code></pre> <p>Depending on your platform, you might use <code>mingw32-make</code>, <code>nmake</code>, or <code>jom</code> instead of <code>make</code>.</p> <p>Installation by using <code>make install</code> is usually not needed. It is however possible, by entering the following command.</p> <pre><code>make install INSTALL_ROOT=$INSTALL_DIRECTORY\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#qmake-configure-options","title":"QMake Configure Options","text":"<p>Qbs recognizes the following qmake CONFIG options to customize the build:</p> Option Notes <code>qbs_enable_unit_tests</code> Enable additional autotests. <code>qbs_disable_rpath</code> Disable the use of rpath. This can be used when packaging Qbs for distributions which do not permit the use of rpath, such as Fedora. <code>qbs_no_dev_install</code> Exclude header files from installation, that is, perform a  non-developer build. <code>qbs_no_man_install</code> Exclude the man page from installation. <p>In addition, you can set the <code>QBS_SYSTEM_SETTINGS_DIR</code> environment variable before running qmake to specify a custom location for Qbs to look for its system-level settings.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#building-qbs-with-qbs","title":"Building Qbs with Qbs","text":"<p>It is also possible to build Qbs with the previously installed Qbs version. To build Qbs, enter the following command in the source directory: <pre><code>qbs\n</code></pre> This will use the <code>defaultProfile</code> or pick up the Qt version and the toolchain from the <code>PATH</code> if the <code>defaultProfile</code> is not set. See Configuring Profiles and Preferences for details about profiles.</p> <p>To run automatic tests, the <code>autotest-runner</code> product should be built: <pre><code>qbs build -p autotest-runner\n</code></pre> Qbs will use an empty profile when running tests which means it will try to autodetect toolchains, Qt versions and other things based on the system environment. It is possible to specify which profile should be used during the test-run by passing the <code>QBS_AUTOTEST_PROFILE</code> environment variable. This variable should be set prior to building Qbs itself; otherwise the <code>resolve</code> command should be used to update the environment stored in the buildgraph: <pre><code>export QBS_AUTOTEST_PROFILE=qt\nqbs resolve\nqbs build -p autotest-runner\n</code></pre></p> <p>It is also possible to set up a separate profile for a particular testsuite. A profile for the <code>tst_blackbox_android</code> suite can be set up as follows: <pre><code>qbs setup-android pie\nexport QBS_AUTOTEST_PROFILE_BLACKBOX_ANDROID=pie\n</code></pre></p> <p>It might be useful to set up the directory with the Qbs settings to isolate the test environment: <pre><code>export QBS_AUTOTEST_SETTINGS_DIR=~/path/to/qbs/settings\n</code></pre></p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#qbs-build-options","title":"Qbs Build Options","text":"<p>The <code>qbsbuildconfig</code> module can be used to customize the build. Properties of that module can be passed using command line as follows: <pre><code>qbs build modules.qbsbuildconfig.enableAddressSanitizer:true\n</code></pre></p> <p>Qbs recognizes the following properties:</p> Property Default value Notes <code>enableAddressSanitizer</code> <code>false</code> Whether to use address sanitizer or not. Enabling this option will add the <code>-fsanitize=address</code> flag. <code>enableUnitTests</code> <code>false</code> Enable additional autotests. Enabling this option will export some symbols that would otherwise be private. <code>enableRPath</code> <code>true</code> Use this property to disable the use of rpath. This can be used when packaging Qbs for distributions which do not permit the use of rpath, such as Fedora. <code>installApiHeaders</code> <code>true</code> Holds whether to install the header files for the Qbs libraries or not. This option is required to build against the Qbs libraries. <code>enableBundledQt</code> <code>false</code> Holds whether the Qt libraries that Qbs depends on will be bundled with Qbs during the <code>install</code> step. This option is only implemented on macOS. <code>libDirName</code> <code>\"lib\"</code> Directory name used by <code>libInstallDir</code> and <code>importLibInstallDir</code> properties. <code>appInstallDir</code> <code>\"bin\"</code> Relative directory path under the install prefix path to put application binaries. <code>libInstallDir</code> <code>\"bin\"</code> on Windows, <code>libDirName</code> otherwise Relative directory path under the install prefix path where to put shared libraries (excluding plugins, see the <code>relativePluginsPath</code> property). <code>importLibInstallDir</code> <code>libDirName</code> Relative directory path under the install prefix path where to put import libs. <code>libexecInstallDir</code> <code>appInstallDir</code> on Windows, <code>\"libexec/qbs\"</code> otherwise Relative directory path under the install prefix path where to put auxiliary binaries executed by the Qbs libraries. <code>systemSettingsDir</code> <code>undefined</code> Directory that will be used by Qbs to store its settings. If not specified, a default platform-dependent directory is used. <code>installManPage</code> <code>true</code> on Unix, <code>false</code> otherwise Whether to install man pages. <code>installHtml</code> <code>true</code> Whether to install HTML help pages. <code>installQch</code> <code>false</code> Whether to install qch files. See The Qt Help Framework for details about qch files. <code>generatePkgConfigFiles</code> auto-detected Whether to generate files for pkg-config. <code>generateQbsModules</code> auto-detected Whether to generate Qbs modules for the exported Qbs libraries. Use this when building another product against Qbs libraries using Qbs as build system. <code>docInstallDir</code> <code>\"share/doc/qbs/html\"</code> Relative directory path under the install prefix path where to put documentation. <code>pkgConfigInstallDir</code> <code>libDirName</code> + <code>\"/pkgconfig\"</code> Relative directory path under the install prefix path where to put pkg-config files. <code>qbsModulesBaseDir</code> <code>libDirName</code> + <code>\"/qbs/modules\"</code> Relative directory path under the install prefix path where to put Qbs modules. Applies only when <code>generateQbsModules</code> is <code>true</code>. <code>relativeLibexecPath</code> <code>\"../\"</code> + <code>libexecInstallDir</code> Path to the auxiliary binaries relative to the application binary. <code>relativePluginsPath</code> <code>\"../\"</code> + <code>libDirName</code> Path to plugin libraries relative to the application binary. <code>relativeSearchPath</code> <code>\"..\"</code> Relative path to the directory where to look for Qbs development modules and items. <code>libRPaths</code> auto-detected List of rpaths. <code>resourcesInstallDir</code> <code>\"\"</code> Relative directory path under the install prefix path where to put shared resources  like documentation, Qbs user modules and items. <code>pluginsInstallDir</code> <code>libDirName</code> + <code>\"/qbs/plugins\"</code> Relative path to the directory where to put plugins to."},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#using-docker","title":"Using Docker","text":"<p>A set of Docker images for developing Qbs (which are maintained by the Qbs team) is available on Docker Hub. Both Windows 10 and Debian Linux container types are available.</p> <p>Note</p> <p>The source code for the Qbs development Docker images is located in the <code>docker/</code> directory of the Qbs source tree, if you wish to build them yourself.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#linux-containers","title":"Linux Containers","text":"<p>The easiest way to get started is to build Qbs using a Linux container. These types of containers are supported out of the box on all the supported host platforms: Windows, macOS, and Linux.</p> <p>The images provide everything that is necessary to build and test Qbs:</p> <ul> <li>Qt SDK for building Qbs with <code>qmake</code></li> <li>Latest stable release of Qbs for building Qbs with Qbs</li> </ul> <p>We are using docker-compose for building and running the Docker images because it simplifies the Docker command line and ensures that the correct image tag is used. All available images are listed in the <code>docker-compose.yml</code> file in the project root directory.</p> <p>Run the following command to download the Qbs development image based on Ubuntu 20.04 Focal:</p> <pre><code>docker-compose pull focal\n</code></pre> <p>You can then create a new container with the Qbs source directory mounted from your host machine's file system, by running:</p> <pre><code>docker-compose run --rm focal\n</code></pre> <p>You will now be in an interactive Linux shell where you can develop and build Qbs.</p>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#windows-containers","title":"Windows Containers","text":"<p>To build Qbs for Windows using Windows containers, your host OS must be running Windows 10 Pro and have Hyper-V enabled. Switch your Docker environment to use Windows containers.</p> <p>We are using docker-compose for building and running the Docker images because it simplifies the Docker command line and ensures that the correct image tag is used. All available images are listed in the <code>docker-compose.yml</code> file in the project root directory.</p> <p>Run the following command to download the Qbs development image based on Windows 10:</p> <pre><code>docker-compose pull windows\n</code></pre> <p>You can then create a new container with the Qbs source directory mounted from your host machine's file system, by running:</p> <pre><code>docker-compose run --rm windows\n</code></pre> <p>If you want to use Windows containers on a macOS or Linux host, you will have to create a virtual machine running Windows 10 and register it with <code>docker-machine</code>. There is at least one Open Source project that helps to facilitate this by using using Packer, Vagrant, and VirtualBox.</p> <p>The <code>docker run</code> command to spawn a Windows container on a Unix host will look slightly different (assuming <code>windows</code> is the name of the Docker machine associated with the Windows container hosting VM):</p> <pre><code>eval $(docker-machine env windows)\ndocker-compose run --rm windows\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20A.%20Building%20Qbs/#building-release-packages","title":"Building Release Packages","text":"<p>Release packages for Qbs for Windows can be built using the following command on Windows:</p> <pre><code>docker-compose run --rm windows cmd /c scripts\\make-release-archives\n</code></pre> <p>For building release packages for Windows on macOS or Linux:</p> <pre><code>eval $(docker-machine env windows)\ndocker-compose run --rm windows cmd /c scripts\\\\make-release-archives\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/","title":"Appendix B: Migrating from Other Build Systems","text":"<p>You can use the qbs create-project command to automatically generate Qbs project files from an arbitrary directory structure. This is a useful starting point when migrating from other build tools, such as qmake or CMake.</p> <p>To use the tool, switch to the project directory and run the <code>qbs create-project</code> command, which is located in the <code>bin</code> directory of the Qbs installation directory (or the Qt Creator installation directory).</p> <p>After generating the initial <code>.qbs</code> file, add the missing configuration variables and functions to it, as described in the following sections.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#migrating-from-qmake","title":"Migrating from qmake","text":"<p>The following sections describe the Qbs equivalents of qmake variable values.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#config","title":"<code>CONFIG</code>","text":"<p>Specify project configuration and compiler options.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#console","title":"<code>console</code>","text":"<p>Set the Product.consoleApplication property to <code>true</code> for the Application, CppApplication,or QtApplication item. For example:</p> <pre><code>Application {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n    Depends { name: \"cpp\" }\n    consoleApplication: true\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#ordered","title":"<code>ordered</code>","text":"<p>This qmake variable has no direct equivalent in Qbs. Instead, the build order is determined by implicit and explicit dependencies between products. To add an explicit dependency, add a Depends item to a product:</p> <pre><code>CppApplication {\n    name: \"myapp\"\n    Depends { name: \"mylib\" }\n}\n</code></pre> <p>The <code>myapp</code> product depends on and links to the <code>mylib</code> product, and is therefore built after it.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qt","title":"<code>qt</code>","text":"<p>In qmake, the Qt dependency is implicit, whereas in Qbs it is not. If <code>CONFIG -= qt</code>, add a Depends item to specify that the product depends on the cpp module:</p> <pre><code>Product {\n    Depends { name: \"cpp\" }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#defines","title":"<code>DEFINES</code>","text":"<p>Set the cpp.defines property for the product.</p> <p>Note</p> <p>To reference <code>cpp.defines</code>, you must specify a dependency on the cpp module.</p> <pre><code>Product {\n    Depends { name: \"cpp\" }\n    cpp.defines: [\"SUPPORT_MY_FEATURES\"]\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#destdir","title":"<code>DESTDIR</code>","text":"<p>We recommend that you use the installation mechanism to specify the location of the target file:</p> <pre><code>Application {\n    Group {\n        name: \"Runtime resources\"\n        files: \"*.qml\"\n        qbs.install: true\n        qbs.installDir: \"share/myproject\"\n    }\n    Group {\n        name: \"The App itself\"\n        fileTagsFilter: \"application\"\n        qbs.install: true\n        qbs.installDir: \"bin\"\n    }\n}\n</code></pre> <p>If that is not possible, you can use the destinationDirectory property:</p> <pre><code>DynamicLibrary {\n    name: \"mydll\"\n    destinationDirectory: \"libDir\"\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#headers-sources-forms-resources-other_files","title":"<code>HEADERS</code>, <code>SOURCES</code>, <code>FORMS</code>, <code>RESOURCES</code>, <code>OTHER_FILES</code>","text":"<p>Include header, source, form, and resource files as well as any other files as values of a Product.files or Group.files  property:</p> <pre><code>QtApplication {\n    name: \"myapp\"\n    files: [\"myapp.h\", \"myapp.cpp\", \"myapp.ui\", \"myapp.qrc\", \"readme.txt\"]\n}\n</code></pre> <p>Qbs uses file taggers to figure out what kind of file it is dealing with.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#icon","title":"<code>ICON</code>","text":"<p>There is no direct equivalent in Qbs. If you add a dependency to the ib module and add the <code>.xcassets</code> directory as a value of the Product.files property, Qbs takes care of setting the application icon automatically when building for Apple platforms:</p> <pre><code>Application {\n    name: \"myapp\"\n    files [\".xcassets\"]\n    Depends { name: \"ib\" }\n}\n</code></pre> <p>Alternatively, you can set the icon name as the value of the bundle.infoPlist parameter, specify a dependency to the ib module, and add the application <code>.icns</code> file as a value of the files property:</p> <pre><code>Application {\n    name: \"myapp\"\n    files [\"myapp.icns\"]\n    Depends { name: \"ib\" }\n    bundle.infoPlist: ({\"CFBundleIconFile\": \"myapp\"})\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#includepath","title":"<code>INCLUDEPATH</code>","text":"<p>Add the paths to the include files as values of the cpp.includePaths property:</p> <pre><code>CppApplication {\n    cpp.includePaths: [\"..\", \"some/other/dir\"]\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#libs","title":"<code>LIBS</code>","text":"<p>For libraries that are part of the project, use Depends items.</p> <p>To pull in external libraries, use the cpp.libraryPaths property for the Unix <code>-L</code> (library path) flags and the cpp.dynamicLibraries and cpp.staticLibraries properties for the <code>-l</code> (library) flags.</p> <p>For example, <code>LIBS += -L/usr/local/lib -lm</code> would become:</p> <pre><code>CppApplication {\n    cpp.libraryPaths: [\"/usr/local/lib\"]\n    cpp.dynamicLibraries: [\"m\"]\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#out_pwd","title":"<code>OUT_PWD</code>","text":"<p>Use the Product.buildDirectory property to refer to the base output directory of the generated artifacts.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#pwd","title":"<code>PWD</code>","text":"<p>Corresponds to the the file-scope variable <code>path</code>.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#_pro_file_","title":"<code>_PRO_FILE_</code>","text":"<p>Corresponds to the file-scope variable <code>filePath</code> when used in a project or product.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#_pro_file_pwd_","title":"<code>_PRO_FILE_PWD_</code>","text":"<p>Corresponds to the Project.sourceDirectory or Product.sourceDirectory property.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_asset_catalogs","title":"<code>QMAKE_ASSET_CATALOGS</code>","text":"<p>Add a dependency to the ib module and add the <code>.xcassets</code> directory as a value of the files property:</p> <pre><code>Application {\n    name: \"myapp\"\n    files [\".xcassets\"]\n    Depends { name: \"ib\" }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_bundle_data","title":"<code>QMAKE_BUNDLE_DATA</code>","text":"<p>For the time being, you can manually place files in the appropriate location using the installation mechanism. Better solutions are under development.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_bundle_extension","title":"<code>QMAKE_BUNDLE_EXTENSION</code>","text":"<p>Set the bundle.extension property.</p> <p>Note</p> <p>Unlike qmake, Qbs automatically prepends a period (.) to the property value.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_ccxxobjective_cflags_debug_release","title":"<code>QMAKE_{C,CXX,OBJECTIVE}_CFLAGS{_DEBUG,_RELEASE}</code>","text":"<p>Use the cpp.commonCompilerFlags property or the properties corresponding to each compiler flags variable:</p> qmake Variable cpp Module Property <code>QMAKE_CFLAGS_DEBUG</code><code>QMAKE_CFLAGS_RELEASE</code> cpp.cFlags <code>QMAKE_CXXFLAGS_DEBUG</code><code>QMAKE_CXXFLAGS_RELEASE</code> cpp.cxxFlags <code>QMAKE_OBJECTIVE_CFLAGS</code> cpp.objcFlagscpp.objcxxFlags <p>Use Properties items or simple conditionals as values of the qbs.buildVariant property to simulate the <code>_DEBUG</code> and <code>_RELEASE</code> variants of the qmake variables.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_framework_bundle_name","title":"<code>QMAKE_FRAMEWORK_BUNDLE_NAME</code>","text":"<p>Set the bundle.bundleName property (which is derived from Product.targetName) combined with bundle.extension.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_framework_version","title":"<code>QMAKE_FRAMEWORK_VERSION</code>","text":"<p>Set the bundle.frameworkVersion property.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_info_plist","title":"<code>QMAKE_INFO_PLIST</code>","text":"<p>Include the <code>info.plist</code> file as a value of files property and specify a dependency to the bundle module:</p> <pre><code>Application {\n    name: \"myapp\"\n    files [\"info.plist\"]\n    Depends { name: \"bundle\" }\n}\n</code></pre> <p>Qbs will automatically add any necessary properties to your <code>Info.plist</code> file. Typically, it determines the appropriate values from the other properties in the project, and therefore you do not need to use the <code>Info.plist.in</code> \u2192 <code>Info.plist</code> configuration mechanism. Further, you almost never need to embed placeholders into the source <code>Info.plist</code> file. Set the bundle.processInfoPlist property to <code>false</code> to disable this behavior:</p> <pre><code>\\\\ ...\nbundle.processInfoPlist: false\n</code></pre> <p>In addition to, or instead of, using an actual <code>Info.plist</code> file, you can add <code>Info.plist</code> properties using the bundle.infoPlist property. For example:</p> <pre><code>\\\\ ...\nbundle.infoPlist: ({\n    \"NSHumanReadableCopyright\": \"Copyright (c) 2017 Bob Inc\",\n    \"Some other key\", \"Some other value, &amp; XML special characters are no problem! &gt;;) \u975e\u51e1!\"\n})\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_lflags","title":"<code>QMAKE_LFLAGS</code>","text":"<p>Set the cpp.linkerFlags property for the product.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_macosxiostvoswatchos_deployment_target","title":"<code>QMAKE_{MACOSX,IOS,TVOS,WATCHOS}_DEPLOYMENT_TARGET</code>","text":"<p>For each qmake deployment target variable, use the corresponding property of the cpp module:</p> qmake Variable cpp Module Property <code>QMAKE_MACOSX_DEPLOYMENT_TARGET</code> cpp.minimumMacosVersion <code>QMAKE_IOS_DEPLOYMENT_TARGET</code> cpp.minimumIosVersion <code>QMAKE_TVOS_DEPLOYMENT_TARGET</code> cpp.minimumTvosVersion <code>QMAKE_WATCHOS_DEPLOYMENT_TARGET</code> cpp.minimumWatchosVersion"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_rpathdir","title":"<code>QMAKE_RPATHDIR</code>","text":"<p>Set the cpp.rpaths property for the product.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qmake_soname_prefix","title":"<code>QMAKE_SONAME_PREFIX</code>","text":"<p>Use the cpp.sonamePrefix property for the product.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qml_import_path","title":"<code>QML_IMPORT_PATH</code>","text":"<p>Used only for Qt Creator QML syntax highlighting. Inside a Product, Application, CppApplication, or QtApplication, create a <code>qmlImportPaths</code> property:</p> <pre><code>Product {\n    name: \"myProduct\"\n    property stringList qmlImportPaths: [sourceDirectory + \"/path/to/qml/\"]\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qt_1","title":"<code>QT</code>","text":"<p>Add a Depends item to the product that specifies the dependencies to Qt modules. For example:</p> <pre><code>QtApplication {\n    Depends { name: \"Qt.widgets\" }\n}\n</code></pre> <p>You could also use the following form that is equivalent to the previous one:</p> <pre><code>QtApplication {\n    Depends { name: \"Qt\"; submodules: \"widgets\" }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#qtplugin","title":"<code>QTPLUGIN</code>","text":"<p>Building static applications often requires linking to static QPA plugins, such as <code>qminimal</code>. You can use the following syntax to enable Qbs to link to the required plugins:</p> <pre><code>QtApplication {\n    name: \"myapp\"\n    Depends { name: \"Qt\"; submodules: [\"core\", \"gui\", \"widgets\"] }\n    Depends { name: \"Qt.qminimal\"; condition: Qt.core.staticBuild }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#rc_file","title":"<code>RC_FILE</code>","text":"<p>Add Windows resource files to the value of the Product.files property.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#target","title":"<code>TARGET</code>","text":"<p>Use the Product.targetName property to specify the base file name of target artifacts.</p>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#template","title":"<code>TEMPLATE</code>","text":""},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#app","title":"<code>app</code>","text":"<p>Use Application or CppApplication as the product:</p> <pre><code>CppApplication {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n}\n</code></pre> <p>This is roughly equivalent to:</p> <pre><code>Product {\n    name: \"helloworld\"\n    type: \"application\"\n    files: \"main.cpp\"\n    Depends { name: \"cpp\" }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#lib","title":"<code>lib</code>","text":"<p>Use either DynamicLibrary or StaticLibrary as the product, depending on whether the value of <code>CONFIG</code> in the <code>.pro</code> file is <code>shared</code> or <code>static</code>. For example, if the value is <code>shared</code>:</p> <pre><code>DynamicLibrary {\n    name: \"mydll\"\n    files: [\"mySourceFile.cpp\"]\n    Depends { name: \"cpp\" }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#subdirs","title":"<code>subdirs</code>","text":"<p>In a Project item, specify subdirectories as values of the references property:</p> <pre><code>Project {\n    references: [\n        \"app/app.qbs\",\n        \"lib/lib.qbs\"\n    ]\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20B.%20Migrating%20from%20Other%20Build%20Systems/#message-warning-error-log","title":"<code>message()</code>, <code>warning()</code>, <code>error()</code>, <code>log()</code>","text":"<p>You can use the Console API to print info, warning, error, and log messages to the console.</p> <pre><code>Product {\n    name: {\n        console.info(\"--&gt; now evaluating the product name\");\n        return \"theName\";\n    }\n    Depends { name: \"cpp\" }\n    cpp.includePath: { throw \"An error occurred.\" }\n}\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/","title":"Appendix C: The JSON API","text":"<p>This API is the recommended way to provide Qbs support to an IDE. It is accessible via the session command.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#packet-format","title":"Packet Format","text":"<p>All information is exchanged via packets, which have the following structure:</p> <pre><code>packet = \"qbsmsg:\" &lt;payload length&gt; [&lt;meta data&gt;] &lt;line feed&gt; &lt;payload&gt;\n</code></pre> <p>First comes a fixed string indentifying the start of a packet, followed by the size of the actual data in bytes. After that, further meta data might follow. There is none currently, but future extensions might add some. A line feed character marks the end of the meta data section and is followed immediately by the payload, which is a single JSON object encoded in Base64 format. We call this object a message.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#messages","title":"Messages","text":"<p>The message data is UTF8-encoded.</p> <p>Most messages are either requests or replies. Requests are messages sent to Qbs via the session's standard input channel. Replies are messages sent by Qbs via the session's standard output channel. A reply always corresponds to one specific request. Every request (with the exception of the quit request) expects exactly one reply. A reply implies that the requested operation has finished. At the very least, it carries information about whether the operation succeeded, and often contains additional data specific to the respective request.</p> <p>Every message object has a <code>type</code> property, which is a string that uniquely identifies the message type.</p> <p>All requests block the session for other requests, including those of the same type. For instance, if client code wishes to restart building the project with different parameters, it first has to send a cancel request, wait for the current build job's reply, and only then can it request another build. The only other message beside cancel that can legally be sent while a request is currently being handled is the quit message.</p> <p>A reply object may carry an <code>error</code> property, indicating that the respective operation has failed. If this property is not present, the request was successful. The format of the <code>error</code> property is described here.</p> <p>In the remainder of this page, we describe the structure of all messages that can be sent to and received from Qbs, respectively. The property tables may have a column titled Mandatory, whose values indicate whether the respective message property is always present. If this column is missing, all properties of the respective message are mandatory, unless otherwise noted.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-hello-message","title":"The <code>hello</code> Message","text":"<p>This message is sent by Qbs exactly once, right after the session was started. It is the only message from Qbs that is not a response to a request. The value of the <code>type</code> property is <code>\"hello\"</code>, the other properties are as follows:</p> Property Type api-level int api-compat-level int lsp-socket string <p>The value of <code>api-level</code> is increased whenever the API is extended, for instance by adding new messages or properties.</p> <p>The value of <code>api-compat-level</code> is increased whenever incompatible changes are being done to this API. A tool written for API level <code>n</code> should refuse to work with a Qbs version with an API compatibility level greater than <code>n</code>, because it cannot guarantee proper behavior. This value will not change unless it is absolutely necessary.</p> <p>The value of <code>api-compat-level</code> is always less than or equal to the value of <code>api-level</code>.</p> <p>The value of <code>lsp-socket</code> is a path to a local domain socket (on Unix) or a named pipe (on Windows). It provides a server implementing the Language Server Protocol.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#resolving-a-project","title":"Resolving a Project","text":"<p>To instruct Qbs to load a project from disk, a request of type <code>resolve-project</code> is sent. The other properties are:</p> Property Type Mandatory build-root FilePath yes configuration-name string no data-mode DataMode no deprecation-warning-mode string no dry-run bool no environment Environment no error-handling-mode string no force-probe-execution bool no log-time bool no log-level LogLevel no max-job-count int no module-properties list of strings no overridden-properties object no project-file-path FilePath if resolving from scratch restore-behavior string no settings-directory string no top-level-profile string no wait-lock-build-graph bool no <p>The <code>environment</code> property defines the environment to be used for resolving the project, as well as for all subsequent Qbs operations on this project.</p> <p>The <code>error-handling-mode</code> specifies how Qbs should deal with issues in project files, such as assigning to an unknown property. The possible values are <code>\"strict\"</code> and <code>\"relaxed\"</code>. In strict mode, Qbs will immediately abort and set the reply's <code>error</code> property accordingly. In relaxed mode, Qbs will continue to resolve the project if possible. A warning message will be emitted for every error that was encountered, and the reply's <code>error</code> property will not be set. The default error handling mode is <code>\"strict\"</code>.</p> <p>If the <code>log-time</code> property is <code>true</code>, then Qbs will emit log-data messages containing information about which part of the operation took how much time.</p> <p>The <code>module-properties</code> property lists the names of the module properties which should be contained in the product data that will be sent in the reply message. For instance, if the project to be resolved is C++-based and the client code is interested in which C++ version the code uses, then <code>module-properties</code> would contain <code>\"cpp.cxxLanguageVersion\"</code>. Properties that have the value <code>undefined</code> will not be sent.</p> <p>The <code>overridden-properties</code> property is used to override the values of module, product or project properties. The possible ways to specify keys are described here.</p> <p>The <code>restore-behavior</code> property specifies if and how to make use of an existing build graph. The value <code>\"restore-only\"</code> indicates that a build graph should be loaded from disk and used as-is. In this mode, it is an error if the build graph file does not exist. The value <code>\"resolve-only\"</code> indicates that the project should be resolved from scratch and that an existing build graph should be ignored. In this mode, it is an error if the <code>\"project-file-path\"</code> property is not present. The default value is <code>\"restore-and-track-changes\"</code>, which uses an existing build graph if possible and re-resolves the project if no build graph was found or if the parameters are different from the ones used when the project was last resolved.</p> <p>The <code>top-level-profile</code> property specifies which Qbs profile to use for resolving the project. It corresponds to the <code>profile</code> key when using the resolve command.</p> <p>All other properties correspond to command line options of the resolve command, and their semantics are described there.</p> <p>When the project has been resolved, Qbs will reply with a <code>project-resolved</code> message. The possible properties are:</p> Property Type Mandatory error ErrorInfo no project-data TopLevelProjectData no <p>The <code>error-info</code> property is present if and only if the operation failed. The <code>project-data</code> property is present if and only if the conditions stated by the request's <code>data-mode</code> property are fulfilled.</p> <p>All other project-related requests need a resolved project to operate on. If there is none, they will fail.</p> <p>There is at most one resolved project per session. If client code wants to open several projects or one project in different configurations, it needs to start additional sessions.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#building-a-project","title":"Building a Project","text":"<p>To build a project, a request of type <code>build-project</code> is sent. The other properties, none of which are mandatory, are listed below:</p> Property Type active-file-tags string list changed-files FilePath list check-outputs bool check-timestamps bool clean-install-root bool data-mode DataMode dry-run bool command-echo-mode string enforce-project-job-limits bool files-to-consider FilePath list install bool job-limits list of objects keep-going bool log-level LogLevel log-time bool max-job-count int module-properties list of strings products list of strings or <code>\"all\"</code> <p>All boolean properties except <code>install</code> default to <code>false</code>.</p> <p>The <code>active-file-tags</code> and <code>files-to-consider</code> are used to limit the build to certain output tags and/or source files. For instance, if only C/C++ object files should get built, then <code>active-file-tags</code> would be set to <code>\"obj\"</code>.</p> <p>The objects in a <code>job-limits</code> array consist of a string property <code>pool</code> and an int property <code>limit</code>.</p> <p>If the <code>log-time</code> property is <code>true</code>, then Qbs will emit log-data messages containing information about which part of the operation took how much time.</p> <p>If <code>products</code> is an array, the elements must correspond to the <code>full-display-name</code> property of previously retrieved ProductData, and only these products will get built. If <code>products</code> is the string <code>\"all\"</code>, then all products in the project will get built. If <code>products</code> is not present, then products whose builtByDefault property is <code>false</code> will be skipped.</p> <p>The <code>module-properties</code> property has the same meaning as in the resolve-project request.</p> <p>All other properties correspond to options of the build command.</p> <p>When the build has finished, Qbs will reply with a <code>project-built</code> message. The possible properties are:</p> Property Type Mandatory error ErrorInfo no project-data TopLevelProjectData no <p>The <code>error-info</code> property is present if and only if the operation failed. The <code>project-data</code> property is present if and only if the conditions stated by the request's <code>data-mode</code> property are fulfilled.</p> <p>Unless the <code>command-echo-mode</code> value is <code>\"silent\"</code>, a message of type <code>command-description</code> is emitted for every command to be executed. It consists of two string properties <code>highlight</code> and <code>message</code>, where <code>message</code> is the message to present to the user and <code>highlight</code> is a hint on how to display the message. It corresponds to the Command property of the same name.</p> <p>For finished process commands, a message of type <code>process-result</code> might be emitted. The other properties are:</p> Property Type arguments list of strings error string executable-file-path FilePath exit-code int stderr list of strings stdout list of strings success bool working-directory FilePath <p>The <code>error</code> string is one of <code>\"failed-to-start\"</code>, <code>\"crashed\"</code>, <code>\"timed-out\"</code>, <code>\"write-error\"</code>, <code>\"read-error\"</code> and <code>\"unknown-error\"</code>. Its value is not meaningful unless <code>success</code> is <code>false</code>.</p> <p>The <code>stdout</code> and <code>stderr</code> properties describe the process's standard output and standard error output, respectively, split into lines.</p> <p>The <code>success</code> property is <code>true</code> if the process finished without errors and an exit code of zero.</p> <p>The other properties describe the exact command that was executed.</p> <p>This message is only emitted if the process failed or it has printed data to one of the output channels.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#cleaning-a-project","title":"Cleaning a Project","text":"<p>To remove a project's build artifacts, a request of type <code>clean-project</code> is sent. The other properties are:</p> Property Type dry-run bool keep-going bool log-level LogLevel log-time bool products list of strings <p>The elements of the <code>products</code> array correspond to a <code>full-display-name</code> of a ProductData. If this property is present, only the respective products' artifacts are removed.</p> <p>If the <code>log-time</code> property is <code>true</code>, then Qbs will emit log-data messages containing information about which part of the operation took how much time.</p> <p>All other properties correspond to options of the clean command.</p> <p>None of these properties are mandatory.</p> <p>After all artifacts have been removed, Qbs replies with a <code>project-cleaned</code> message. If the operation was successful, this message has no properties. Otherwise, a property <code>error</code> of type ErrorInfo indicates what went wrong.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#installing-a-project","title":"Installing a Project","text":"<p>Installing is normally part of the build process. To do it in a separate step, the <code>install</code> property is set to <code>false</code> when building and a dedicated <code>install-project</code> message is sent. The other properties are:</p> Property Type clean-install-root bool dry-run bool install-root FilePath keep-going bool log-level LogLevel log-time bool products list of strings use-sysroot bool <p>The elements of the <code>products</code> array correspond to a <code>full-display-name</code> of a ProductData. If this property is present, only the respective products' artifacts are installed.</p> <p>If the <code>log-time</code> property is <code>true</code>, then Qbs will emit log-data messages containing information about which part of the operation took how much time.</p> <p>If the <code>use-sysroot</code> property is <code>true</code> and <code>install-root</code> is not present, then the install root will be qbs.sysroot.</p> <p>All other properties correspond to options of the install command.</p> <p>None of these properties are mandatory.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#canceling-an-operation","title":"Canceling an Operation","text":"<p>Potentially long-running operations can be aborted using the <code>cancel-job</code> request. This message does not have any properties. There is no dedicated reply message; instead, the usual reply for the request associated with the currently running operation will be sent, with the <code>error</code> property set to indicate that it was canceled.</p> <p>If there is no operation in progress, this request will have no effect. In particular, if it arrives after the operation that it was supposed to cancel has already finished (i.e. there is a race condition), the reply received by client code will not contain a cancellation-related error.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#adding-removing-and-renaming-source-files","title":"Adding, Removing and Renaming Source Files","text":"<p>Source files can be added to, removed from and renamed in Qbs project files with the <code>add-files</code>, <code>remove-files</code> and <code>rename-files</code> messages, respectively. These two requests have the same set of properties:</p> Property Type files see below group string product string <p>The <code>files</code> property specifies which files should be added, removed or renamed. For the <code>add-files</code> and <code>remove-files</code> messages, this is a <code>FilePath</code> list. For the <code>rename-files</code> message, this is a list of objects with two properties <code>source-path</code> and <code>target-path</code>, each of which is a <code>FilePath</code>.</p> <p>The <code>product</code> property corresponds to the <code>full-display-name</code> of a ProductData and specifies to which product to apply the operation.</p> <p>The <code>group</code> property corresponds to the <code>name</code> of a GroupData and specifies to which group in the product to apply the operation.</p> <p>After the operation has finished, Qbs replies with a <code>files-added</code>, <code>files-removed</code> and <code>files-renamed</code> message, respectively. Again, the properties are the same:</p> Property Type Mandatory error ErrorInfo no failed-files FilePath list no <p>If the <code>error</code> property is present, the operation has at least partially failed and <code>failed-files</code> will list the files that could not be added or removed.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-get-run-environment-message","title":"The <code>get-run-environment</code> Message","text":"<p>This request retrieves the full run environment for a specific executable product, taking into account the setupRunEnvironment scripts of all modules pulled in by the product. The properties are as follows:</p> Property Type Mandatory base-environment Environment no config list of strings no product string yes <p>The <code>base-environment</code> property defines the environment into which the Qbs-specific values should be merged.</p> <p>The <code>config</code> property corresponds to the --setup-run-env-config option of the run command.</p> <p>The <code>product</code> property specifies the product whose environment to retrieve. The value must correspond to the <code>full-display-name</code> of some ProductData in the project.</p> <p>Qbs will reply with a <code>run-environment</code> message. In case of failure, it will contain a property <code>error</code> of type ErrorInfo, otherwise it will contain a property <code>full-environment</code> of type Environment.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-get-generated-files-for-sources-message","title":"The <code>get-generated-files-for-sources</code> Message","text":"<p>This request allows client code to retrieve information about which artifacts are generated from a given source file. Its sole property is a list <code>products</code>, whose elements are objects with the two properties <code>full-display-name</code> and <code>requests</code>. The first identifies the product to which the requests apply, and it must match the property of the same name in a ProductData in the project. The latter is a list of objects with the following properties:</p> Property Type Mandatory source-file FilePath yes tags list of strings no recursive bool no <p>The <code>source-file</code> property specifies a source file in the respective product.</p> <p>The <code>tags</code> property constrains the possible file tags of the generated files to be matched. This is relevant if a source files serves as input to more than one rule or the rule generates more than one type of output.</p> <p>If the <code>recursive</code> property is <code>true</code>, files indirectly generated from the source file will also be returned. The default is <code>false</code>. For instance, \u00edf this property is enabled for a C++ source file, the final link target (e.g. a library or an application executable) will be returned in addition to the object file.</p> <p>Qbs will reply with a <code>generated-files-for-sources</code> message, whose structure is similar to the request. It also has a single object list property <code>products</code>, whose elements consist of a string property <code>full-display-name</code> and an object list property <code>results</code>. The properties of these objects are:</p> Property Type source-file FilePath generated-files FilePath list <p>The <code>source-file</code> property corresponds to an entry of the same name in the request, and the <code>generated-files</code> are the files which are generated by Qbs rules that take the source file as an input, taking the constraints specified in the request into account.</p> <p>Source files for which the list would be empty are not listed. Similarly, products for which the <code>results</code> list would be empty are also omitted.</p> <p>Note</p> <p>The results may be incomplete if the project has not been fully built.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#closing-a-project","title":"Closing a Project","text":"<p>A project is closed with a <code>release-project</code> message. This request has no properties.</p> <p>Qbs will reply with a <code>project-released</code> message. If no project was open, the reply will contain an <code>error</code> property of type ErrorInfo.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#closing-the-session","title":"Closing the Session","text":"<p>To close the session, a <code>quit</code> message is sent. This request has no properties.</p> <p>Qbs will cancel all currently running operations and then close itself. No reply will be sent.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#progress-messages","title":"Progress Messages","text":"<p>While a request is being handled, Qbs may emit progress information in order to enable client code to display a progress bar.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-task-started-message","title":"The <code>task-started</code> Message","text":"<p>This is always the first progress-related message for a specific request. It appears at most once per request. It consists of a string property <code>description</code>, whose value can be displayed to users, and an integer property <code>max-progress</code> that indicates which progress value corresponds to 100 per cent.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-task-progress-message","title":"The <code>task-progress</code> Message","text":"<p>This message updates the progress via an integer property <code>progress</code>.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-new-max-progress-message","title":"The <code>new-max-progress</code> Message","text":"<p>This message is emitted if the original estimated maximum progress has to be corrected. Its integer property <code>max-progress</code> updates the value from a preceding task-started message.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#messages-for-users","title":"Messages for Users","text":"<p>There are two types of messages that purely contain information to be presented to users.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-log-data-message","title":"The <code>log-data</code> Message","text":"<p>This object has a string property <code>message</code>, which is the text to be shown to the user.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-warning-message","title":"The <code>warning</code> Message","text":"<p>This message has a single property <code>warning</code> of type ErrorInfo.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#the-protocol-error-message","title":"The <code>protocol-error</code> Message","text":"<p>Qbs sends this message as a reply to a request with an unknown <code>type</code>. It contains an <code>error</code> property of type ErrorInfo.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#project-data","title":"Project Data","text":"<p>If a request can alter the build graph data, the associated reply may contain a <code>project-data</code> property whose value is of type TopLevelProjectData.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#toplevelprojectdata","title":"TopLevelProjectData","text":"<p>This data type represents the entire project. It has the same properties as PlainProjectData. If it is part of a <code>project-resolved</code> message, these additional properties are also present:</p> Property Type build-directory FilePath build-graph-file-path FilePath build-system-files FilePath list overridden-properties object profile-data object <p>The value of <code>build-directory</code> is the top-level build directory.</p> <p>The <code>build-graph-file-path</code> value is the path to the build graph file.</p> <p>The <code>build-system-files</code> value contains all Qbs project files, including modules and JavaScript helper files.</p> <p>The value of <code>overridden-properties</code> is the one that was passed in when the project was last resolved.</p> <p>The <code>profile-data</code> property maps the names of the profiles used in the project to the respective property maps. Unless profile multiplexing is used, this object will contain exactly one property.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#plainprojectdata","title":"PlainProjectData","text":"<p>This data type describes a Project item. The properties are as follows:</p> Property Type is-enabled bool location FilePath name string products ProductData list sub-projects PlainProjectData list <p>The <code>is-enabled</code> property corresponds to the project's condition.</p> <p>The <code>location</code> property is the exact position in a Qbs project file where the corresponding Project item was defined.</p> <p>The <code>products</code> and <code>sub-projects</code> are what the project has pulled in via its references property.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#productdata","title":"ProductData","text":"<p>This data type describes a Product item. The properties are as follows:</p> Property Type build-directory FilePath dependencies list of strings full-display-name string generated-artifacts ArtifactData list groups GroupData list is-enabled bool is-multiplexed bool is-runnable bool location Location module-properties ModulePropertiesData multiplex-configuration-id string name string properties object target-executable FilePath target-name string type list of strings version string <p>The elements of the <code>dependencies</code> array correspond to the full-display-name properties of the products that this product has pulled in via Depends items.</p> <p>The <code>generated-artifacts</code> are files that are created by the rules in this product.</p> <p>The <code>groups</code> list corresponds to the Group items in this product. In addition, a \"pseudo-group\" is created for the files property of the product itself. Its name is the same as the product's.</p> <p>The <code>is-enabled</code> property corresponds to the product's condition. A product may also get disabled if it contains errors and Qbs was was instructed to operate in relaxed mode when the project was resolved.</p> <p>The <code>is-multiplexed</code> property is true if and only if the product is multiplexed over one ore more properties.</p> <p>The <code>is-runnable</code> property indicates whether one of the product's target artifacts is an executable file. In that case, the file is available via the <code>target-executable</code> property.</p> <p>The <code>location</code> property is the exact position in a Qbs project file where the corresponding Product item was defined.</p> <p>The <code>module-properties</code> object provides the values of the module properties that were requested when the project was resolved.</p> <p>The <code>name</code> property is the value given in the Product item, whereas <code>full-display-name</code> is a name that uniquely identifies the product in the entire project, even in the presence of multiplexing. In the absence of multiplexing, it is the same as <code>name</code>. In either case, it is suitable for being presented to users.</p> <p>See the Product item documentation for a description of the other properties.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#groupdata","title":"GroupData","text":"<p>This data type describes a Group item. The properties are:</p> Property Type is-enabled bool location Location module-properties ModulePropertiesData name string prefix string source-artifacts ArtifactData list source-artifacts-from-wildcards ArtifactData list <p>The <code>is-enabled</code> property corresponds to the groups's condition. However, if the group's product is disabled, this property will always be <code>false</code>.</p> <p>The <code>location</code> property is the exact position in a Qbs project file where the corresponding Group item occurs.</p> <p>The <code>module-properties</code> object provides the values of the module properties that were requested when the project was resolved. If no module properties are set on the Group level and the value would therefore be the same as in the group's product, then this property is omitted.</p> <p>The <code>source-artifacts</code> list corresponds the the files listed verbatim in the group's files property.</p> <p>The <code>source-artifacts-from-wildcards</code> list represents the the files expanded from wildcard entries in the group's files property.</p> <p>See the Group item documentation for a description of the other properties.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#artifactdata","title":"ArtifactData","text":"<p>This data type represents files that occur in the project, either as sources or as outputs of a rules. Qbs project files, on the other hand, are not artifacts. The properties are:</p> Property Type file-path FilePath file-tags list of strings install-data object is-executable bool is-generated bool is-target bool module-properties ModulePropertiesData <p>The <code>install-data</code> property is an object whose <code>is-installable</code> property indicates whether the artifact gets installed. If so, then the FilePath properties <code>install-file-path</code> and <code>install-root</code> provide further information.</p> <p>The <code>is-target</code> property is true if the artifact is a target artifact of its product, that is, <code>is-generated</code> is true and <code>file-tags</code> intersects with the product type.</p> <p>The <code>module-properties</code> object provides the values of the module properties that were requested when the project was resolved. This property is only present for generated artifacts. For source artifacts, the value can be retrieved from their group.</p> <p>The other properties should be self-explanatory.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#modulepropertiesdata","title":"ModulePropertiesData","text":"<p>This data type maps fully qualified module property names to their respective values.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#other-custom-data-types","title":"Other Custom Data Types","text":"<p>There are a number of custom data types that serve as building blocks in various messages. They are described below.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#filepath","title":"FilePath","text":"<p>A FilePath is a string that describes a file or directory. FilePaths are always absolute and use forward slashes for separators, regardless of the host operating system.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#location","title":"Location","text":"<p>A Location is an object representing a file path and possibly also a position within the respective file. It consists of the following properties:</p> Property Type Mandatory file-path FilePath yes line int no column int no"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#errorinfo","title":"ErrorInfo","text":"<p>An ErrorInfo is an object representing error information. Its sole property <code>items</code> is an array of objects with the following structure:</p> Property Type Mandatory description string yes location Location no"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#datamode","title":"DataMode","text":"<p>This is the type of the <code>data-mode</code> property in a resolve or build request. It is used to indicate under which circumstances the reply message should include the project data. The possible values have string type and are as follows:</p> <ul> <li><code>\"never\"</code>: Do not attach project data to the reply.</li> <li><code>\"always\"</code>: Do attach project data to the reply.</li> <li><code>\"only-if-changed\"</code>: Attach project data to the reply only                               if it is different from the current                               project data.</li> </ul> <p>The default value is <code>\"never\"</code>.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#loglevel","title":"LogLevel","text":"<p>This is the type of the <code>log-level</code> property that can occur in various requests. It is used to indicate whether the client would like to receive log-data and/or warning messages. The possible values have string type and are as follows:</p> <ul> <li><code>\"error\"</code>: Do not log anything.</li> <li><code>\"warning\"</code>: Qbs may emit warnings, but no                    log-data messages.</li> <li><code>\"info\"</code>: In addition to warnings, Qbs may emit informational                 log-data messages.</li> <li><code>\"debug\"</code>: Qbs may emit debug output. No messages will be generated;                  instead, the standard error output channel will be used.</li> </ul> <p>The default value is <code>\"info\"</code>.</p>"},{"location":"getting-started/appendices/Appendix%20C.%20The%20JSON%20API/#environment","title":"Environment","text":"<p>This data type describes a set of environment variables. It is an object whose keys are names of environment variables and whose values are the values of these environment variables.</p>"},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/","title":"Appendix D: Licenses and Code Attributions","text":""},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/#licenses","title":"Licenses","text":"<p>The Qbs library and tools are available under commercial licenses from The Qt Company. In addition, they are available under GNU Lesser General Public License, Version 3 (LGPL version 3) and GNU General Public License, version 2 (GPL version 2).</p> <p>Shared functionality, which might be pulled in by user build scripts, is available under commercial licenses, GNU Lesser General Public License, Version 2.1 (LGPL version 2.1) with The Qt Company LGPL Exception version 1.1, and LGPL version 3.</p> <p>Autotests are available under commercial licenses and GNU General Public License Version 3, Annotated with The Qt Company GPL Exception 1.0.</p> <p>Examples are available under commercial licenses and BSD.</p>"},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/#gnu-lesser-general-public-license-version-3","title":"GNU Lesser General Public License, Version 3","text":"<pre><code>            GNU LESSER GENERAL PUBLIC LICENSE\n\n The Qt Toolkit is Copyright (C) 2015 The Qt Company Ltd.\n Contact: http://www.qt.io/licensing\n\n You may use, distribute and copy the Qt GUI Toolkit under the terms of\n GNU Lesser General Public License version 3, which is displayed below.\n\n-------------------------------------------------------------------------\n\n            GNU LESSER GENERAL PUBLIC LICENSE\n                Version 3, 29 June 2007\n\n Copyright \u00a9 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\nEveryone is permitted to copy and distribute verbatim copies of this\nlicensedocument, but changing it is not allowed.\n\nThis version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n0. Additional Definitions.\n\n As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser\nGeneral Public License, and the \u201cGNU GPL\u201d refers to version 3 of the\nGNU General Public License.\n\n \u201cThe Library\u201d refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n An \u201cApplication\u201d is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n A \u201cCombined Work\u201d is a work produced by combining or linking an\nApplication with the Library. The particular version of the Library\nwith which the Combined Work was made is also called the \u201cLinked\nVersion\u201d.\n\n The \u201cMinimal Corresponding Source\u201d for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n The \u201cCorresponding Application Code\u201d for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n1. Exception to Section 3 of the GNU GPL.\n\n You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n2. Conveying Modified Versions.\n\n If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n    a) under this License, provided that you make a good faith effort\n    to ensure that, in the event an Application does not supply the\n    function or data, the facility still operates, and performs\n    whatever part of its purpose remains meaningful, or\n\n    b) under the GNU GPL, with none of the additional permissions of\n    this License applicable to that copy.\n\n3. Object Code Incorporating Material from Library Header Files.\n\n The object code form of an Application may incorporate material from\na header file that is part of the Library. You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n    a) Give prominent notice with each copy of the object code that\n    the Library is used in it and that the Library and its use are\n    covered by this License.\n\n    b) Accompany the object code with a copy of the GNU GPL and this\n    license document.\n\n4. Combined Works.\n\n You may convey a Combined Work under terms of your choice that, taken\ntogether, effectively do not restrict modification of the portions of\nthe Library contained in the Combined Work and reverse engineering for\ndebugging such modifications, if you also do each of the following:\n\n    a) Give prominent notice with each copy of the Combined Work that\n    the Library is used in it and that the Library and its use are\n    covered by this License.\n\n    b) Accompany the Combined Work with a copy of the GNU GPL and this\n    license document.\n\n    c) For a Combined Work that displays copyright notices during\n    execution, include the copyright notice for the Library among\n    these notices, as well as a reference directing the user to the\n    copies of the GNU GPL and this license document.\n\n    d) Do one of the following:\n\n        0) Convey the Minimal Corresponding Source under the terms of\n        this License, and the Corresponding Application Code in a form\n        suitable for, and under terms that permit, the user to\n        recombine or relink the Application with a modified version of\n        the Linked Version to produce a modified Combined Work, in the\n        manner specified by section 6 of the GNU GPL for conveying\n        Corresponding Source.\n\n        1) Use a suitable shared library mechanism for linking with\n        the Library. A suitable mechanism is one that (a) uses at run\n        time a copy of the Library already present on the user's\n        computer system, and (b) will operate properly with a modified\n        version of the Library that is interface-compatible with the\n        Linked Version.\n\n    e) Provide Installation Information, but only if you would\n    otherwise be required to provide such information under section 6\n    of the GNU GPL, and only to the extent that such information is\n    necessary to install and execute a modified version of the\n    Combined Work produced by recombining or relinking the Application\n    with a modified version of the Linked Version. (If you use option\n    4d0, the Installation Information must accompany the Minimal\n    Corresponding Source and Corresponding Application Code. If you\n    use option 4d1, you must provide the Installation Information in\n    the manner specified by section 6 of the GNU GPL for conveying\n    Corresponding Source.)\n\n5. Combined Libraries.\n\n You may place library facilities that are a work based on the Library\nside by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities, conveyed under the terms of this License.\n\n    b) Give prominent notice with the combined library that part of\n    it is a work based on the Library, and explaining where to find\n    the accompanying uncombined form of the same work.\n\n6. Revised Versions of the GNU Lesser General Public License.\n\n The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number. If the Library\nas you received it specifies that a certain numbered version of the\nGNU Lesser General Public License \u201cor any later version\u201d applies to\nit, you have the option of following the terms and conditions either\nof that published version or of any later version published by the\nFree Software Foundation. If the Library as you received it does not\nspecify a version number of the GNU Lesser General Public License,\nyou may choose any version of the GNU Lesser General Public License\never published by the Free Software Foundation.\n\nIf the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the Library.\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/#gnu-general-public-license-version-3-annotated-with-the-qt-company-gpl-exception-10","title":"GNU General Public License Version 3, Annotated with The Qt Company GPL Exception 1.0","text":"<pre><code>This is the GNU General Public License version 3, annotated with The\nQt Company GPL Exception 1.0:\n\n-------------------------------------------------------------------------\n\nThe Qt Company GPL Exception 1.0\n\nException 1:\n\nAs a special exception you may create a larger work which contains the\noutput of this application and distribute that work under terms of your\nchoice, so long as the work is not otherwise derived from or based on\nthis application and so long as the work does not in itself generate\noutput that contains the output from this application in its original\nor modified form.\n\nException 2:\n\nAs a special exception, you have permission to combine this application\nwith Plugins licensed under the terms of your choice, to produce an\nexecutable, and to copy and distribute the resulting executable under\nthe terms of your choice. However, the executable must be accompanied\nby a prominent notice offering all users of the executable the entire\nsource code to this application, excluding the source code of the\nindependent modules, but including any changes you have made to this\napplication, under the terms of this license.\n\n\n-------------------------------------------------------------------------\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;http://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;http://www.gnu.org/philosophy/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/#gnu-lesser-general-public-license-version-21","title":"GNU Lesser General Public License, Version 2.1","text":"<pre><code>          GNU LESSER GENERAL PUBLIC LICENSE\n               Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n\n          GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n             END OF TERMS AND CONDITIONS\n\f\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the library's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  &lt;signature of Ty Coon&gt;, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/#the-qt-company-lgpl-exception-version-11","title":"The Qt Company LGPL Exception version 1.1","text":"<pre><code>The Qt Company LGPL Exception version 1.1\n\nAs an additional permission to the GNU Lesser General Public License version\n2.1, the object code form of a \"work that uses the Library\" may incorporate\nmaterial from a header file that is part of the Library.  You may distribute\nsuch object code under terms of your choice, provided that:\n    (i)   the header files of the Library have not been modified; and\n    (ii)  the incorporated material is limited to numerical parameters, data\n          structure layouts, accessors, macros, inline functions and\n          templates; and\n    (iii) you comply with the terms of Section 6 of the GNU Lesser General\n          Public License version 2.1.\n\nMoreover, you may apply this exception to a modified version of the Library,\nprovided that such modification does not involve copying material from the\nLibrary into the modified Library's header files unless such material is\nlimited to (i) numerical parameters; (ii) data structure layouts;\n(iii) accessors; and (iv) small macros, templates and inline functions of\nfive lines or less in length.\n\nFurthermore, you are not required to apply this additional permission to a\nmodified version of the Library.\n</code></pre>"},{"location":"getting-started/appendices/Appendix%20D.%20Licenses%20and%20Code%20Attributions/#third-party-attibutions","title":"Third-Party Attibutions","text":"<p>Qbs contains third-party code, which we gratefully acknowledge:</p> Third-Party License QuickJS MIT License biplist BSD 3-clause \"New\" or \"Revised\" License cppscanner MIT License dmgbuild MIT License ds_store MIT License mac_alias MIT License"},{"location":"getting-started/appendices/attributions/QuickJS/","title":"QuickJS","text":"<p>The JavaScript engine used to evaluate all JavaScript code in Qbs project files.</p> <p>The sources can be found in src/shared/quickjs.</p> <pre><code>Copyright (c) 2017-2021 Fabrice Bellard\nCopyright (c) 2017-2021 Charlie Gordon\n</code></pre> <p>MIT License.</p> <pre><code>QuickJS Javascript Engine\n\nCopyright (c) 2017-2021 Fabrice Bellard\nCopyright (c) 2017-2021 Charlie Gordon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"getting-started/appendices/attributions/biplist/","title":"biplist","text":"<p>biplist is a library for reading/writing binary plists.</p> <p>Used in the qbs dmg module for building Apple disk images.</p> <p>The sources can be found in <code>src/3rdparty/python/lib/python2.7/site-packages/biplist</code>.</p> <p>Project Homepage, upstream version: 1.0.2</p> <pre><code>Copyright (c) 2010, Andrew Wooster\n</code></pre> <p>BSD 3-clause \"New\" or \"Revised\" License.</p> <pre><code>Copyright (c) 2010, Andrew Wooster\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n* Neither the name of biplist nor the names of its contributors may be\n  used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"getting-started/appendices/attributions/cppscanner/","title":"cppscanner","text":"<p>The cpp scanner module is used to parse C/C++ files and to find includes in them.</p> <p>The sources can be found in <code>src/plugins/scanner/cpp</code>.</p> <pre><code>Copyright (c) 2008 Roberto Raggi\n</code></pre> <p>MIT License.</p> <pre><code>// Copyright (c) 2008 Roberto Raggi &lt;roberto.raggi@gmail.com&gt;\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n</code></pre>"},{"location":"getting-started/appendices/attributions/dmgbuild/","title":"dmgbuild","text":"<p>macOS command line utility to build disk images.</p> <p>Used in the qbs dmg module for building Apple disk images.</p> <p>The sources can be found in <code>src/3rdparty/python/lib/python2.7/site-packages/dmgbuild</code>.</p> <p>Project Homepage, upstream version: 1.3.1</p> <pre><code>Copyright (c) 2014 Alastair Houghton\n</code></pre> <p>MIT License.</p> <pre><code>Copyright (c) 2014 Alastair Houghton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"getting-started/appendices/attributions/ds_store/","title":"ds_store","text":"<p>Manipulate Finder's <code>.DS_Store</code> files from Python.</p> <p>Used in the qbs dmg module for building Apple disk images.</p> <p>The sources can be found in <code>src/3rdparty/python/lib/python2.7/site-packages/ds_store</code>.</p> <p>Project Homepage, upstream version: 1.1.2</p> <pre><code>Copyright (c) 2014 Alastair Houghton\n</code></pre> <p>MIT License.</p> <pre><code>Copyright (c) 2014 Alastair Houghton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"getting-started/appendices/attributions/mac_alias/","title":"mac_alias","text":"<p>Generate/parse Mac OS Alias records from Python.</p> <p>Used in the qbs dmg module for building Apple disk images.</p> <p>The sources can be found in <code>src/3rdparty/python/lib/python2.7/site-packages/mac_alias</code>.</p> <p>Project Homepage, upstream version: 2.0.6</p> <pre><code>Copyright (c) 2014 Alastair Houghton\n</code></pre> <p>MIT License.</p> <pre><code>Copyright (c) 2014 Alastair Houghton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</code></pre>"},{"location":"getting-started/setup/","title":"Setup","text":"<ul> <li>Installing</li> <li>Configuring Profiles and Preferences</li> <li>Managing Qt Versions</li> </ul>"},{"location":"getting-started/setup/Configuring%20Profiles%20and%20Preferences/","title":"Configuring Profiles and Preferences","text":"<p>Profiles contain properties that apply to one or more projects. They are stored independently of the project files and are usually not shared between build hosts. Typically, profiles contain module properties, such as installation paths of tools or libraries on the host computer. This approach has the following advantages, among others:</p> <ul> <li>Team members with different computer setups can work together         smoothly because no host-specific settings end up in the project         files.</li> <li>Different versions of a tool or library can be used to build the         same project without affecting each other.</li> </ul> <p>For example, a profile for building C++ applications contains at least the installation path and the type of the compiler toolchain. A profile for building Qt applications contains the toolchain-specific properties as well as the path to the Qt installation.</p> <p>This topic describes profiles stored in the Qbs settings. In some cases it might be beneficial to keep profiles explicitly in the project sources. This can be achieved with the Profile item.</p>"},{"location":"getting-started/setup/Configuring%20Profiles%20and%20Preferences/#setting-up-toolchain-profiles","title":"Setting Up Toolchain Profiles","text":"<p>Qbs comes with a helper tool setup-toolchains that can create profiles for many toolchains. Open a terminal window and type:</p> <pre><code>qbs setup-toolchains --detect\n</code></pre> <p>This will automatically set up a profile for each detected toolchain on your computer. You can list the existing profiles by running:</p> <pre><code>qbs config --list profiles\n</code></pre> <p>Some toolchains, especially for bare-metal targets, may require additional module properties. Those can be added with the config or the config-ui tools. Now you should be ready to build your first project with Qbs. Go into examples/helloworld-minimal and type:</p> <pre><code>qbs build profile:&lt;profile name&gt;\n</code></pre> <p>You have successfully built your first Qbs project. If you want to build projects that use Qt, additional steps might be necessary. Please refer to Managing Qt Versions for more information.</p>"},{"location":"getting-started/setup/Configuring%20Profiles%20and%20Preferences/#global-preferences","title":"Global Preferences","text":"<p>In addition to profiles, Qbs provides some global preferences such as <code>qbsSearchPaths</code> and <code>defaultProfile</code>.</p>"},{"location":"getting-started/setup/Configuring%20Profiles%20and%20Preferences/#managing-profiles-and-preferences","title":"Managing Profiles and Preferences","text":"<p>You can use the config command to manage all Qbs configuration settings, such as profiles and global preferences from the command line, for example:</p> <pre><code>qbs config profiles.&lt;someprofile&gt;.qbs.architecture arm\n</code></pre> <p>For convenience, Qbs provides a tool config-ui where you can manage the settings in a hierarchical view.</p> <p>Qbs Settings displays the keys in the specified settings directory and their values. To expand all keys, select View \u2192 Expand All (Ctrl+E or Cmd+E on macOS). To collapse all keys, select Collapse All (Ctrl+C or Cmd+C).</p> <p>To change the value of a key, double-click it and enter the new value.</p> <p>To save your changes, select File \u2192 Save.</p> <p>To refresh the settings from the settings directory, select File \u2192 Reload.</p>"},{"location":"getting-started/setup/Installing/","title":"Installing","text":"<p>Qbs binaries are available for Windows, macOS, Linux, and FreeBSD.</p> <p>On all platforms, Qbs binaries are part of the Qt Creator and Qt SDK installers. You can find the <code>qbs</code> executable in the <code>bin</code> directory of Qt Creator, or within the application bundle's <code>MacOS</code> directory on macOS.</p> <p>Qbs can also be built locally from sources. For more information, see Appendix A: Building Qbs.</p>"},{"location":"getting-started/setup/Installing/#windows","title":"Windows","text":"<p>The Qt Project provides prebuilt binaries for Windows (x86 and x64) at https://download.qt.io/official_releases/qbs/. For commercial customers of The Qt Company, the binaries are available in the Qt Account. The binaries are packaged in a .zip folder that can be extracted to a location of your choice.</p> <p>Qbs is also available as a Chocolatey package, which can be installed in the usual way:</p> <pre><code>choco install qbs\n</code></pre> <p>The <code>.nupkg</code> file can also be downloaded directly from https://download.qt.io/official_releases/qbs/ for offline installation.</p>"},{"location":"getting-started/setup/Installing/#macos","title":"macOS","text":"<p>Qbs can be conveniently installed on macOS with the MacPorts or Homebrew package managers:</p> <pre><code>brew install qbs\n</code></pre> <p>or</p> <pre><code>port install qbs\n</code></pre>"},{"location":"getting-started/setup/Installing/#linux-and-freebsd","title":"Linux and FreeBSD","text":"<p>Qbs is available via the package management systems of Linux distributions, and FreeBSD.</p>"},{"location":"getting-started/setup/Managing%20Qt%20Versions/","title":"Managing Qt Versions","text":""},{"location":"getting-started/setup/Managing%20Qt%20Versions/#introduction","title":"Introduction","text":"<p>If your environment has the right <code>qmake</code> binary in its <code>PATH</code> and is also set up properly for a matching toolchain, then you do not necessarily need a profile to build projects with a Qt dependency. Otherwise, you should create one:</p> <pre><code>qbs setup-qt /usr/bin/qmake myqt\n</code></pre> <p>This will create the <code>myqt</code> profile which can then be used on the command line:</p> <pre><code>qbs profile:myqt\n</code></pre> <p>Note</p> <p>If the <code>setup-toolchains</code> command has found more than one toolchain, you will need to manually link your Qt profile to one of them, like this: <pre><code>qbs config profiles.myqt.baseProfile &lt;profile name&gt;\n</code></pre></p>"},{"location":"getting-started/setup/Managing%20Qt%20Versions/#multiple-qt-builds","title":"Multiple Qt Builds","text":"<p>To support multiple Qt builds, or in fact any combination of related settings, you need to create several profiles. The following example illustrates how to set up three different profiles, each for a different Qt build:</p> <pre><code>qbs setup-qt ~/dev/qt/4.7/bin/qmake qt47\nqbs setup-qt ~/dev/qt/4.8/bin/qmake qt48\nqbs setup-qt ~/dev/qt/5.0/qtbase/bin/qmake qt5\n</code></pre> <p>You can set the default Qt build like this:</p> <pre><code>qbs config defaultProfile qt5\n</code></pre> <p>To choose a Qt build that is different from the default, use:</p> <pre><code>qbs build profile:qt48\n</code></pre> <p>You can set other properties in a profile (not just Qt ones), in the same way you override them from the command line. For example:</p> <pre><code>qbs setup-qt C:\\Qt\\5.0.0\\qtbase\\bin\\qmake.exe qt5\nqbs config profiles.qt5.qbs.architecture x86_64\nqbs config profiles.qt5.baseProfile msvc2010\n</code></pre> <p>The last example uses the inheritance feature of profiles. All settings in the profile set as <code>baseProfile</code> are known in the derived profile as well. They can of course be overridden there.</p>"},{"location":"getting-started/usage/","title":"Usage","text":"<ul> <li>Language Introduction</li> <li>Building Applications</li> <li>Running Applications</li> <li>Installing Files</li> <li>Target Platforms</li> <li>Using the Shell</li> <li>Generators</li> <li>Multiplexing</li> <li>Custom Modules and Items</li> <li>Special Property Values</li> <li>Module Providers</li> </ul>"},{"location":"getting-started/usage/Building%20Applications/","title":"Building Applications","text":"<p>This section assumes that Qbs is present in <code>PATH</code>. For the details how to install Qbs, see the Installing page.</p> <p>To build applications from the command line, enter the following commands:</p> <pre><code>cd examples/collidingmice\nqbs\n</code></pre> <p>By default, Qbs uses all the CPU cores available to achieve maximum build parallelization. To explicitly specify the number of concurrent jobs, use the <code>-j</code> option. For example, to run 4 concurrent jobs, enter the following command:</p> <pre><code>qbs -j4\n</code></pre> <p>The application is built using the default build profile that is set up in your Qbs configuration.</p> <p>You can use the config command to set the max number of jobs per profile. For example, to set four jobs as the default option for a profile named Android, enter the following command:</p> <pre><code>qbs config profiles.Android.preferences.jobs 4\n</code></pre> <p>To build with other profiles than the default one, specify options for the build command. For example, to build debug and release configurations with the Android profile, enter the following command:</p> <pre><code>qbs build profile:Android config:debug config:release\n</code></pre> <p>The position of the property assignment is important. In the example above, the profile property is set for all build configurations that come afterwards.</p> <p>To set a property just for one build configuration, place the assignment after the build configuration name. In the following example, the property cpp.treatWarningsAsErrors is set to <code>true</code> for debug only and cpp.optimization is set to <code>small</code> for release only.</p> <pre><code>qbs build config:debug modules.cpp.treatWarningsAsErrors:true config:release modules.cpp.optimization:small\n</code></pre> <p>Projects are built in the debug build configuration by default.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/","title":"Custom Modules and Items","text":"<p>Users of Qbs are not limited to the pre-defined modules and items, they can also create their own. Here we describe how to set up custom modules and items so that Qbs will find them.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/#file-system-layout","title":"File System Layout","text":"<p>Items and modules are located under a common base directory, whose name and location is completely arbitrary. We will refer to it as <code>search-path</code> here. This directory has two subdirectories <code>modules</code> and <code>imports</code>, which contain Qbs modules and items, respectively.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/#custom-modules","title":"Custom Modules","text":"<p>To introduce a custom module <code>mymodule</code>, create a directory <code>search-path/modules/mymodule/</code>.</p> <p>Note</p> <p>Module names are case-sensitive, and this also goes for the corresponding directory name.</p> <p>Then, put a file containing an instance of the Module in there and give it the <code>.qbs</code> extension. This module will be pulled in if a product declares a dependency on <code>mymodule</code>.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/#custom-items","title":"Custom Items","text":"<p>To introduce a custom item <code>MyItem</code>, create the file <code>search-path/imports/MyItem.qbs</code>.</p> <p>Note</p> <p>Item file names must start with a capital letter due to the fact that type names can only start with a capital letter. Otherwise, the file will be silently ignored.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/#making-qbs-aware-of-custom-modules-and-items","title":"Making Qbs Aware of Custom Modules and Items","text":"<p>To be able to use your custom modules and items, you need to make them known to Qbs. You can do this per project or globally.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/#project-specific-modules-and-items","title":"Project-specific Modules and Items","text":"<p>Let's assume you have a project that is located in <code>project_dir</code> and you have created some modules in <code>project_dir/custom-stuff/modules/</code> as well as some items in <code>project_dir/custom-stuff/imports/</code> that you want to use in the project. To achieve this, your top-level project file should look like this: <pre><code>// ...\nProject {\n    // ..\n    qbsSearchPaths: \"custom-stuff\"\n    // ..\n}\n</code></pre></p> <p>Note</p> <p>For technical reasons, the custom modules and items will not be available in the file that contains the Project.qbsSearchPaths property. Any product that wants to make use of them needs to be in a different file that is pulled in via the Project.references property, for example. This is not a serious limitation, since every well-structured project will be split up in this manner.</p>"},{"location":"getting-started/usage/Custom%20Modules%20and%20Items/#making-custom-modules-and-items-available-across-projects","title":"Making Custom Modules and Items Available Across Projects","text":"<p>What if your modules and items are generally useful and you want to access them in several projects? In this case, it is best to add the location to your preferences. For example: <pre><code>qbs config preferences.qbsSearchPaths /usr/local/share/custom-qbs-extensions\n</code></pre></p>"},{"location":"getting-started/usage/Generators/","title":"Generators","text":"<p>Generators are a Qbs sub-tool and set of APIs that enable arbitrary processing to be performed on the build graph. Currently, they are used to integrate Qbs with popular IDEs, such as Microsoft Visual Studio, and to generate Clang compilation databases.</p>"},{"location":"getting-started/usage/Generators/#generating-microsoft-visual-studio-projects","title":"Generating Microsoft Visual Studio Projects","text":"<p>To generate a project for another build system, such as Microsoft Visual Studio, use the qbs generate command and specify a generator using the -g option. For example:</p> <pre><code># For Visual Studio\nqbs generate -g visualstudio2015\n</code></pre> <p>Qbs will then generate a series of files in the current directory, based on the generator that was chosen. The resulting project files can be opened in the respective IDE and all work can be performed there.</p> <p>The project files will expose as much information as possible to the IDE and will use Qbs to perform the actual build.</p> <p>Note</p> <p>You cannot modify build system files and expect the changes to be reflected in Qbs. You must edit your Qbs project files and re-run qbs generate in order for the changes to be reflected in your IDE.</p>"},{"location":"getting-started/usage/Generators/#generating-iar-embedded-workbench-projects","title":"Generating IAR Embedded Workbench Projects","text":"<p>To generate a project for IAR Embedded Workbench, use the qbs generate command and specify a generator using the -g option. For example:</p> <pre><code># For IAREW v8xxxx\nqbs generate -g iarew8 profile:&lt;your/qbs/profile&gt;\nqbs generate -g iarew8 -d &lt;path/to/build/directory&gt; -f &lt;path/to/qbs/project&gt; profile:&lt;your/qbs/profile&gt;\n</code></pre> <p>Note</p> <p>You need to specify a specific QBS profile, which is required for a generator to fetch a target architecture to generate the project.</p> <p>Note</p> <p>IAR EW generator creates a native target project.</p> <p>Supported IAR EW generators are listed in a table below:</p> Generator IAR EW Version Target Architecture iarew8 All 8.x.y versions ARM iarew7 All 7.x.y versions AVR, MSP430 iarew10 All 10.x.y versions 8051 (aka MCS51) iarew3 All 3.x.y versions STM8"},{"location":"getting-started/usage/Generators/#keil-uvision-projects","title":"KEIL uVision Projects","text":"<p>To generate a project for KEIL uVision, use the qbs generate command and specify a generator using the -g option. For example:</p> <pre><code># For KEIL UV5\nqbs generate -g keiluv5 profile:&lt;your/qbs/profile&gt;\nqbs generate -g keiluv5 -d &lt;path/to/build/directory&gt; -f &lt;path/to/qbs/project&gt; profile:&lt;your/qbs/profile&gt;\n</code></pre> <p>Note</p> <p>You need to specify a specific QBS profile, which is required for a generator to fetch a target architecture to generate the project.</p> <p>Note</p> <p>KEIL UV generator creates a native target project.</p> <p>Supported KEIL UV generators are listed in a table below:</p> Generator KEIL UV Version Target Architecture keiluv5 All 5.x.y versions 8051 (aka MCS51), ARM"},{"location":"getting-started/usage/Generators/#generating-clang-compilation-databases","title":"Generating Clang Compilation Databases","text":"<p>To generate a Clang compilation database (clangdb), use the following command:</p> <pre><code>qbs generate --generator clangdb\n</code></pre>"},{"location":"getting-started/usage/Generators/#generating-makefiles","title":"Generating Makefiles","text":"<p>To generate a Makefile, use the following command: <pre><code>qbs generate --generator makefile\n</code></pre></p>"},{"location":"getting-started/usage/Generators/#targets","title":"Targets","text":"<p>The generated Makefile will contain targets for all output artifacts known to Qbs.</p> <p>In addition, the following targets are created for every product:</p> <ul> <li><code>&lt;product-name&gt;</code> to build the product</li> <li><code>clean-&lt;product-name&gt;</code> to remove all files generated by the above target</li> <li><code>install-&lt;product-name&gt;</code> to install the product's artifacts that have                                     <code>qbs.install</code> set</li> </ul> <p>In the above list, the placeholder <code>&lt;product-name&gt;</code> stands for the product's name with all characters that are not ASCII letters, digits, dots or underscores replaced with underscore characters.</p> <p>The special target <code>all</code> builds all products whose builtByDefault property is enabled. This is the default target. It is complemented by <code>install</code> and <code>clean</code>.</p> <p>Note</p> <p>The Makefile will not be able to build artifacts created by JavaScriptCommands, because there is no command line to run for them.</p>"},{"location":"getting-started/usage/Generators/#pre-defined-variables","title":"Pre-defined Variables","text":"<p>The build directory and the install root are set to whatever you specified when calling the generator. If you did not specify anything, Qbs' default values are used. You can override these values when invoking the <code>make</code> tool by explicitly setting the <code>BUILD_ROOT</code> and <code>INSTALL_ROOT</code> variables, respectively. For instance: <pre><code>$ qbs generate -g makefile config:make modules.qbs.installRoot:/opt/mydir\n$ make -f make/Makefile                                 # Will install to /opt/mydir\n$ make -f make/Makefile INSTALL_ROOT=/opt/myotherdir    # Will install to /opt/myotherdir\n</code></pre></p>"},{"location":"getting-started/usage/Generators/#spaces-in-directory-names","title":"Spaces in Directory Names","text":"<p>Due to the difficulties involved in making this work correctly, Qbs will refuse to generate a Makefile if the source, build or install root directories contain spaces. It will try to handle spaces in file names of output artifacts, though.</p>"},{"location":"getting-started/usage/Generators/#platform-specific-differences-in-format","title":"Platform-specific Differences in Format","text":"<p>Qbs assumes that the Makefile will be invoked on the current host platform, so that platform's tools will be used for copying and removing files, and path separators will be converted to backslashes on Windows. When dealing with spaces in artifact names, on Unix-like systems compatibility with GNU make is assumed with regards to quoting.</p>"},{"location":"getting-started/usage/Generators/#limitations","title":"Limitations","text":"<p>Due to the high flexibility of the Qbs project format and build engine, some projects may be too complex to produce an equivalent project file for another build system.</p> <p>This list of limitations aims to be as small as possible, but one of the most notable (at least for the Microsoft Visual Studio generator) is that certain properties must contain the same value across all build configurations. For example, the following is not allowed:</p> <pre><code>Product {\n    // ERROR: 'name' property cannot have different values based on the configuration\n    name: qbs.configuration === \"debug\"\n        ? \"MyProduct_debug\"\n        : \"MyProduct\"\n}\n</code></pre> <p>Note</p> <p>This limitation only applies when property values are varied on the configuration name. For example, the following is OK (as long as the value of xyz itself does not vary across configurations):</p> <pre><code>Product {\n    // OK\n    property bool isDebug: &lt;some value&gt;\n    name: isDebug ? \"MyProduct_debug\" : \"MyProduct\"\n}\n</code></pre> <p>The properties to which the limitation applies includes but is not limited to:</p> <ul> <li>Product.name</li> <li>bundle.isBundle</li> </ul> <p>If a simple workaround is possible in a particular case (for example, varying Product.targetName across configuration instead of Product.name, the generator will typically suggest it in the error message.</p>"},{"location":"getting-started/usage/Installing%20Files/","title":"Installing Files","text":"<p>To install your project, specify the necessary information in the project file:</p> <pre><code>Application {\n    Group {\n        name: \"Runtime resources\"\n        files: \"*.qml\"\n        qbs.install: true\n        qbs.installDir: \"share/myproject\"\n    }\n    Group {\n        name: \"The App itself\"\n        fileTagsFilter: \"application\"\n        qbs.install: true\n        qbs.installDir: \"bin\"\n    }\n}\n</code></pre> <p>In this example, we want to install a couple of QML files and an executable.</p> <p>When building, Qbs installs artifacts into the default root folder, namely <code>&lt;build root&gt;/install-root</code>. The qbs.installPrefix and qbs.installDir properties are appended to the root folder. <pre><code>qbs build qbs.installPrefix:/usr\n</code></pre> In this example, the executable will be installed into the <code>&lt;build root&gt;/install-root/usr/bin</code> folder and the QML files will be installed into the <code>&lt;build root&gt;/install-root/usr/share/myproject</code> folder.</p> <p>To skip installation during the build, use the <code>--no-install</code> option.</p> <p>To override the default location, use the <code>--install-root</code> option of the <code>qbs install</code> command: <pre><code>qbs build --no-install qbs.installPrefix:/usr\nsudo qbs install --no-build --install-root /\n</code></pre> In this example, artifacts will be installed directly into the <code>/usr</code> folder. Since the <code>qbs install</code> command implies <code>build</code>, we use the <code>--no-build</code> parameter to ensure that we do not accidentally rebuild the project, thereby changing the artifacts' owner to <code>root</code>.</p> <p>Sometimes, it makes sense to install the application into a temporary root folder, keeping the same folder structure within that root folder as in the examples above; for instance, when building a Linux package such as <code>deb</code> or <code>rmp</code>. To install the application into the <code>/tmp/myProjectRoot</code> folder, use the following command:</p> <pre><code>$ qbs install --install-root /tmp/myProjectRoot\n</code></pre> <p>In this example, the executable will be installed into the <code>/tmp/myProjectRoot/usr/bin</code> folder and QML files will be installed into the <code>/tmp/myProjectRoot/usr/share/myproject</code> folder.</p> <p>To remove all files from the install root prior to installing, use the <code>--clean-install-root</code> parameter:</p> <pre><code>qbs install --clean-install-root --install-root /tmp/myProjectRoot\n</code></pre> <p>For more information about how the installation path is constructed, see Installation Properties.</p>"},{"location":"getting-started/usage/Language%20Introduction/","title":"Language Introduction","text":"<p>Qbs uses project files (<code>*.qbs</code>) to describe the contents of a project. A project contains one or more products. A product is the target of a build process, typically an application, library or maybe a tar ball.</p> <p>Note</p> <p>Qbs source files are assumed to be UTF-8 encoded.</p>"},{"location":"getting-started/usage/Language%20Introduction/#the-obligatory-hello-world-example","title":"The Obligatory Hello World Example","text":"<p>Qbs project files are written using a QML dialect. A very simple C++ hello world project looks like this: helloworld.qbs<pre><code>Application {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n    Depends { name: \"cpp\" }\n}\n</code></pre></p> <p><code>Application</code> describes the product we want to build. In this case, an application. This is just a shortcut for writing <pre><code>Product {\n    type: \"application\"\n    // ...\n}\n</code></pre></p> <p>The <code>name</code> is the name of the product. In this case it is also the name of the produced executable (on Windows, the \".exe\" extension is added by default).</p> <p>In the property <code>files</code>, we specify the source files for our product. Unlike QML, the right-hand side can be either a string or a string list. A single string is converted to a stringlist containing just one element. So we could have also written</p> <pre><code>files: [ \"main.cpp\" ]\n</code></pre> <p><code>Depends</code> adds the dependency to the cpp module. This is necessary to let Qbs know that we have a C++ project and want to compile main.cpp with a C++ compiler. For more information about Qbs modules, see Modules.</p>"},{"location":"getting-started/usage/Language%20Introduction/#reusing-project-file-code","title":"Reusing Project File Code","text":"<p>QML-like inheritance works also in Qbs.</p> <p>CrazyProduct.qbs<pre><code>Product {\n    property string craziness: \"low\"\n\n    files: [\n        \"Crazy.h\",\n        \"Crazy.cpp\"\n    ]\n}\n</code></pre> hellocrazyworld.qbs<pre><code>import \"CrazyProduct.qbs\" as CrazyProduct\n\nCrazyProduct {\n    craziness: \"enormous\"\n    name: \"hellocrazyworld\"\n    files: base.concat([\"main.cpp\"])\n    // ...\n}\n</code></pre></p> <p>You can put JS code into separate <code>.js</code> files and then import them.</p> <p>helpers.js<pre><code>function planetsCorrectlyAligned()\n{\n    // implementation\n}\n</code></pre> myproject.qbs<pre><code>import \"helpers.js\" as Helpers\n\nProduct {\n    name: \"myproject\"\n    Group {\n        condition: Helpers.planetsCorrectlyAligned()\n        file: \"magic_hack.cpp\"\n    }\n    // ...\n}\n</code></pre></p> <p>See Special Property Values for more details about the base property.</p>"},{"location":"getting-started/usage/Language%20Introduction/#modules","title":"Modules","text":"<p>A module is a collection of properties and language items that are used for building a product if the product depends on (or loads) the module.</p> <p>For example, the <code>cpp</code> module looks like this (simplified): <pre><code>Module {\n    name: \"cpp\"\n    property string warningLevel\n    property string optimization\n    property bool debugInformation\n    property pathList includePaths\n    // ...\n    FileTagger {\n        patterns: \"*.cpp\"\n        fileTags: [\"cpp\"]\n    }\n    Rule {...}  // compiler\n    Rule {...}  // application linker\n    Rule {...}  // static lib linker\n    Rule {...}  // dynamic lib linker\n}\n</code></pre></p> <p>The properties that can be set for the <code>cpp</code> module are used to control the behavior of your C++ toolchain. In addition, you can use FileTaggers and Rules that are explained later.</p> <p>As soon as your product depends on a module, it can set the properties of the module. You specify the optimization level for your product (and all build variants) like this:</p> helloworld.qbs<pre><code>Application {\n    name: \"helloworld\"\n    files: [\"main.cpp\"]\n    cpp.optimization: \"ludicrousSpeed\"\n    Depends { name: \"cpp\" }\n}\n</code></pre> <p>A module can depend on other modules. For example, the Qt.core module depends on the cpp module. The module dependencies are transitive, i.e. in a Product, all dependent modules are accessible:</p> <pre><code>Application {\n    name: \"helloworld\"\n    files: [\"main.cpp\"]\n    Depends { name: \"Qt.core\" }\n    // the \"cpp\" module is available since\n    // \"Qt.core\" depends on \"cpp\".\n    cpp.optimization: \"ludicrousSpeed\"\n}\n</code></pre>"},{"location":"getting-started/usage/Language%20Introduction/#different-properties-for-a-single-file","title":"Different Properties for a Single File","text":"<p>Not only the product, but all the source files of the product can have their own set of module properties. For example, assume you have some files that are known to crash your compiler if you turn on optimizations. You want to turn off optimizations for just these files and this is how you do it:</p> <pre><code>Application {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n    Group {\n        files: [\"bad_file.cpp\", \"other_bad_file.cpp\"]\n        cpp.optimization: \"none\"\n    }\n    Depends { name: \"cpp\" }\n}\n</code></pre>"},{"location":"getting-started/usage/Language%20Introduction/#selecting-files-by-properties","title":"Selecting Files by Properties","text":"<p>Sometimes you have a file that is only going to be compiled on a certain platform. This is how you do it: <pre><code>Group {\n    condition: qbs.targetOS.includes(\"windows\")\n    files: [\n        \"harddiskdeleter_win.cpp\",\n        \"blowupmonitor_win.cpp\",\n        \"setkeyboardonfire_win.cpp\"\n    ]\n}\nGroup {\n    condition: qbs.targetOS.includes(\"linux\")\n    files: [\n        \"harddiskdeleter_linux.cpp\",\n        \"blowupmonitor_linux.cpp\",\n        \"setkeyboardonfire_linux.cpp\"\n    ]\n}\n</code></pre></p> <p>In the above example, qbs.targetOS is a property of the target of the the qbs module. The <code>qbs</code> module is always implicitly loaded. Its main properties are:</p> <ul> <li>buildVariant that specifies the name of the build variant         for the current build.</li> <li>targetOS that specifies the operating system you want to         build the project for.</li> </ul> <p>You can set these properties on the command line or by using a profile.</p> <pre><code>$ qbs                             # qbs.buildVariant:debug, profile:&lt;default profile&gt; (or profile:none, if no default profile exists)\n$ qbs config:release              # qbs.buildVariant:release, profile:&lt;default profile&gt;\n$ qbs config:debug config:release # builds two configurations of the project\n$ qbs profile:none                # all module properties have their default values\n</code></pre> <p>To select files by build variant: <pre><code>Group {\n    condition: qbs.buildVariant == \"debug\"\n    files: \"debughelper.cpp\"\n}\n</code></pre></p> <p>To set properties for a build variant: <pre><code>Properties {\n    condition: qbs.buildVariant == \"debug\"\n    cpp.debugInformation: true\n    cpp.optimization: \"none\"\n}\n</code></pre> Or, to use a more QML-like style: <pre><code>cpp.debugInformation: qbs.buildVariant == \"debug\"\ncpp.optimization: qbs.buildVariant == \"debug\" ? \"none\" : \"fast\"\n</code></pre></p>"},{"location":"getting-started/usage/Language%20Introduction/#property-types","title":"Property Types","text":"<p>While properties in Qbs generally work the same way as in QML, the set of possible property types has been adapted to reflect the specific needs of a build tool. The supported types are as follows:</p> Property type Example Description <code>bool</code> <code>property bool someBoolean: false</code> The usual boolean values. <code>int</code> <code>property int theAnswer: 42</code> Integral numbers. <code>path</code> <code>property path aFile: \"file.txt\"</code> File paths resolved relative to the directory the product they are associated with is located in. <code>pathList</code> <code>property pathList twoFiles: [\"file1.txt\", \"./file2.txt\"]</code> A list of <code>path</code> values. <code>string</code> <code>property string parentalAdvisory: \"explicit lyrics\"</code> JavaScript strings. <code>stringList</code> <code>property stringList realWorldExample: [\"no\", \"not really\"]</code> A list of JavaScript strings. <code>var</code> <code>property var aMap: ({ key1: \"value1\", key2: \"value2\" )}</code> Generic data, as in QML. <code>varList</code> <code>property var aMapList: [{ key1: \"value1\", key2: \"value2\" , { key1: \"value3\" }]}</code> A list of generic data, typically JavaScript objects."},{"location":"getting-started/usage/Language%20Introduction/#overriding-property-values-from-the-command-line","title":"Overriding Property Values from the Command Line","text":"<p>Property values set in project files or profiles can be overridden on the command line. The syntax is <code>&lt;prefix&gt;.&lt;prop-name&gt;:&lt;prop-value&gt;</code>. The following command lines demonstrate how to set different kinds of properties: <pre><code>$ qbs projects.someProject.projectProperty:false          # set a property of a project\n$ qbs products.someProduct.productProperty:false          # set a property of a product\n$ qbs modules.cpp.treatWarningsAsErrors:true              # set a module property for all products\n$ qbs products.someProduct.cpp.treatWarningsAsErrors:true # set a module property for one product\n</code></pre></p> <p>Property values on the command line can also be expressed in JavaScript form, the same way as you would write them in a project file. Make sure to take care of proper quoting, so that the shell does not interpret any of the values itself. Properties of type <code>stringList</code> can also be provided as comma-separated values, if none of the strings contain special characters: <pre><code>$ qbs projects.someProject.listProp:'[\"a\", \"b\", \"c\"]'\n$ qbs projects.someProject.listProp:a,b,c               # same as above\n$ qbs projects.someProject.listProp:'[\"a b\", \"c\"]'      # no CSV equivalent\n</code></pre></p>"},{"location":"getting-started/usage/Language%20Introduction/#file-tags-and-taggers","title":"File Tags and Taggers","text":"<p>Qbs itself knows nothing about C++ files or file extensions. All source files in a product are handled equally. However, you can assign <code>file tags</code> to an artifact to act as a marker or to specify a file type.</p> <p>An artifact can have multiple file tags. For example, you can use the <code>Group</code> item to group files with the same file tags (or a set of properties).</p> <pre><code>Product {\n    Group {\n        files: [\"file1.cpp\", \"file2.cpp\"]\n        fileTags: [\"cpp\"]\n    }\n    Group {\n        files: \"mydsl_scanner.l\"\n        fileTags: [\"flex\", \"foobar\"]\n    }\n    // ...\n}\n</code></pre> <p>When you load the <code>cpp</code> module, you also load the following item: <pre><code>FileTagger {\n    patterns: \"*.cpp\"\n    fileTags: [\"cpp\"]\n}\n</code></pre> This construct means that each source file that matches the pattern <code>*.cpp</code> (and has not explicitly set a file tag) gets the file tag <code>cpp</code>.</p> <p>The above example can be simplified to <pre><code>Product {\n    Depends: \"cpp\"\n    files: [\"file1.cpp\", \"file2.cpp\"]\n    Group {\n        files: \"mydsl_scanner.l\"\n        fileTags: [\"flex\", \"foobar\"]\n    }\n    // ...\n}\n</code></pre></p> <p>The <code>FileTagger</code> from the <code>cpp</code> module automatically assigns the <code>cpp</code> file tag to the source files. Groups that just contain the <code>files</code> property can be more simply expressed by using the <code>files</code> property of the product.</p> <p>File tags are used by <code>rules</code> to transform one type of artifact into another. For instance, the C++ compiler rule transforms artifacts with the file tag <code>cpp</code> to artifacts with the file tag <code>obj</code>.</p> <p>In addition, it is possible to use file taggers to tag files and specify custom file tags: <pre><code>Product {\n    Depends: \"cpp\"\n    Group {\n        overrideTags: false     // The overrideTags property defaults to true.\n        fileTags: [\"foobar\"]\n        files: [\"main.cpp\"]     // Gets the file tag \"cpp\" through a FileTagger item and\n                                // \"foobar\" from this group's fileTags property.\n    }\n    // ...\n}\n</code></pre></p>"},{"location":"getting-started/usage/Language%20Introduction/#rules","title":"Rules","text":"<p>Qbs applies a rule to a pool of artifacts (in the beginning it is just the set of source files of the project) and chooses the ones that match the input file tags specified by the rule. Then it creates output artifacts in the build graph that have other filenames and file tags. It also creates a script that transforms the input artifacts into the output artifacts. Artifacts created by one rule can (and typically do) serve as inputs to another rule. In this way, rules are connected to one another via their input and output file tags.</p> <p>For examples of rules, see the <code>share/qbs/modules</code> directory in the Qbs repository.</p> <p>You can define rules in your own module to be provided along with your project. Or you can put a rule directly into your project file.</p> <p>For more information, see Rule.</p>"},{"location":"getting-started/usage/Module%20Providers/","title":"Module Providers","text":"<p>There are use cases for which a pre-defined module is not flexible enough. For instance, the overall set of modules related to a certain task might depend on some information present on the local platform.</p> <p>Use Module Providers to create new modules during the <code>resolve</code> stage, for example when locating external dependencies such as libraries.</p> <p>Consider the following example:</p> <p><pre><code>CppApplication {\n    files: \"main.cpp\"\n    Depends { name: \"zlib\" }\n    qbsModuleProviders: [\"conan\", \"qbspkgconfig\"]\n}\n</code></pre> Here, we want to use the zlib compression library in our application. Since there is no pre-defined module called <code>\"zlib\"</code>, Qbs will try to create it using Module Providers. Qbs will invoke all providers specified in the qbsModuleProviders property and those providers will create the requested module if possible. Providers contribute to the qbsSearchPaths in the order specified by this property, so modules generated by providers specified earlier are prioritised. In the example above, modules created by the conan provider have higher priority than modules created by <code>qbspkgconfig</code>.</p>"},{"location":"getting-started/usage/Module%20Providers/#lookup-based-on-module-name","title":"Lookup Based on Module Name","text":"<p>Originally, the Qt module provider was a the only provider in Qbs and we wanted to make its usage transparent to users. Thus, it was implemented by automatically kicking in when Qbs saw the dependency on the <code>Qt</code> module such as \"Qt.core\". It is also possible to specify the order of providers explicitly: <pre><code>CppApplication {\n    files: \"main.cpp\"\n    Depends { name: \"Qt.core\" }\n    qbsModuleProviders: [\"Qt\", \"qbspkgconfig\"]\n}\n</code></pre> That way, users have more control over the module priorities.</p> <p>Note that setting the <code>qbsModuleProviders</code> property disables the lookup based on the module name entirely.</p>"},{"location":"getting-started/usage/Module%20Providers/#provider-eagerness","title":"Provider Eagerness","text":"<p>Historically, providers were implemented in an eager way meaning that once a provider is called, it creates as many modules as it can. For example, when called, the qbspkgconfig provider created a module for each .pc file found in the system. Even though providers are quite fast, this violates the zero-overhead principle (you don't pay for what you don't use). Thus, we introduced non-eager providers which only create one module at a time when that module is requested by the Depends item. This behavior is controlled by the isEager property. We advise against using eager providers in new code.</p>"},{"location":"getting-started/usage/Module%20Providers/#selecting-module-providers","title":"Selecting Module Providers","text":"<p>As described above, you can select which providers to run using the qbsModuleProviders property. This property can be set on the Product as well as the Project level:</p> <pre><code>$ qbs resolve project.qbsModuleProviders:providerA    \\ # sets property globally for the Project\n    projects.SomeProject.qbsModuleProviders:providerB \\ # overrides property for the specific Project\n    products.SomeProduct.qbsModuleProviders:providerC \\ # overrides property for the specific Product\n</code></pre>"},{"location":"getting-started/usage/Module%20Providers/#parameterizing-module-providers","title":"Parameterizing Module Providers","text":"<p>You can pass information to module providers from the command line, via profiles or from within a product, in a similar way as you would do for modules. For instance, the following invocation of Qbs passes information to two module providers <code>a</code> and <code>b</code>: <pre><code>$ qbs moduleProviders.a.p1:true moduleProviders.a.p2:true moduleProviders.b.p:false\n</code></pre> Qbs will set the properties of the respective module providers accordingly. In the above example, module provider <code>a</code> needs to declare two boolean properties <code>p1</code> and <code>p2</code>, and they will be set to <code>true</code> and <code>false</code>, respectively.</p> <p>Note</p> <p>The following section contains some implementation details. Reading this section is not required for most people's everyday work.</p>"},{"location":"getting-started/usage/Module%20Providers/#how-qbs-uses-module-providers","title":"How Qbs Uses Module Providers","text":"<p>If Qbs encounters a Depends item whose name does not match a known module, it checks whether such a module can be generated. This procedure works as follows:</p> <ol> <li>If the qbsModuleProviders property is not         <code>undefined</code>, for each provider name in the list, all         search paths are scanned for a file called         <code>module-providers/&lt;name&gt;.qbs</code> or <code>module-providers/&lt;name&gt;/provider.qbs</code>.</li> <li>If the qbsModuleProviders property is <code>undefined</code>,         search paths are scanned for a file called         <code>module-providers/&lt;name&gt;/provider.qbs</code>, where <code>&lt;name&gt;</code> is the name of the dependency         as specified in the <code>Depends</code> item. Multi-component names such as \"a.b\" are turned         into nested directories, and each of them is scanned, starting with the deepest path.         For instance, if the dependency's name is <code>a.b</code>, then Qbs will look for         <code>a/b/provider.qbs</code> and then <code>a/provider.qbs</code>.</li> <li>If such a file is found, it needs to contain a ModuleProvider item. This item         is instantiated, which potentially leads to the creation of one or more modules,         and Qbs retrieves the search paths to find these modules from the item.         The details are described in the ModuleProvider documentation.</li> <li>If a matching module provider was found and provided new search paths,         a second attempt will be made to locate the dependency using the new paths.         The search for a matching module provider ends as soon as one was found, regardless         of whether it created any modules or not.</li> </ol>"},{"location":"getting-started/usage/Multiplexing/","title":"Multiplexing","text":"<p>Multiplexing is an advanced Qbs feature that allows a product to be transparently built in multiple passes along with an optional, final aggregate pass that allows the output artifacts of the initial passes to be combined or otherwise operated on in some way.</p> <p>The multiplexing feature is used to implement certain platform-specific behavior: specifically, it allows applications and libraries on Apple platforms to be compiled into fat binaries containing multiple CPU architectures, the creation of Apple frameworks containing multiple variants (for example, combined debug and release builds), and the creation of Android application and library packages containing native code built for multiple Android ABIs.</p> <p>A product can be multiplexed over the qbs.architectures property (which maps to qbs.architecture), qbs.buildVariants property (which maps to qbs.buildVariant), and qbs.profiles (which maps to Project.profile).</p> <p>For example, to build a \"fat\" <code>iOS</code> binary containing two architectures, use the following command: <pre><code>qbs build modules.qbs.targetPlatform:ios modules.qbs.architectures:arm64,armv7a\n</code></pre></p> <p>Note</p> <p>The implementation details around multiplexing are subject to change.</p> <p>Product multiplexing works by examining the Product.multiplexByQbsProperties property, which can be set to the list of properties your product should multiplex over. For example, <code>multiplexByQbsProperties</code> might contain two strings, <code>\"architectures\"</code> and <code>\"buildVariants\"</code>. Qbs evaluates the values of <code>qbs.architectures</code> and <code>qbs.buildVariants</code>, which in turn might contain the values <code>[\"x86\", \"x86_64\"]</code> and <code>[\"debug\", \"release\"]</code>. Qbs will build all the possible configurations of the product: <code>(x86, debug)</code>, <code>(x86, release)</code>, <code>(x86_64, debug)</code>, and <code>(x86_64, release)</code>.</p> <p>If the Product.aggregate property is <code>true</code>, the product will also be built a fifth time, with the values of the multiplexed properties left undefined. The aggregate product will have an automatic dependency on the original four instances of the product, allowing it to collect their output artifacts and to operate on them.</p> <p>The aggregate product is used in situations where the target artifacts of the individually multiplexed instances must be combined into one final aggregate artifact that makes up the overall product. Bundle products on Apple platforms use the aggregate product to create the bundle artifacts (such as <code>Info.plist</code> and <code>PkgInfo</code>) that are independent of a particular architecture or build variant. In addition, they use the <code>lipo</code> tool to join together the built native code for different architectures (such as <code>x86</code> and <code>x86_64</code>) into the final, multi-architecture fat binary that the app bundle contains.</p>"},{"location":"getting-started/usage/Running%20Applications/","title":"Running Applications","text":"<p>Qbs has the convenience qbs run command that simplifies running applications.</p> <p>For example, entering the following command runs the Qt Creator application:</p> <pre><code>qbs run --products qtcreator\n</code></pre> <p>By default, running an application also builds it and installs it to a location from where it can be run on the desktop or on a device. Also, this command sets up the environment so that the application can find dependent libraries.</p> <p>This is not the case when running the binary manually - you'll have to make sure that the app will find its dependencies and/or is relocatable. You can achieve that by configuring rpaths properly or setting the appropriate environment variable for the respective host system.</p>"},{"location":"getting-started/usage/Special%20Property%20Values/","title":"Special Property Values","text":"<p>Depending on the context, Qbs provides the following special values for use in property bindings and JavaScript code:</p> <ul> <li><code>base</code></li> <li><code>exportingProduct</code></li> <li><code>filePath</code></li> <li><code>importingProduct</code></li> <li><code>module</code></li> <li><code>original</code></li> <li><code>outer</code></li> <li><code>path</code></li> <li><code>product</code></li> <li><code>project</code></li> </ul>"},{"location":"getting-started/usage/Special%20Property%20Values/#base","title":"<code>base</code>","text":"<p>This value is useful when making use of inheritance. It stands for the value of the respective property in the item one level up in the inheritance chain. For instance: MyProduct.qbs<pre><code>Product {\n    Depends { name: \"mymodule\" }\n    mymodule.someProperty: [\"value1\"]\n}\n</code></pre> and then in some other file: <pre><code>MyProduct {\n    mymodule.someProperty: base.concat([\"value2\"]) // (1)\n}\n</code></pre></p> <ol> <li><code>[\"value1\", \"value2\"]</code></li> </ol>"},{"location":"getting-started/usage/Special%20Property%20Values/#exportingproduct","title":"<code>exportingProduct</code>","text":"<p>Within an Export item, you can use the <code>exportingProduct</code> variable to refer to the product which defines the Export item:</p> <pre><code>Product {\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: exportingProduct.sourceDirectory\n    }\n}\n</code></pre>"},{"location":"getting-started/usage/Special%20Property%20Values/#filepath","title":"<code>filePath</code>","text":"<p>This value holds the full file path to the <code>.qbs</code> file it appears in. This property is rarely used, but might be useful when debugging: <pre><code>Product {\n    property bool dummy: {\n        console.info(\"I'm located at \" + filePath);\n    }\n}\n</code></pre></p>"},{"location":"getting-started/usage/Special%20Property%20Values/#importingproduct","title":"<code>importingProduct</code>","text":"<p>Within an Export item, you can use the <code>importingProduct</code> variable to refer to the product that pulls in the resulting module:</p> <p><pre><code>Product {\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: importingProduct.buildDirectory\n    }\n}\n</code></pre> Usually, you should use the product variable instead for consistency with Module items.</p>"},{"location":"getting-started/usage/Special%20Property%20Values/#module","title":"<code>module</code>","text":"<p>This value holds the properties of the module that contains the current item: <pre><code>Module {\n    property bool enableGroup\n    property bool enableRule\n    Group {\n        condition: enableGroup // (1)\n        Rule {\n            condition: module.enableRule // (2)\n            // ...\n        }\n    }\n}\n</code></pre></p> <ol> <li>Available without qualification because Module is a direct parent item.</li> <li>Shortcut for <code>product.&lt;module name&gt;.enableRule</code></li> </ol>"},{"location":"getting-started/usage/Special%20Property%20Values/#original","title":"<code>original</code>","text":"<p>On the right-hand side of a module property binding, this refers to the value of the property in the module itself (possibly overridden from a profile). Use it to set a module property conditionally: mymodule/mymodule.qbs<pre><code>Module {\n    property string aProperty: \"z\"\n}\n</code></pre> <pre><code>Product {\n    Depends { name: \"mymodule\" }\n    Depends { name: \"myothermodule\" }\n    // `y` if myothermodule.anotherProperty is `x`, `z` otherwise:\n    mymodule.aProperty: myothermodule.anotherProperty === \"x\" ? \"y\" : original\n}\n</code></pre></p> <p>Note</p> <p>In all but the most exotic cases, a Properties item is the preferred way to   achieve the same result:</p> <pre><code>Product {\n    Depends { name: \"mymodule\" }\n    Depends { name: \"myothermodule\" }\n    Properties {\n        condition: myothermodule.anotherProperty === \"x\"\n        mymodule.aProperty: \"y\"\n    }\n}\n</code></pre>"},{"location":"getting-started/usage/Special%20Property%20Values/#outer","title":"<code>outer</code>","text":"<p>This value is used in nested items, where it refers to the value of the respective property in the surrounding item. It is only valid in Group and Properties items: <pre><code>Product {\n    Depends { name: \"mymodule\" }\n    mymodule.someProperty: [\"value1\"]\n    Group {\n        name: \"special files\"\n        files: [\"somefile1\", \"somefile2\"]\n        mymodule.someProperty: outer.concat([\"value\"])  // (1)\n    }\n}\n</code></pre></p> <ol> <li><code>[\"value1\", \"value2\"]</code></li> </ol>"},{"location":"getting-started/usage/Special%20Property%20Values/#path","title":"<code>path</code>","text":"<p>This value holds the path to the folder where the <code>.qbs</code> file is located. Use it to e.g. add the product's directory to file paths: <pre><code>Product {\n    Depends { name: \"cpp\" }\n    cpp.includePaths: path\n}\n</code></pre></p>"},{"location":"getting-started/usage/Special%20Property%20Values/#product","title":"<code>product</code>","text":"<p>This value holds the properties of the product that contains the current item or pulls in the current module: <pre><code>Module {\n    Rule {\n        Artifact {\n            fileTags: product.type\n            filePath: {\n                var result = input.fileName;\n                // module properties are available as well\n                if (product.qbs.buildVariant === \"debug\")\n                    result = result + \"_debug\";\n                result = result + \".out\";\n                return result;\n            }\n        }\n    }\n}\n</code></pre> Within the Export item, same as importingProduct.</p>"},{"location":"getting-started/usage/Special%20Property%20Values/#project","title":"<code>project</code>","text":"<p>This value holds the properties of the project that references the current item or pulls in the current module: <pre><code>Project {\n    property bool enableProduct: true\n    Product {\n        name: \"theProduct\"\n        condition: project.enableProduct\n    }\n}\n</code></pre> If the nearest project in the project tree does not have the desired property, Qbs looks it up in the parent project, potentially all the way up to the top-level project.</p>"},{"location":"getting-started/usage/Using%20the%20Shell/","title":"Using the Shell","text":"<p>To use the Qbs shell, enter the following command:</p> <pre><code>qbs shell\n</code></pre> <p>This is mainly a debugging tool. It opens a shell with the same environment that Qbs uses when building the project, so you can, for example, inspect which environment variables will be set up.</p>"},{"location":"getting-started/usage/targets/","title":"Target Platforms","text":"<p>Qbs has built-in support for building applications for all major platforms. Platform support is implemented as a set of modules that products depend on. The following topics describe the features specific to a particular platform, point out things to look out for, and provide tips for fully benefiting from the Qbs functions.</p> <p>In addition to the platforms explicitly listed below, Qbs should generally work on other UNIX and Unix-like platforms but these are not regularly tested or officially supported.</p> <p>Qbs recognizes the existence of at least AIX, HP-UX, Solaris, FreeBSD, NetBSD, OpenBSD, GNU Hurd, and Haiku, but provides no explicit support (except some minimal support for FreeBSD).</p> <p>For instructions on how to setup the target platform, see the qbs.targetPlatform property.</p>"},{"location":"getting-started/usage/targets/Android/","title":"Building for Android","text":"<p>To develop applications for Android, you need development tools provided by the Android SDK from Google, and (optionally) a C/C++ toolchain provided by the Android NDK.</p> <p>Note</p> <p>Qbs does not yet support the Kotlin programming language.</p>"},{"location":"getting-started/usage/targets/Android/#creating-android-application-packages","title":"Creating Android Application Packages","text":"<p>On Android, applications are distributed in a specially structured type of ZIP package called an APK. The following files should be created and bundled into an APK:</p> <ul> <li>Android assets.</li> <li>Android resource files.</li> <li>AndroidManifest.xml, which provides meta-information about your         application.</li> <li>Compiled Java code, which serves as the entry point into your         application and that automatically executes the native code in your         application (if there is any).</li> <li>Shared libraries containing native code.</li> </ul> <p>You can use the Application item to build application packages for Android.</p> <p>If the target platform is <code>\"android\"</code>, then the Application item has a dependency on the Android.sdk module, which contains the properties and rules to create Android application packages from source files.</p> <p>You can use the DynamicLibrary item to build native Android libraries that are bundled into the APK. The <code>qbs.architectures</code> property specifies the architectures to build for, with the default value <code>armv7a</code>. If you have only one native library, you can simply list its sources within the main Application item, and it will get built and packaged automatically.</p> <p>The DynamicLibrary item, as well as the CppApplication item, has a dependency on the Android.ndk module, and contains the properties and rules to create native libraries.</p>"},{"location":"getting-started/usage/targets/INTEGRITY/","title":"Building for INTEGRITY","text":"<p>The Green Hills INTEGRITY RTOS is not yet supported but is planned for a future release.</p> <p>For more information about developing applications for the Green Hills INTEGRITY RTOS, see the INTEGRITY Product Documentation.</p>"},{"location":"getting-started/usage/targets/Linux/","title":"Building for Linux","text":"<p>To develop applications for Linux, you need a GCC or Clang toolchain installed on your host machine.</p>"},{"location":"getting-started/usage/targets/QNX/","title":"Building for QNX","text":"<p>To develop applications for the QNX Neutrino RTOS, you need to install the QNX Software Development Platform (SDP) on a Linux, macOS, or Windows development host. You can deploy the QNX Neutrino RTOS on a target system, such as embedded hardware, a virtual machine, or a PC.</p> <p>Qbs automatically determines the location of the SDP base directory if the SDP is installed at one of the standard locations, such as <code>~/qnx700</code>, <code>/opt/qnx700</code>, or <code>C:\\qnx700</code>. In addition, Qbs uses the SDP and the information it has about the host operating system to determine the location of the QNX host and target directories.</p> <p>If the QNX SDP path could not be determined automatically, you must add a dependency to the qnx module to your application and set the qnx.sdkDir property:</p> <pre><code>Application {\n    name: \"helloworld\"\n    files: \"main.cpp\"\n    Depends { name: \"cpp\" }\n\n    Depends { name: \"qnx\" }\n    qnx.sdkDir: \"/path/to/qnx700\"\n}\n</code></pre> <p>Alternatively, you can set the <code>qnx.sdkDir</code> property in a profile or on the command line.</p> <p>Qbs supports QNX SDP version 6.5 and above.</p> <p>For more information about developing applications for the QNX Neutrino RTOS, see the QNX Product Documentation.</p>"},{"location":"getting-started/usage/targets/VxWorks/","title":"Building for VxWorks","text":"<p>The Wind River VxWorks RTOS is not yet supported but is planned for a future release.</p> <p>For more information about developing applications for the WindRiver VxWorks RTOS, see the VxWorks Product Documentation.</p>"},{"location":"getting-started/usage/targets/Windows/","title":"Building for Windows","text":"<p>This topic describes the Qbs features specific to Windows.</p> <p>Note</p> <p>Qbs does not currently support building applications using .NET</p> <p>technologies and languages such as C#, F#, and Visual Basic. At this time we recommend that you use MSBuild and the tools shipped with the various implementations of the .NET platform.</p>"},{"location":"getting-started/usage/targets/Windows/#windows-resources","title":"Windows Resources","text":"<p>The ico module contains rules and properties for building Windows icon (.ico) and cursor (.cur) files from a set of raw PNGs.</p>"},{"location":"getting-started/usage/targets/Windows/#universal-windows-platform","title":"Universal Windows Platform","text":"<p>Building applications for the Universal Windows Platform is currently only partially supported. Notably, support for building APPX packages is missing, but will be added in a future release.</p> <p>Relevant properties include:</p> <ul> <li>cpp.windowsApiFamily</li> <li>cpp.windowsApiAdditionalPartitions</li> <li>cpp.requireAppContainer</li> </ul> <p>See the cpp module for more information.</p> <p>Note</p> <p>Qbs does not (and will not) support building Windows Runtime</p> <p>applications targeting Windows 8 or Windows 8.1. We encourage users to instead build desktop applications for older versions of Windows, or migrate to Windows 10 and the Universal Windows Platform.</p>"},{"location":"getting-started/usage/targets/Windows/#building-windows-installers","title":"Building Windows Installers","text":"<p>The following modules contain properties and rules for building Windows installers using a number of different technologies:</p> <ul> <li>innosetup - Inno Setup</li> <li>nsis - Nullsoft Scriptable Install System</li> <li>wix - Windows Installer XML Toolset</li> </ul>"},{"location":"getting-started/usage/targets/iOS/","title":"Building for iOS","text":"<p>This topic describes the Qbs features specific to iOS.</p> <p>Note</p> <p>Qbs does not yet support the Swift programming language.</p> <p>The xcode module contains properties and rules for Xcode-based development.</p>"},{"location":"getting-started/usage/targets/iOS/#building-user-interfaces","title":"Building User Interfaces","text":"<p>The ib module contains properties and rules for building Interface Builder documents, storyboards, asset catalogs, and icon sets.</p>"},{"location":"getting-started/usage/targets/iOS/#creating-app-bundles","title":"Creating App Bundles","text":"<p>The bundle module contains properties and rules for building and working with Core Foundation bundles (application bundles and frameworks) on Apple platforms.</p> <p>To build an application product as a bundle, or a dynamic or static library product as a framework, add a dependency on the bundle module and set the bundle.isBundle property to <code>true</code>:</p> <pre><code>Depends { name: \"bundle\" }\nbundle.isBundle: true\n</code></pre> <p>Qbs also provides a number of powerful features to assist in creating the Info.plist file that is part of your bundle. In fact, you do not need to provide an Info.plist file at all. Instead, Qbs will generate one automatically with the necessary keys, based on the values of module properties set in the product.</p> <p>If you do specify an Info.plist file, Qbs may still inject additional keys into the final output from other sources. One notable source of Info.plist keys are partial Info.plist files which are generated as a result of compiling other resources like asset catalogs, XIBs/NIBs, and storyboards.</p> <p>You may also use the <code>bundle.infoPlist</code> property to apply a set of key-value pairs to be added to the final Info.plist. This can be used instead of or in addition to an actual Info.plist file on disk.</p>"},{"location":"getting-started/usage/targets/iOS/#multiple-architectures-and-build-variants","title":"Multiple Architectures and Build Variants","text":"<p>Qbs uses multiplexing to create multi-architecture fat binaries and multi-variant frameworks, where a single framework can contain both a release and debug build of a library on Apple platforms.</p> <p>You can set the <code>qbs.architectures</code> property to a list of CPU architectures (such as <code>x86</code>, <code>x86_64</code>, <code>armv7a</code>, <code>armv7k</code>, and <code>arm64</code>), and the <code>qbs.buildVariants</code> property to a list of build variants (such as <code>debug</code> and <code>release</code>), and Qbs will transparently perform the necessary steps to produce the various artifacts and combine them into a single bundle.</p> <p>Since the individual build configurations are completely independent of one another, you can continue to use conditional branches in your projects such as the following:</p> <pre><code>Properties {\n    condition: qbs.buildVariant === \"release\"\n    cpp.optimization: \"small\"\n}\n</code></pre>"},{"location":"getting-started/usage/targets/macOS/","title":"Building for macOS","text":"<p>This topic describes the Qbs features specific to macOS.</p> <p>Note</p> <p>Qbs does not yet support the Swift programming language.</p> <p>The xcode module contains properties and rules for Xcode-based development.</p>"},{"location":"getting-started/usage/targets/macOS/#building-user-interfaces","title":"Building User Interfaces","text":"<p>The ib module contains properties and rules for building Interface Builder documents, storyboards, asset catalogs, and icon sets.</p>"},{"location":"getting-started/usage/targets/macOS/#creating-app-bundles","title":"Creating App Bundles","text":"<p>The bundle module contains properties and rules for building and working with Core Foundation bundles (application bundles and frameworks) on Apple platforms.</p> <p>To build an application product as a bundle, or a dynamic or static library product as a framework, add a dependency on the bundle module and set the bundle.isBundle property to <code>true</code>:</p> <pre><code>Depends { name: \"bundle\" }\nbundle.isBundle: true\n</code></pre> <p>Qbs also provides a number of powerful features to assist in creating the Info.plist file that is part of your bundle. In fact, you do not need to provide an Info.plist file at all. Instead, Qbs will generate one automatically with the necessary keys, based on the values of module properties set in the product.</p> <p>If you do specify an Info.plist file, Qbs may still inject additional keys into the final output from other sources. One notable source of Info.plist keys are partial Info.plist files which are generated as a result of compiling other resources like asset catalogs, XIBs/NIBs, and storyboards.</p> <p>You may also use the <code>bundle.infoPlist</code> property to apply a set of key-value pairs to be added to the final Info.plist. This can be used instead of or in addition to an actual Info.plist file on disk.</p>"},{"location":"getting-started/usage/targets/macOS/#multiple-architectures-and-build-variants","title":"Multiple Architectures and Build Variants","text":"<p>Qbs uses multiplexing to create multi-architecture fat binaries and multi-variant frameworks, where a single framework can contain both a release and debug build of a library on Apple platforms.</p> <p>You can set the <code>qbs.architectures</code> property to a list of CPU architectures (such as <code>x86</code>, <code>x86_64</code>, <code>armv7a</code>, <code>armv7k</code>, and <code>arm64</code>), and the <code>qbs.buildVariants</code> property to a list of build variants (such as <code>debug</code> and <code>release</code>), and Qbs will transparently perform the necessary steps to produce the various artifacts and combine them into a single bundle.</p> <p>Since the individual build configurations are completely independent of one another, you can continue to use conditional branches in your projects such as the following:</p> <pre><code>Properties {\n    condition: qbs.buildVariant === \"release\"\n    cpp.optimization: \"small\"\n}\n</code></pre>"},{"location":"getting-started/usage/targets/macOS/#building-macos-disk-images","title":"Building macOS Disk Images","text":"<p>The AppleDiskImage and AppleApplicationDiskImage items have a dependency on the dmg module. The former represents a product that is a basic Apple disk image, while the latter extends the former to create a drag 'n' drop disk image installer used for installing single application bundles.</p> <p>For example, the following code snippet creates a macOS disk image with a custom background and icon layout:</p> <pre><code>AppleApplicationDiskImage {\n    targetName: \"cocoa-application-\" + version\n    version: \"1.0\"\n\n    files: [\n        \"CocoaApplication/dmg.iconset\",\n        \"CocoaApplication/en_US.lproj/LICENSE\",\n        // comment out the following line to use a solid-color background\n        // (see dmg.backgroundColor below)\n        \"CocoaApplication/background*\"\n    ]\n\n    dmg.backgroundColor: \"#41cd52\"\n    dmg.badgeVolumeIcon: true\n    dmg.iconPositions: [\n        {\"x\": 200, \"y\": 200, \"path\": \"Cocoa Application.app\"},\n        {\"x\": 400, \"y\": 200, \"path\": \"Applications\"}\n    ]\n    dmg.windowX: 420\n    dmg.windowY: 250\n    dmg.windowWidth: 600\n    dmg.windowHeight: 422 // this includes the macOS title bar height of 22\n    dmg.iconSize: 64\n}\n</code></pre> <p>In addition, Qbs supports multi-language license agreement prompts that appear when the DMG is opened, with full Unicode and rich-text formatting support.</p>"},{"location":"getting-started/usage/targets/tvOS/","title":"Building for tvOS","text":"<p>This topic describes the Qbs features specific to tvOS.</p> <p>Note</p> <p>Qbs does not yet support the Swift programming language.</p> <p>The xcode module contains properties and rules for Xcode-based development.</p>"},{"location":"getting-started/usage/targets/tvOS/#building-user-interfaces","title":"Building User Interfaces","text":"<p>The ib module contains properties and rules for building Interface Builder documents, storyboards, asset catalogs, and icon sets.</p>"},{"location":"getting-started/usage/targets/tvOS/#creating-app-bundles","title":"Creating App Bundles","text":"<p>The bundle module contains properties and rules for building and working with Core Foundation bundles (application bundles and frameworks) on Apple platforms.</p> <p>To build an application product as a bundle, or a dynamic or static library product as a framework, add a dependency on the bundle module and set the bundle.isBundle property to <code>true</code>:</p> <pre><code>Depends { name: \"bundle\" }\nbundle.isBundle: true\n</code></pre> <p>Qbs also provides a number of powerful features to assist in creating the Info.plist file that is part of your bundle. In fact, you do not need to provide an Info.plist file at all. Instead, Qbs will generate one automatically with the necessary keys, based on the values of module properties set in the product.</p> <p>If you do specify an Info.plist file, Qbs may still inject additional keys into the final output from other sources. One notable source of Info.plist keys are partial Info.plist files which are generated as a result of compiling other resources like asset catalogs, XIBs/NIBs, and storyboards.</p> <p>You may also use the <code>bundle.infoPlist</code> property to apply a set of key-value pairs to be added to the final Info.plist. This can be used instead of or in addition to an actual Info.plist file on disk.</p>"},{"location":"getting-started/usage/targets/tvOS/#multiple-architectures-and-build-variants","title":"Multiple Architectures and Build Variants","text":"<p>Qbs uses multiplexing to create multi-architecture fat binaries and multi-variant frameworks, where a single framework can contain both a release and debug build of a library on Apple platforms.</p> <p>You can set the <code>qbs.architectures</code> property to a list of CPU architectures (such as <code>x86</code>, <code>x86_64</code>, <code>armv7a</code>, <code>armv7k</code>, and <code>arm64</code>), and the <code>qbs.buildVariants</code> property to a list of build variants (such as <code>debug</code> and <code>release</code>), and Qbs will transparently perform the necessary steps to produce the various artifacts and combine them into a single bundle.</p> <p>Since the individual build configurations are completely independent of one another, you can continue to use conditional branches in your projects such as the following:</p> <pre><code>Properties {\n    condition: qbs.buildVariant === \"release\"\n    cpp.optimization: \"small\"\n}\n</code></pre>"},{"location":"getting-started/usage/targets/watchOS/","title":"Building for watchOS","text":"<p>This topic describes the Qbs features specific to watchOS.</p> <p>Note</p> <p>Qbs does not yet support the Swift programming language.</p> <p>The xcode module contains properties and rules for Xcode-based development.</p>"},{"location":"getting-started/usage/targets/watchOS/#building-user-interfaces","title":"Building User Interfaces","text":"<p>The ib module contains properties and rules for building Interface Builder documents, storyboards, asset catalogs, and icon sets.</p>"},{"location":"getting-started/usage/targets/watchOS/#creating-app-bundles","title":"Creating App Bundles","text":"<p>The bundle module contains properties and rules for building and working with Core Foundation bundles (application bundles and frameworks) on Apple platforms.</p> <p>To build an application product as a bundle, or a dynamic or static library product as a framework, add a dependency on the bundle module and set the bundle.isBundle property to <code>true</code>:</p> <pre><code>Depends { name: \"bundle\" }\nbundle.isBundle: true\n</code></pre> <p>Qbs also provides a number of powerful features to assist in creating the Info.plist file that is part of your bundle. In fact, you do not need to provide an Info.plist file at all. Instead, Qbs will generate one automatically with the necessary keys, based on the values of module properties set in the product.</p> <p>If you do specify an Info.plist file, Qbs may still inject additional keys into the final output from other sources. One notable source of Info.plist keys are partial Info.plist files which are generated as a result of compiling other resources like asset catalogs, XIBs/NIBs, and storyboards.</p> <p>You may also use the <code>bundle.infoPlist</code> property to apply a set of key-value pairs to be added to the final Info.plist. This can be used instead of or in addition to an actual Info.plist file on disk.</p>"},{"location":"getting-started/usage/targets/watchOS/#multiple-architectures-and-build-variants","title":"Multiple Architectures and Build Variants","text":"<p>Qbs uses multiplexing to create multi-architecture fat binaries and multi-variant frameworks, where a single framework can contain both a release and debug build of a library on Apple platforms.</p> <p>You can set the <code>qbs.architectures</code> property to a list of CPU architectures (such as <code>x86</code>, <code>x86_64</code>, <code>armv7a</code>, <code>armv7k</code>, and <code>arm64</code>), and the <code>qbs.buildVariants</code> property to a list of build variants (such as <code>debug</code> and <code>release</code>), and Qbs will transparently perform the necessary steps to produce the various artifacts and combine them into a single bundle.</p> <p>Since the individual build configurations are completely independent of one another, you can continue to use conditional branches in your projects such as the following:</p> <pre><code>Properties {\n    condition: qbs.buildVariant === \"release\"\n    cpp.optimization: \"small\"\n}\n</code></pre>"},{"location":"reference/latest/","title":"Reference","text":"<ul> <li>List of All Items<ul> <li>List of Language Items</li> <li>List of Convenience Items</li> <li>List of Probes</li> </ul> </li> <li>List of Built-in Services</li> <li>Command-Line Interface</li> <li>List of Modules</li> <li>List of Module Providers</li> <li>Command and JavaScriptCommand</li> </ul>"},{"location":"tutorial/","title":"Tutorial","text":"<p>The tutorial describes the process of creating a typical Qbs project and explains core concepts.</p> <ol> <li>Console Application</li> <li>Static Library</li> <li>Dynamic Library</li> <li>Convenience Items</li> <li>Autotest</li> <li>Project Properties</li> <li>Buildconfig Module</li> <li>Configurable Library</li> <li>Version Header</li> <li>C++20 Modules</li> </ol>"},{"location":"tutorial/1.%20Console%20Application/","title":"Console Application","text":"<p>Let's start with a mandatory Hello World example. There is a Hello World example in the overview section, but this time we will create a real-world project.</p> <p>We will start with a simple Qbs project file: myproject.qbs<pre><code>Project {\n   name: \"My Project\"\n   minimumQbsVersion: \"2.0\"\n   references: [\n       \"app/app.qbs\"\n   ]\n}\n</code></pre> Here, we set the name of the project to <code>\"My Project\"</code> \u2013 it is mainly used for IDEs but can also be used to reference a project when setting properties from command-line. We also set the minimumQbsVersion \u2013 this property can be useful if the project depends on features that are not present in earlier Qbs versions.</p> <p>The references property contains the path to a file that describes our application. This file is located in a separate <code>app</code> directory \u2013 typically, projects tend to have quite a complicated structure but Qbs does not enforce any specific layout, so we will simply put each product in a separate directory.</p> <p>The application file sets several properties: app/app.qbs<pre><code>CppApplication {\n    name: \"My Application\"\n    targetName: \"myapp\"\n    files: \"main.c\"\n    version: \"1.0.0\"\n\n    consoleApplication: true\n    install: true\n    installDebugInformation: true\n}\n</code></pre> The name property identifies the product. The targetName property sets the name of the resulting binary (without the <code>.exe</code> extension on Windows, which is appended automatically). By default, targetName defaults to name. The files property contains a single <code>main.c</code> file which is a trivial hello world application: app/main.c<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Hello, world\\n\");\n    return 0;\n}\n</code></pre> We set consoleApplication to <code>true</code> to indicate that our application is going to be used from a terminal. For example, on Windows, this will spawn a new console window if you double-click the resulting binary, while on macOS it will create a standalone binary file instead of an application bundle.</p> <p>By default, the CppApplication.install property is <code>false</code> and thus Qbs does not install the binary. If the install property is <code>true</code>, when building a project, Qbs will also install it into an installation root folder which by default is named <code>install-root</code> and located under the build directory. This folder will contain only resulting artifacts without the build leftovers and files will have the same layout as in the target system. The install property should be set to <code>true</code> for all products that are to be distributed. See the Installing Files section for more details.</p> <p>We can now build and run our application from the project directory: <pre><code>chapter-1 $ qbs build\n...\nBuilding for configuration default\ncompiling main.c [My Application]\n...\nlinking myapp [My Application]\n...\nBuild done for configuration default.\n\nchapter-1 $ qbs run\n...\nStarting target. Full command line: .../default/install-root/usr/local/bin/myapp\nHello, world\n</code></pre></p> <p>The Qbs output to console and default installation location may vary between different platforms.</p> <p>In most cases, Qbs should be able to find the default compiler (for example, GCC or Clang on Linux, Visual Studio on Windows, or Xcode on macOS), but if that's not the case, see the configuring section.</p> <p>In the following chapters, we will continue to improve our project: we will add a library and make it configurable.</p>"},{"location":"tutorial/10.%20C%2B%2B20%20Modules/","title":"C++20 Modules","text":"<p>This tutorial implies you have some knowledge about C++20 modules. If not, see Overview of modules in C++ for introduction.</p>"},{"location":"tutorial/10.%20C%2B%2B20%20Modules/#named-modules","title":"Named Modules","text":"<p>Using C++20 modules with Qbs is pretty straightforward. Let's suppose you have a module file that exports a single function <code>printHello</code>:</p> hello.cppm<pre><code>module;\n\n#include &lt;iostream&gt;\n#include &lt;string_view&gt;\n\nexport module hello;\n\nexport namespace Hello {\n\nvoid printHello(std::string_view name)\n{\n    std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; '!' &lt;&lt; std::endl;\n}\n\n} // namespace Hello\n</code></pre> <p>Note</p> <p>Currently, Clang only recognizes <code>.cppm</code> files as modules, however, for GCC and MSVC Qbs also recognizes <code>.ixx</code> files as C++ modules. Qbs assigns the <code>\"cppm\"</code> file tag to these files. You can assign this tag manually to module files with different extensions.</p> <p>This function is later used in the <code>main.cpp</code> file as follows:</p> main.cpp<pre><code>import hello;\n\nint main()\n{\n    Hello::printHello(\"World\");\n}\n</code></pre> <p>The project file simply lists files and sets the cpp.forceUseCxxModules property to <code>true</code>.</p> myproject.qbs<pre><code>CppApplication {\n    consoleApplication: true\n    install: true\n    files: [\"hello.cppm\", \"main.cpp\"]\n    cpp.cxxLanguageVersion: \"c++20\"\n    cpp.forceUseCxxModules: true\n}\n</code></pre> <p>Now, you can build the project by simply calling <code>qbs</code>, assuming that your compiler supports C++20 modules.</p>"},{"location":"tutorial/10.%20C%2B%2B20%20Modules/#module-partitions","title":"Module Partitions","text":"<p>Module partitions are treated as regular modules and should also have the same extension or assigned the <code>\"cppm\"</code> tag manually. See this example on how to use both interface module and partitions.</p>"},{"location":"tutorial/10.%20C%2B%2B20%20Modules/#modules-and-libraries","title":"Modules and Libraries","text":"<p>Using modules in dynamic libraries requires using the same export/import macros as it was shown in the Dynamic Library section:</p> lib/hello.cppm<pre><code>module;\n\n#include \"lib_global.h\"\n#include &lt;iostream&gt;\n#include &lt;string_view&gt;\n\nexport module hello;\n\nexport namespace Hello {\n\nvoid MYLIB_EXPORT printHello(std::string_view name)\n{\n    std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; '!' &lt;&lt; std::endl;\n}\n\n} // namespace Hello\n</code></pre> <p>As shown in that section, the library <code>.qbs</code> file should also define the <code>MYLIB_LIBRARY</code> macro in order to mark symbols as exported:</p> lib/lib.qbs<pre><code>DynamicLibrary {\n    name: \"mylib\"\n    files: [\"hello.cppm\", \"lib_global.h\"]\n    version: \"1.0.0\"\n    install: true\n\n    Depends { name: \"cpp\" }\n    cpp.defines: \"MYLIB_LIBRARY\"\n    cpp.cxxLanguageVersion: \"c++20\"\n    cpp.forceUseCxxModules: true\n    // ...\n}\n</code></pre> <p>For more details, see the complete example.</p>"},{"location":"tutorial/2.%20Static%20Library/","title":"Static Library","text":"<p>Let's add a static library to our project so we can reuse some code. Analogous to what we did for the application, we put the file into the <code>lib</code> directory and add it to the references property in our project. The modified project may look like this:</p> myproject.qbs<pre><code>Project {\n   name: \"My Project\"\n   minimumQbsVersion: \"2.0\"\n   references: [\n       \"app/app.qbs\",\n       \"lib/lib.qbs\"\n   ]\n}\n</code></pre> <p>Let's take a look at the the library file now:</p> lib/lib.qbs<pre><code>StaticLibrary {\n    name: \"mylib\"\n    files: [\n        \"lib.c\",\n        \"lib.h\",\n    ]\n    version: \"1.0.0\"\n    install: true\n\n    Depends { name: 'cpp' }\n    cpp.defines: ['CRUCIAL_DEFINE']\n\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: [exportingProduct.sourceDirectory]\n    }\n\n    Depends { name: 'bundle' }\n    bundle.isBundle: false\n}\n</code></pre> <p>It contains the StaticLibrary item which sets the type of the product to <code>\"staticlibrary\"</code> and sets some defaults like where to install that library. As before, we set the files property with a header:</p> lib/lib.h<pre><code>#ifndef LIB_H\n#define LIB_H\n\nconst char *get_string();\n\n#endif // LIB_H\n</code></pre> <p>And we set the implementation file of our library:</p> lib/lib.c<pre><code>#include \"lib.h\"\n\n#ifndef CRUCIAL_DEFINE\n#   error CRUCIAL_DEFINE not defined\n#endif\n\nconst char *get_string()\n{\n    return \"Hello from library\";\n}\n</code></pre> <p>We will keep our library really simple \u2013 it only contains one function, which we will later use in our application. The source file requires a <code>\"CRUCIAL_DEFINE\"</code> to be passed to a preprocessor. That is why we set the cpp.defines property:</p> <pre><code>Depends { name: 'cpp' }\ncpp.defines: ['CRUCIAL_DEFINE']\n</code></pre> <p>Note that unlike the CppApplication item, the StaticLibrary does not pull in the dependency on the cpp module automatically \u2013 that is why we have to pull it in manually using the Depends item. Without the cpp module, Qbs would not know how to turn a <code>.c</code> file into an object file and the object file into a library. See Rules and Product Types for details.</p> <p>Next, we need to tell Qbs where to look for public headers of our library when building products that depend on it. By default, Qbs knows nothing about the layout of our library, so we tell it to look for headers in the library's source directory using the Export item:</p> <pre><code>Export {\n    Depends { name: \"cpp\" }\n    cpp.includePaths: [exportingProduct.sourceDirectory]\n}\n</code></pre> <p>You can export any Module property within the Export item \u2013 it will be merged in the depending product with other properties. For example, you can export cpp.defines or specific compiler flags that are required to use this product.</p> <p>We depend on the cpp module twice \u2013 once within the StaticLibrary item and once in the Export item. This is because by default Qbs does not export anything when depending on this product and the dependencies in this item (as well as properties set in this item) are private to this product while dependencies and properties set in the Export item are for export only.</p> <p>Finally, we have some Apple-specific settings. You can skip this part of the tutorial if you are using some other platform. We depend on the bundle module and set the bundle.isBundle to false:</p> <pre><code>Depends { name: 'bundle' }\nbundle.isBundle: false\n</code></pre> <p>By default, Qbs builds static and dynamic libraries as Frameworks on macOS. So, to keep things simple, we disable the framework build and build a plain old static library file here.</p>"},{"location":"tutorial/3.%20Dynamic%20Library/","title":"Dynamic Library","text":"<p>Let's now turn our static library into a dynamic library. It is a bit trickier with dynamic libraries since several things should be tweaked. First, we need to be able to mark methods (or classes) in our library as exported. Second, we need to tell our application where to look for our library at run time using rpaths.</p> <p>Some compilers, like MSVC, require us to mark which symbols we want to export or import. The canonical way would be to define some helper macros. Let's start with a header that defines those helper macros: lib/lib_global.h<pre><code>#ifndef LIB_GLOBAL_H\n#define LIB_GLOBAL_H\n\n#if defined(_WIN32) || defined(WIN32)\n#define MYLIB_DECL_EXPORT __declspec(dllexport)\n#define MYLIB_DECL_IMPORT __declspec(dllimport)\n#else\n#define MYLIB_DECL_EXPORT __attribute__((visibility(\"default\")))\n#define MYLIB_DECL_IMPORT __attribute__((visibility(\"default\")))\n#endif\n\n#if defined(MYLIB_LIBRARY)\n#define MYLIB_EXPORT MYLIB_DECL_EXPORT\n#else\n#define MYLIB_EXPORT MYLIB_DECL_IMPORT\n#endif\n\n#endif // LIB_GLOBAL_H\n</code></pre> This header defines the <code>MYLIB_EXPORT</code> macro that expands either to an \"export\" or to an \"import\" directive based on the presence of the <code>MYLIB_LIBRARY</code> macro. We can use this macro to mark a function as follows: lib/lib.h<pre><code>#include \"lib_global.h\"\n\nMYLIB_EXPORT const char *get_string();\n</code></pre> The modified library product may look like this:</p> <p>lib/lib.qbs<pre><code>DynamicLibrary {\n    name: \"mylib\"\n    files: [\n        \"lib.c\",\n        \"lib.h\",\n        \"lib_global.h\",\n    ]\n    version: \"1.0.0\"\n    install: true\n\n    Depends { name: \"cpp\" }\n    cpp.defines: [\"MYLIB_LIBRARY\", \"CRUCIAL_DEFINE\"]\n    cpp.sonamePrefix: qbs.targetOS.contains(\"darwin\") ? \"@rpath\" : undefined\n\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: [exportingProduct.sourceDirectory]\n    }\n\n    Depends { name: \"bundle\" }\n    bundle.isBundle: false\n}\n</code></pre> The most important change is that we changed the item type from StaticLibrary to DynamicLibrary. We also added the <code>MYLIB_LIBRARY</code> to the list of defines. We do this only when building the library but we are not exporting it \u2013 that way the users of our library will have methods marked for import rather than export.</p> <p>Finally, we set cpp.sonamePrefix to <code>\"@rpath\"</code>. This is required only for Apple platforms, see Run-Path Dependent Libraries for details.</p> <p>It is also required to set cpp.rpaths in our application file. Since the library is installed to the <code>lib</code> directory and the application is installed to the <code>bin</code> directory, we need to tell the loader to look in the <code>lib</code> directory. The FileInfo.relativePath method can help us: app/app.qbs<pre><code>cpp.rpaths: {\n    if (!cpp.rpathOrigin)\n        return [];\n    return [\n        FileInfo.joinPaths(\n            cpp.rpathOrigin,\n            FileInfo.relativePath(\n                FileInfo.joinPaths(\"/\", product.installDir),\n                FileInfo.joinPaths(\"/\", \"lib\")))\n    ];\n}\n</code></pre> On Linux, this expression would be equivalent to this: <code>cpp.rpaths: [\"$ORIGIN/../lib\"]</code>. Don't forget to <code>import qbs.FileInfo</code> in order to be able to use the FileInfo extension.</p> <p>To make the example complete, here's how the full <code>app/app.qbs</code> file should look like: <pre><code>import qbs.FileInfo\n\nCppApplication {\n    Depends { name: \"mylib\" }\n    name: \"My Application\"\n    targetName: \"myapp\"\n    files: \"main.c\"\n    version: \"1.0.0\"\n\n    consoleApplication: true\n    install: true\n\n    cpp.rpaths: {\n        if (!cpp.rpathOrigin)\n            return [];\n        return [\n            FileInfo.joinPaths(\n                cpp.rpathOrigin,\n                FileInfo.relativePath(\n                    FileInfo.joinPaths(\"/\", product.installDir),\n                    FileInfo.joinPaths(\"/\", \"lib\")))\n        ];\n    }\n}\n</code></pre></p>"},{"location":"tutorial/4.%20Convenience%20Items/","title":"Convenience Items","text":"<p>As you might have noticed, we are repeating ourselves when setting the same properties in our products \u2013 we set version, install, cpp.rpaths, and so on. For a single application and a library, that is not a big deal, but what if we have a dozen libraries? Luckily, this can be achieved using item inheritance \u2013 we move the common code to the base item and in the real product we will only set what is specific to that product (for example, the list of files).</p> <p>First, we need to tell Qbs where to look for our new base items. This can be achieved using the qbsSearchPaths property. We set this property to <code>\"qbs\"</code> so that Qbs will search our items in the <code>qbs</code> directory located in the project directory:</p> myproject.qbs<pre><code>Project {\n   name: \"My Project\"\n   minimumQbsVersion: \"2.0\"\n   references: [\n       \"app/app.qbs\",\n       \"lib/lib.qbs\"\n   ]\n   qbsSearchPaths: \"qbs\"\n}\n</code></pre> <p>Note</p> <p>This directory has a pre-defined structure: base items should be located under the <code>imports</code> subdirectory. See Custom Modules and Items for details.</p> <p>Let's create a base item for all our applications and move common code there:</p> qbs/imports/MyApplication.qbs<pre><code>import qbs.FileInfo\n\nCppApplication {\n    version: \"1.0.0\"\n    consoleApplication: true\n    install: true\n\n    cpp.rpaths: {\n        if (!cpp.rpathOrigin)\n            return [];\n        return [\n            FileInfo.joinPaths(\n                cpp.rpathOrigin,\n                FileInfo.relativePath(\n                    FileInfo.joinPaths(\"/\", product.installDir),\n                    FileInfo.joinPaths(\"/\", \"lib\")))\n        ];\n    }\n}\n</code></pre> <p>As you see, we managed to extract most of the code here, and our application file now only contains what's relevant to it:</p> app/app.qbs<pre><code>MyApplication {\n    Depends { name: \"mylib\" }\n    name: \"My Application\"\n    targetName: \"myapp\"\n    files: \"main.c\"\n}\n</code></pre> <p>Now let's do the same for our library:</p> qbs/imports/MyLibrary.qbs<pre><code>DynamicLibrary {\n    version: \"1.0.0\"\n    install: true\n\n    Depends { name: 'cpp' }\n    property string libraryMacro: name.replace(\" \", \"_\").toUpperCase() + \"_LIBRARY\"\n    cpp.defines: [libraryMacro]\n    cpp.sonamePrefix: qbs.targetOS.contains(\"darwin\") ? \"@rpath\" : undefined\n\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: [exportingProduct.sourceDirectory]\n    }\n\n    Depends { name: 'bundle' }\n    bundle.isBundle: false\n}\n</code></pre> <p>Here, we introduce a helper property, <code>libraryMacro</code>, with a default value calculated based on the capitalized product name. Since the name of out library product is <code>\"mylib\"</code>, this property will expand to <code>\"MYLIB_LIBRARY\"</code>. We can also override the default value for the macro in products that inherit our item like this:</p> <pre><code>MyLibrary {\n    libraryMacro: \"SOME_OTHER_LIBRARY_MACRO\"\n}\n</code></pre> <p>Let's take a look at the refactored library file:</p> lib/lib.qbs<pre><code>MyLibrary {\n    name: \"mylib\"\n    files: [\n        \"lib.c\",\n        \"lib.h\",\n        \"lib_global.h\",\n    ]\n    cpp.defines: base.concat([\"CRUCIAL_DEFINE\"])\n}\n</code></pre> <p>We managed to extract the reusable parts to common base items leaving the actual products clean and simple.</p> <p>Unfortunately, item inheritance comes with a price \u2013 when both parent and child items set the same property (cpp.defines in our case), the value in the child item wins. To work around this, the special base value exists \u2013 it gives access to the base item's value of the current property and makes it possible to extend its value rather than override it. Here, we concatenate the list of defines from the base item <code>[\"MYLIB_LIBRARY\"]</code> with a new list, specific to this product (namely, <code>['CRUCIAL_DEFINE']</code>).</p>"},{"location":"tutorial/5.%20Autotest/","title":"Autotest","text":"<p>Now that we can re-use our base items, let's add a simple autotest. We inherit the new item from the <code>MyApplication</code> item and add an <code>\"autotest\"</code> type:</p> <p>qbs/imports/MyAutoTest.qbs<pre><code>MyApplication {\n    type: base.concat([\"autotest\"])\n}\n</code></pre> This additional type is required for the helper AutotestRunner item. This item runs all products with the <code>\"autotest\"</code> type when it is being built. It also implicitly depends on all such products, so they will be built before running as well.</p> <p>Let's add this item to our top-level Project item:</p> <p><pre><code>Project {\n    name: \"My Project\"\n    minimumQbsVersion: \"2.0\"\n    // ...\n    AutotestRunner {\n        timeout: 60\n    }\n}\n</code></pre> Here we set the timeout property to 60 seconds so that our runner kills tests that run way too long.</p> <p>Now we need to add our first test. Let's create a new product with the following content:</p> <p>test/test.qbs<pre><code>MyAutoTest {\n    Depends { name: \"mylib\" }\n    name: \"mytest\"\n    files: \"test.c\"\n}\n</code></pre> Here we depend on our library (which we are going to test), set the product name, and specify the source file, which looks like this: test/test.c<pre><code>#include \"lib.h\"\n\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main(int argc, char *argv[])\n{\n    if (argc &gt; 2) {\n        printf(\"usage: test [value]\\n\");\n        return 1;\n    }\n    const char *expected = argc == 2 ? argv[1] : \"Hello from library\";\n    if (strcmp(get_string(), expected) != 0) {\n        printf(\"text differs\\n\");\n        return 1;\n    }\n    return 0;\n}\n</code></pre> The test compares the value from the library with the value from the command line.</p> <p>Don't forget to add the new test product to the references property in the Project: myproject.qbs<pre><code>references: [\n    \"app/app.qbs\",\n    \"lib/lib.qbs\",\n    \"test/test.qbs\",\n]\n</code></pre> Now we can build the autotest product \u2013 this will also launch our test: <pre><code>$ qbs build -p \"autotest-runner\"\n...\nrunning test mytest [autotest-runner]\nBuild done for configuration default.\n</code></pre></p>"},{"location":"tutorial/6.%20Project%20Properties/","title":"Project Properties","text":"<p>It would be nice if our project was configurable. Let's add some properties to our root project file:</p> myproject.qbs<pre><code>Project {\n    property string version: \"1.0.0\"\n    property bool installDebugInformation: true\n    property bool withTests: false\n    property stringList autotestArguments: []\n    property stringList autotestWrapper: []\n\n    name: \"My Project\"\n    minimumQbsVersion: \"2.0\"\n    // ...\n</code></pre> <p>Now we can use those properties in our helper items and in products:</p> qbs/imports/MyApplication.qbs<pre><code>CppApplication {\n    version: project.version\n    consoleApplication: true\n    install: true\n    installDebugInformation: project.installDebugInformation\n    // ...\n</code></pre> <p>Here, we access the project file using the special project value. If the nearest project in the project tree does not have the desired property, Qbs looks it up in the parent project, potentially all the way up to the top-level project. We also use the installDebugInformation property here. By default, it has the same value as install but we want to make the debug information install optional.</p> <p>Let's now disable the tests if <code>parent.withTests</code> (which in this case is an equivalent of <code>project.withTests</code>) is <code>false</code>:</p> myproject.qbs<pre><code>SubProject {\n    filePath: \"test/test.qbs\"\n    Properties {\n        condition: parent.withTests\n    }\n}\n</code></pre> <p>Here we use the Properties item within the SubProject item. This item allows to override a subproject's properties which can be useful when adding some other Qbs project as a Git submodule. Of course, it is not very useful in our particular case since we only set the Project.condition property. We could achieve the same effect by setting the condition property of the SubProject item:</p> <pre><code>SubProject {\n    filePath: \"test/test.qbs\"\n    condition: parent.withTests\n}\n</code></pre> <p>Another way would be to disable the test product. That way, an IDE would still show the whole project tree including disabled tests:</p> qbs/imports/MyAutoTest.qbs<pre><code>MyApplication {\n    condition: project.withTests\n    type: base.concat([\"autotest\"])\n}\n</code></pre> <p>Let's finally make our AutotestRunner configurable too:</p> myproject.qbs<pre><code>AutotestRunner {\n    condition: parent.withTests\n    arguments: parent.autotestArguments\n    wrapper: parent.autotestWrapper\n}\n</code></pre> <p>There are several ways to override project properties from the command line. First, the special <code>project</code> variable can be used to set the properties of the top-level project:</p> <pre><code>$ qbs resolve project.withTests:false\n</code></pre> <p>You can also refer to properties using project's name:</p> <pre><code>$ qbs resolve \"projects.My Project.withTests:false\"\n</code></pre> <p>This can again be useful for accessing the properties of external sub-projects. Note that since the project name contains spaces, we use quotes here.</p>"},{"location":"tutorial/7.%20Buildconfig%20Module/","title":"Buildconfig Module","text":"<p>In the previous chapter, we added some properties to our main Project file. While this is a perfect approach for public properties of the project, sometimes we want to add some private properties for better tuning. Of course, we could put everything in the Project file, but that would make it very convoluted. Also, accessing the top-level project all the way from products makes things strongly tied.</p> <p>You can also use a Module that products may depend on. That way, a Product only uses properties of the module it depends on without the need to know about the top-level project.</p> <p>Let's create a file named <code>mybuildconfig.qbs</code> and put it into the <code>qbs/modules/mybuildconfig</code> directory, near the <code>qbs/imports</code> directory:</p> qbs/modules/mybuildconfig.qbs<pre><code>Module {\n}\n</code></pre> <p>So far, this is just an empty Module so let's add some properties to it:</p> qbs/modules/mybuildconfig/mybuildconfig.qbs<pre><code>Module {\n    property string appInstallDir: \"bin\"\n    property string libDirName: \"lib\"\n    property string libInstallDir: qbs.targetOS.contains(\"windows\") ? appInstallDir : libDirName\n</code></pre> <p>We added the <code>appInstallDir</code> and <code>libInstallDir</code> properties that will allow us to configure the installation location of the our application and library, respectively.</p> <p>Now we can use our module in the <code>MyApplication.qbs</code> item:</p> qbs/imports/MyApplication.qbs<pre><code>CppApplication {\n    Depends { name: \"mybuildconfig\" }\n    installDir: mybuildconfig.appInstallDir\n\n    version: \"1.0.0\"\n    // ...\n</code></pre> <p>We pull in the new module using the Depends item, similar to how we pulled in the cpp module dependency earlier. We also set the installDir property to the corresponding module property, namely to <code>mybuildconfig.appInstallDir</code>.</p> <p>Qbs modules have the feature to automatically export properties of other modules. Those exported properties are merged in the resulting product. We can use this feature to set the cpp.rpaths in our module rather than in products:</p> qbs/modules/mybuildconfig/mybuildconfig.qbs<pre><code>Module {\n    property string appInstallDir: \"bin\"\n    property string libDirName: \"lib\"\n    property string libInstallDir: qbs.targetOS.contains(\"windows\") ? appInstallDir : libDirName\n\n    Depends { name: \"cpp\" }\n\n    property bool enableRPath: true\n    property stringList libRPaths: {\n        if (enableRPath &amp;&amp; cpp.rpathOrigin &amp;&amp; product.installDir) {\n            return [FileInfo.joinPaths(cpp.rpathOrigin, FileInfo.relativePath(\n                                           FileInfo.joinPaths('/', product.installDir),\n                                           FileInfo.joinPaths('/', libInstallDir)))];\n        }\n        return [];\n    }\n\n    cpp.rpaths: libRPaths\n}\n</code></pre> <p>Here, we inject the dependency on the cpp module and calculate the <code>libRPaths</code> property. This is a relative path from the <code>product.installDir</code> (which is either <code>\"bin\"</code> or <code>\"lib\"</code>, depending on product type to <code>libInstallDir</code>). Finally, we set cpp.rpaths to this property. This way, those <code>rpaths</code> will be automatically exported to all products that depend on the <code>mybuildconfig</code> module.</p> <p>Now, we can also use our new module in the library item:</p> qbs/imports/MyLibrary.qbs<pre><code>// ...\nDepends { name: \"mybuildconfig\" }\ninstallDir: mybuildconfig.libInstallDir\n\nDepends { name: \"cpp\" }\nproperty string libraryMacro: name.replace(\" \", \"_\").toUpperCase() + \"_LIBRARY\"\ncpp.defines: [libraryMacro]\ncpp.sonamePrefix: qbs.targetOS.contains(\"darwin\") ? \"@rpath\" : undefined\n\nExport {\n// ...\n</code></pre> <p>Let's change the library folder name from <code>\"lib\"</code> to <code>\"lib64\"</code> when building our project:</p> <pre><code>$ qbs modules.mybuildconfig.libDirName:lib64\n...\n$ ls default/install-root/usr/local/\nbin    lib64\n</code></pre>"},{"location":"tutorial/8.%20Configurable%20Library/","title":"Configurable Library","text":"<p>In this chapter, we will make our library more configurable. We will add configuration options to be able to choose between static and dynamic builds.</p> <p>We start with some new properties in the <code>mybuildconfig</code> module:</p> qbs/modules/mybuildconfig/mybuildconfig.qbs<pre><code>Module {\n    ...\n    property bool staticBuild: false\n    property bool installStaticLib: true\n    ...\n}\n</code></pre> <p>We need to do some modifications to export macros in the <code>lib/lib_global.h</code> header:</p> lib/lib_global.h<pre><code>#if defined(MYLIB_STATIC_LIBRARY)\n#define MYLIB_EXPORT\n#else\n#if defined(MYLIB_LIBRARY)\n#define MYLIB_EXPORT MY_LIB_DECL_EXPORT\n#else\n#define MYLIB_EXPORT MY_LIB_DECL_IMPORT\n#endif\n#endif\n</code></pre> <p>Here' we added a new branch when <code>MYLIB_STATIC_LIBRARY</code> is defined. In that case, we make the <code>MY_LIB_EXPORT</code> macro empty.</p> <p>Now, let's modify the <code>qbs/imports/MyLibrary.qbs</code> file as follows:</p> qbs/imports/MyLibrary.qbs<pre><code>Library {\n    Depends { name: \"cpp\" }\n    Depends { name: \"mybuildconfig\" }\n    type: mybuildconfig.staticBuild ? \"staticlibrary\" : \"dynamiclibrary\"\n    version: \"1.0.0\"\n    install: !mybuildconfig.staticBuild || mybuildconfig.installStaticLib\n    installDir: mybuildconfig.libInstallDir\n\n    readonly property string _nameUpper : name.replace(\" \", \"_\").toUpperCase()\n    property string libraryMacro: _nameUpper + \"_LIBRARY\"\n    property string staticLibraryMacro: _nameUpper + \"_STATIC_LIBRARY\"\n    cpp.defines: mybuildconfig.staticBuild ? [staticLibraryMacro] : [libraryMacro]\n    cpp.sonamePrefix: qbs.targetOS.contains(\"darwin\") ? \"@rpath\" : undefined\n\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: [exportingProduct.sourceDirectory]\n        cpp.defines: exportingProduct.mybuildconfig.staticBuild\n            ? [exportingProduct.staticLibraryMacro] : []\n    }\n\n    Depends { name: \"bundle\" }\n    bundle.isBundle: false\n}\n</code></pre> <p>First thing to notice is that we changed the type of the item from DynamicLibrary to the Library item which is a common base item for dynamic and static libraries.</p> <p>Second, we change the type of the product so it depends on the <code>staticBuild</code> property:</p> <pre><code>type: mybuildconfig.staticBuild ? \"staticlibrary\" : \"dynamiclibrary\"\n</code></pre> <p>Third, we change our export macro to be different in the static and dynamic builds to correspond with the changes we made to the <code>lib_global.h</code>:</p> <pre><code>readonly property string _nameUpper : name.replace(\" \", \"_\").toUpperCase()\nproperty string libraryMacro: _nameUpper + \"_LIBRARY\"\nproperty string staticLibraryMacro: _nameUpper + \"_STATIC_LIBRARY\"\ncpp.defines: mybuildconfig.staticBuild ? [staticLibraryMacro] : [libraryMacro]\n</code></pre> <p>Note that in a static build we export the <code>MYLIB_STATIC_LIBRARY</code> macro so that the dependent products will know whether they link to a static or dynamic library:</p> <pre><code>Export {\n    ...\n    cpp.defines: exportingProduct.mybuildconfig.staticBuild\n        ? [exportingProduct.staticLibraryMacro] : []\n}\n</code></pre> <p>Now we can build our project in dynamic or static mode:</p> <pre><code>$ qbs resolve modules.mybuildconfig.staticBuild:false &amp;&amp; qbs build\n...\n$ ls default/install-root/usr/local/lib/\n    libmylib.1.0.0.so\n    libmylib.1.0.so\n    libmylib.1.so\n    libmylib.so\n$ rm -r default\n$ qbs resolve modules.mybuildconfig.staticBuild:true &amp;&amp; qbs build\n...\n$ $ ls default/install-root/usr/local/lib/\n    libmylib.a\n</code></pre>"},{"location":"tutorial/9.%20Version%20Header/","title":"Version Header","text":"<p>To create new files, such as version headers, during the build, use Rules. Every command Qbs executes, such as compile or linker commands, is described by a corresponding Rule in a Module or a Product.</p> <p>In this section, we will create a simple header with a string constant based on the variable in our project.</p> <p>First, we add this variable to our <code>mybuildconfig</code> module:</p> qbs/modules/mybuildconfig/mybuildconfig.qbs<pre><code>Module {\n    Depends { name: \"cpp\" }\n\n    property string productVersion: \"1.0.0\"\n    // ...\n</code></pre> <p>Next, we create a new file, <code>version.h.in</code>, located in the <code>version-header</code> directory. This file contains the template for our header:</p> version-header/version.h.in<pre><code>#ifndef VERSION_H\n#define VERSION_H\n\nconst char kProductVersion[] = \"${PRODUCT_VERSION}\";\n\n#endif // VERSION_H\n</code></pre> <p>Now we create a file called <code>version-header.qbs</code> in the same directory. This file contains a Product with a Rule that turns the <code>version.h.in</code> into a real header. Let's go through the contents of the file:</p> version-header/version-header.qbs<pre><code>import qbs.TextFile\n\nProduct {\n    name: \"version_header\"\n    type: \"hpp\"\n\n    Depends { name: \"mybuildconfig\" }\n</code></pre> <p>First, we import TextFile. We will need this class to read the template and write the resulting header. Second, we declare a new Product named <code>\"version_header\"</code> and with the <code>\"hpp\"</code> type. This is the type of the artifact we will create in the Rule. Third, we add the dependency on the <code>mybuildconfig</code> module to use the new <code>mybuildconfig.productVersion</code> variable.</p> <p>We also add a Group with the template file and assign the <code>version_h_in</code> tag to the file:</p> version-header/version-header.qbs<pre><code>    Group {\n        files: [\"version.h.in\"]\n        fileTags: [\"version_h_in\"]\n    }\n</code></pre> <p>Qbs Rules work with file tags, instead of working with files directly, which makes it easy to reuse rules. The name of the tag is chosen arbitrarily here. We could use the name of the file as a tag, but to avoid confusion between file name and file tag, we use underscores in the tag instead of dots.</p> <p>Now we can create a Rule itself:</p> version-header/version-header.qbs<pre><code>    Rule {\n        inputs: [\"version_h_in\"]\n        Artifact {\n            filePath: \"version.h\"\n            fileTags: \"hpp\"\n        }\n</code></pre> <p>Here, we specify that our Rule takes files tagged as <code>\"version_h_in\"</code> and produces an Artifact with the name <code>\"version.h\"</code> and tagged <code>\"hpp\"</code>. By default, files are created in the Product.destinationDirectory folder. We add the <code>\"hpp\"</code> tag for the header as this is the tag the cpp module uses for headers. That way, Qbs can track changes and process our generated file the same way it treats all other headers. Note that earlier we set the product type to <code>\"hpp\"</code> as well. Qbs requires that artifact type should match the product type directly or be accessible via the chain of Rules. Otherwise, the Rule won't be executed. For details, see the Rules and Product Types section.</p> <p>The actual code generation happens in the Rule.prepare script:</p> version-header/version-header.qbs<pre><code>        prepare: {\n            var cmd = new JavaScriptCommand();\n            cmd.description = \"generating \" + output.fileName;\n            cmd.highlight = \"codegen\";\n            cmd.sourceCode = function() {\n                var file = new TextFile(input.filePath, TextFile.ReadOnly);\n                var content = file.readAll();\n\n                content = content.replace(\n                    \"${PRODUCT_VERSION}\",\n                    product.mybuildconfig.productVersion);\n\n                file = new TextFile(output.filePath, TextFile.WriteOnly);\n                file.write(content);\n                file.close();\n            }\n            return cmd;\n        }\n</code></pre> <p>In this script, we create a JavaScriptCommand object and set some meta properties, such as the description and highlight. For details about Commands, see Command and JavaScriptCommand. In the sourceCode variable, we create a JavaScript function that opens the input file, reads its content using the TextFile object, replaces the <code>\"${PRODUCT_VERSION}\"</code> placeholder with the actual value in the <code>product.mybuildconfig.productVersion</code> variable, and writes the resulting content into the output file.</p> <p>Finally, we export the exportingProduct.buildDirectory so that products that depend on this product can include our generated header:</p> version-header/version-header.qbs<pre><code>    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: exportingProduct.buildDirectory\n    }\n</code></pre> <p>The full content of the file should look like this:</p> version-header/version-header.qbs<pre><code>import qbs.TextFile\n\nProduct {\n    name: \"version_header\"\n    type: \"hpp\"\n\n    Depends { name: \"mybuildconfig\" }\n\n    Group {\n        files: [\"version.h.in\"]\n        fileTags: [\"version_h_in\"]\n    }\n\n    Rule {\n        inputs: [\"version_h_in\"]\n        Artifact {\n            filePath: \"version.h\"\n            fileTags: \"hpp\"\n        }\n        prepare: {\n            var cmd = new JavaScriptCommand();\n            cmd.description = \"generating \" + output.fileName;\n            cmd.highlight = \"codegen\";\n            cmd.sourceCode = function() {\n                var file = new TextFile(input.filePath, TextFile.ReadOnly);\n                var content = file.readAll();\n\n                content = content.replace(\n                    \"${PRODUCT_VERSION}\",\n                    product.mybuildconfig.productVersion);\n\n                file = new TextFile(output.filePath, TextFile.WriteOnly);\n                file.write(content);\n                file.close();\n            }\n            return cmd;\n        }\n    }\n\n    Export {\n        Depends { name: \"cpp\" }\n        cpp.includePaths: exportingProduct.buildDirectory\n    }\n}\n</code></pre> <p>Let's now add our Product into the root project so Qbs will be aware of it:</p> myproject.qbs<pre><code>references: [\n    \"app/app.qbs\",\n    \"lib/lib.qbs\",\n    \"version-header/version-header.qbs\",\n]\n</code></pre> <p>We also need to add the dependency on the <code>\"version_header\"</code> to our application:</p> app/app.qbs<pre><code>MyApplication {\n    Depends { name: \"mylib\" }\n    Depends { name: \"version_header\" }\n    name: \"My Application\"\n    targetName: \"myapp\"\n    files: \"main.c\"\n}\n</code></pre> <p>Now we can include the header in the <code>main.c</code> file and print the contents of the string constant:</p> app/main.c<pre><code>#include &lt;lib.h&gt;\n#include &lt;version.h&gt;\n\n#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Hello, world\\n\");\n    printf(\"%s\\n\", get_string());\n    printf(\"ProductVersion = %s\\n\", kProductVersion);\n    return 0;\n}\n</code></pre> <p>Let's try and run our application. You should see something like this:</p> <pre><code>$ qbs run -p \"My Application\"\nStarting target. Full command line: .../default/install-root/usr/local/bin/myapp\nHello, world\nHello from library\nProductVersion = 1.0.0  # (1)!\n</code></pre> <ol> <li>Here is our version!</li> </ol>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/page/2/","title":"Blog","text":""}]}